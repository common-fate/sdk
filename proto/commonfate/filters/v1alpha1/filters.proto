syntax = "proto3";

package commonfate.filters.v1alpha1;

import "commonfate/authz/v1alpha1/evaluation.proto";
import "commonfate/entity/v1alpha1/eid.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// Filters items with a particular authorization decision
message DecisionFilter {
  commonfate.authz.v1alpha1.Decision decision = 1;
}

// Filters by a particular key/value tag associated with items.
// Will filter for either items which match the tag, or do not match the tag,
// based on the 'comparison' value.
message TagFilter {
  string key = 1;
  string value = 2;
  BoolComparison comparison = 3;
}

// Filters where the principal/action/resource matches particular entities.
message EntityFilter {
  // IDs of entities to filter for. Will filter for a principal/action/resource matching any of these entities.
  repeated commonfate.entity.v1alpha1.EID ids = 1;
  BoolComparison comparison = 2;
}

//
message EntityOfTypeFilter {
  string type = 1;
  repeated string id = 2;
  BoolComparison comparison = 3;
}

// Filters where the principal/action/resource matches particular entity types.
message EntityTypeFilter {
  // Types of entities to filter for. Will filter for a principal/action/resource matching any of these entities.
  repeated string types = 1;
  BoolComparison comparison = 2;
}

// Filters based on an integer equality.
message IntegerFilter {
  int64 value = 1;
  EqualityComparison comparison = 2;
}

// Filters based on a condition being true or false.
message BoolFilter {
  BoolComparison comparison = 2;
}

message RelativeTimeBound {
  google.protobuf.Duration duration = 1;
}
message AbsoluteTimeBound {
  google.protobuf.Timestamp time = 1;
}
message TimeBound {
  oneof bound {
    RelativeTimeBound relative = 1;
    AbsoluteTimeBound absolute = 2;
  }
}

// Filters based on a time range, where start or end is not provided a relative time is used
// e.g everything before an end time or everything after a start time
message TimeRangeFilter {
  // Optionaly provide a starting bound for the date range
  optional TimeBound start = 1;
  // Optionaly provide an ending bound for the date range
  optional TimeBound end = 2;
}

enum BoolComparison {
  BOOL_COMPARISON_UNSPECIFIED = 0;

  // Equal to the provided value.
  BOOL_COMPARISON_EQUAL = 1;

  // Not equal to the provided value.
  BOOL_COMPARISON_NOT_EQUAL = 2;
}

enum EqualityComparison {
  EQUALITY_COMPARISON_UNSPECIFIED = 0;

  // Equal to the provided value.
  EQUALITY_COMPARISON_EQUAL = 1;

  // Not equal to the provided value.
  EQUALITY_COMPARISON_NOT_EQUAL = 2;

  // Less than the provided value.
  EQUALITY_COMPARISON_LESS_THAN = 3;

  // Greater than the provided value.
  EQUALITY_COMPARISON_GREATER_THAN = 4;

  // Less than or equal to the provided value.
  EQUALITY_COMPARISON_LESS_THAN_EQUAL = 5;

  // Greater than or equal to the provided value.
  EQUALITY_COMPARISON_GREATER_THAN_EQUAL = 6;
}
