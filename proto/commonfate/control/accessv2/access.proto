syntax = "proto3";

package commonfate.access.v1alpha1;

import "commonfate/access/v1alpha1/access.proto";
import "commonfate/access/v1alpha1/access_request.proto";
import "commonfate/access/v1alpha1/diagnostic.proto";
import "commonfate/access/v1alpha1/grant.proto";
import "commonfate/access/v1alpha1/named_eid.proto";
import "commonfate/access/v1alpha1/user.proto";
import "commonfate/authz/v1alpha1/read_only.proto";
import "commonfate/control/attest/v1alpha1/attestation.proto";
import "commonfate/entity/v1alpha1/eid.proto";
import "commonfate/entity/v1alpha1/entity.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// AccessService is the Access Handler's user-facing API.
// Users call this API to ensure that they have access to entitlements.
service AccessV2Service {
  // Query for JIT availabilities.
  rpc QueryAvailabilitiesV2(QueryAvailabilitiesRequest) returns (QueryAvailabilitiesResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
  }

  rpc QueryEntitlementsV2(QueryEntitlementsRequest) returns (QueryEntitlementsResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
  }

  rpc QueryApproversV2(QueryApproversRequest) returns (QueryApproversResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
  }

  rpc PreviewUserAccessV2(PreviewUserAccessRequest) returns (PreviewUserAccessResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
  }

  rpc PreviewEntitlementAccessV2(PreviewEntitlementAccessRequest) returns (PreviewEntitlementAccessResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
  }
}
