syntax = "proto3";

package commonfate.access.v1alpha1;

import "commonfate/control/attest/v1alpha1/attestation.proto";
import "commonfate/access/v1alpha1/user.proto";
import "commonfate/entity/v1alpha1/entity.proto";
import "commonfate/entity/v1alpha1/uid.proto";
import "commonfate/access/v1alpha1/grant.proto";
import "commonfate/access/v1alpha1/named_uid.proto";
import "commonfate/access/v1alpha1/reviewer_preview.proto";
import "commonfate/access/v1alpha1/audit_logs.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// The Access Request API.
//
// When operating on Access Requests, Common Fate will automatically attempt to apply the action (Approve/Close/Revoke etc)
// to each Grant associated with the Access Request. Warnings will be returned if the operation fails for any grants.
service AccessRequestService {
    rpc QueryAccessRequests(QueryAccessRequestsRequest) returns (QueryAccessRequestsResponse) {}
    rpc GetAccessRequest(GetAccessRequestRequest) returns (GetAccessRequestResponse) {}

    // Approving an Access Request will attempt to approve all of the Grants associated with the request.
    //
    // If the caller is not permitted to approve particular grants, warnings will be returned.
    rpc ApproveAccessRequest(ApproveAccessRequestRequest) returns (ApproveAccessRequestResponse) {}

    // Closing an Access Request will make it no longer reviewable and will deactivate any Grants associated with the request.
    rpc CloseAccessRequest(CloseAccessRequestRequest) returns (CloseAccessRequestResponse) {}
}

message QueryAccessRequestsRequest {
    // The token for the next page.
    string page_token = 10;
}

message QueryAccessRequestsResponse {
  repeated AccessRequest access_requests = 1;
  string next_page_token = 2;
}

message GetAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message GetAccessRequestResponse {
  AccessRequest access_request = 1;
}


// A request to be given entitlements allowing <Action> to be performed on <Resource>.
//
// For example, if the action is 'Admin', and the resource is AWS::Account::123456789012,
// This request is for entitlements allowing Admin access to the account 123456789012.
message AccessRequest {
    // The ID of the Access Request.
    string id = 1;

    // Batch ID of the Access Request. Access Requests created in the same 
    // API call have the same Batch ID.
    string batch_id = 2;

    // The grants under consideration for access.
    repeated Grant grants = 3;

    // An access request is reviewable if one or more Grants in the request
    // requires a manual review.
    bool reviewable = 4;

    // True if the Access Request already existed and wasn't created by the API call.
    bool existing = 5;

    // The timestamp that the request was created at.
    google.protobuf.Timestamp created_at = 8;
}


message ApproveAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message ApproveAccessRequestResponse {
  repeated Diagnostic diagnostics = 1;
}

message CloseAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message CloseAccessRequestResponse {
  repeated Diagnostic diagnostics = 1;
}

enum DiagnosticLevel {
  DIAGNOSTIC_LEVEL_UNSPECIFIED = 0;
  DIAGNOSTIC_LEVEL_INFO = 1;
  DIAGNOSTIC_LEVEL_WARNING = 2;
  DIAGNOSTIC_LEVEL_ERROR = 3;
}

message Diagnostic {
  DiagnosticLevel level = 1;

  // The resource the diagnostic message relates to.
  // Can be empty if the message doesn't relate to a particular resource.
  commonfate.entity.v1alpha1.UID resource = 2;

  // The message.
  string message = 3;
}
