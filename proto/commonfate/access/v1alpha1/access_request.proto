syntax = "proto3";

package commonfate.access.v1alpha1;

import "commonfate/control/attest/v1alpha1/attestation.proto";
import "commonfate/access/v1alpha1/user.proto";
import "commonfate/authz/v1alpha1/entity.proto";
import "commonfate/access/v1alpha1/named_uid.proto";
import "commonfate/access/v1alpha1/activity.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// TheAccess Request API.
//
// When operating on Access Requests, Common Fate will automatically attempt to apply the action (Approve/Close/Revoke etc)
// to each Grant associated with the Access Request. Warnings will be returned if the operation fails for any grants.
service AccessRequestService {
    rpc QueryAccessRequests(QueryAccessRequestsRequest) returns (QueryAccessRequestsResponse) {}
    rpc GetAccessRequest(GetAccessRequestRequest) returns (GetAccessRequestResponse) {}

    // Approving an Access Request will attempt to approve all of the Grants associated with the request.
    //
    // If the caller is not permitted to approve particular grants, warnings will be returned.
    rpc ApproveAccessRequest(ApproveAccessRequestRequest) returns (ApproveAccessRequestResponse) {}

    // Closing an Access Request will make it no longer reviewable and will deactivate any Grants associated with the request.
    rpc CloseAccessRequest(CloseAccessRequestRequest) returns (CloseAccessRequestResponse) {}
}

message QueryAccessRequestsRequest {
    // The token for the next page.
    string page_token = 10;
}

message QueryAccessRequestsResponse {
  repeated AccessRequest access_requests = 1;
  string next_page_token = 2;
}

message GetAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message GetAccessRequestResponse {
  AccessRequest access_request = 1;
}


// A request to be given entitlements allowing <Action> to be performed on <Resource>.
//
// For example, if the action is 'Admin', and the resource is AWS::Account::123456789012,
// This request is for entitlements allowing Admin access to the account 123456789012.
message AccessRequest {
    // The ID of the Access Request.
    string id = 1;

    // Batch ID of the Access Request. Access Requests created in the same 
    // API call have the same Batch ID.
    string batch_id = 2;

    // The grants under consideration for access.
    repeated Grant grants = 3;

    // An access request is reviewable if one or more Grants in the request
    // requires a manual review.
    bool reviewable = 4;

    // True if the Access Request already existed and wasn't created by the API call.
    bool existing = 5;

    // The timestamp that the request was created at.
    google.protobuf.Timestamp created_at = 8;
}

message Grant {
    // The ID of the Grant.
    string id = 1;

    // A user-friendly name describing the access, such as "AdministratorAccess to tax-api-prod"
    string name = 2;

    // The resource being requested.
    NamedUID target = 3;

    // The role being requested, such as "View" or "Admin".
    NamedUID role = 4;

    // The user or service account that requested the access.
    //
    // If a service account requested access, the 'name' and 'email' may be empty.
    User principal = 5;

    // The status of the Grant.
    GrantStatus status = 6;

    // A preview of users designated as reviewers. For Grants with many reviewers,
    // this will not be the full list of reviewers.
    repeated User reviewers_preview = 7;

    // An approximate count of reviewers for the Grant.
    uint32 reviewer_count = 8;

    // For active grants, the time that the access is due to expire.
    google.protobuf.Timestamp expires_at = 9;

    // For active grants, the time that the user may attempt to extend the grant.
    // If empty, extension is not permitted.
    google.protobuf.Timestamp extension_permitted_at = 10;

    // Recent activity associated with the Grant.
    repeated Activity recent_activity = 11;

    // A count of activity events associated with the Grant.
    uint32 activity_count = 12;
}

enum GrantStatus {
    GRANT_STATUS_UNSPECIFIED = 0;

    // Awaiting a manual review.
    GRANT_STATUS_PENDING_APPROVAL = 1;

    // Approved and awaiting activation by the principal.
    GRANT_STATUS_APPROVED = 2;
    // The grant to the entitlement is currently active. 
    GRANT_STATUS_ACTIVE = 3;

    // No longer active. Grants may be inactive due to several reasons, such as:
    // - the grant was cancelled by the user
    // - the grant was revoked by an administrator
    // - the grant has expired
    GRANT_STATUS_INACTIVE = 4;

    // The Grant encountered a fatal error.
    GRANT_STATUS_ERROR = 5;
}

message RevokeAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message RevokeAccessRequestResponse {
  Warnings warnings = 1;
}


message ApproveAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message ApproveAccessRequestResponse {
  Warnings warnings = 1;
}

message CloseAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;
}

message CloseAccessRequestResponse {
  Warnings warnings = 1;
}

message Warnings {
  // Grants that were unable to be acted upon because of a permissions error.
  repeated Grant grants_permission_denied = 1;

  // Grants that were unable to be acted upon because they were in an invalid state.
  repeated Grant grants_invalid_status = 2;

  // Grants that have expired.
  repeated Grant grants_expired = 3;
}
