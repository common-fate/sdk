syntax = "proto3";

package commonfate.access.v1alpha1;

import "buf/validate/validate.proto";
import "commonfate/access/v1alpha1/diagnostic.proto";
import "commonfate/access/v1alpha1/grant.proto";
import "commonfate/access/v1alpha1/user.proto";
import "commonfate/authz/v1alpha1/read_only.proto";
import "commonfate/entity/v1alpha1/eid.proto";
import "commonfate/entity/v1alpha1/entity_service.proto";
import "commonfate/filters/v1alpha1/filters.proto";
import "google/protobuf/timestamp.proto";

// The Access Request API.
//
// When operating on Access Requests, Common Fate will automatically attempt to apply the action (Approve/Close/Revoke etc)
// to each Grant associated with the Access Request. Warnings will be returned if the operation fails for any grants.
service AccessRequestService {
  rpc QueryAccessRequests(QueryAccessRequestsRequest) returns (QueryAccessRequestsResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
  }

  // Query the access requests where the user is the principal
  rpc QueryMyAccessRequests(QueryMyAccessRequestsRequest) returns (QueryMyAccessRequestsResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
  }

  rpc GetAccessRequest(GetAccessRequestRequest) returns (GetAccessRequestResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
  }

  // Returns the actions that the current user is allowed to perform on the request
  rpc GetAccessRequestActions(GetAccessRequestActionsRequest) returns (GetAccessRequestActionsResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
  }

  // Approving an Access Request will attempt to approve all of the Grants associated with the request.
  //
  // If the caller is not permitted to approve particular grants, warnings will be returned.
  rpc ApproveAccessRequest(ApproveAccessRequestRequest) returns (ApproveAccessRequestResponse) {}

  rpc ActivateAccessRequest(ActivateAccessRequestRequest) returns (ActivateAccessRequestResponse) {}

  // Closing an Access Request will make it no longer reviewable and will deactivate any Grants associated with the request.
  rpc CloseAccessRequest(CloseAccessRequestRequest) returns (CloseAccessRequestResponse) {}
}

enum RequestStatus {
  REQUEST_STATUS_UNSPECIFIED = 0;

  REQUEST_STATUS_PENDING = 1;

  REQUEST_STATUS_ACTIVE = 2;

  REQUEST_STATUS_CLOSED = 3;
}

message Filter {
  oneof filter {
    commonfate.filters.v1alpha1.OccurredAtFilter occurred_at = 1;
    commonfate.filters.v1alpha1.EntityFilter requested_by = 2;
    commonfate.filters.v1alpha1.EntityFilter closed_by = 3;
    commonfate.filters.v1alpha1.EntityFilter approved_by = 4;
    commonfate.filters.v1alpha1.EntityFilter target = 5;
    commonfate.filters.v1alpha1.EntityFilter role = 6;
    commonfate.filters.v1alpha1.EntityTypeFilter target_type = 7;
    commonfate.filters.v1alpha1.EntityTypeFilter role_type = 8;
  }
}

message QueryAccessRequestsRequest {
  // The token for the next page.
  string page_token = 1;
  bool archived = 2;
  optional commonfate.entity.v1alpha1.Order order = 3;
  repeated Filter filters = 4;
  RequestStatus request_status = 5;
}

message QueryMyAccessRequestsResponse {
  repeated AccessRequest access_requests = 1;
  string next_page_token = 2;
}

message QueryMyAccessRequestsRequest {
  // The token for the next page.
  string page_token = 1;
  optional commonfate.entity.v1alpha1.Order order = 2;
  RequestStatus request_status = 3;
}

message QueryAccessRequestsResponse {
  repeated AccessRequest access_requests = 1;
  string next_page_token = 2;
}

message GetAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1 [(buf.validate.field).string.min_len = 1];
}

message GetAccessRequestResponse {
  AccessRequest access_request = 1;
}

message GetAccessRequestActionsRequest {
  string access_request_id = 1;
}

message GetAccessRequestActionsResponse {
  AccessRequestActions access_request_actions = 1;
}

// A request to be given entitlements allowing <Action> to be performed on <Resource>.
//
// For example, if the action is 'Admin', and the resource is AWS::Account::123456789012,
// This request is for entitlements allowing Admin access to the account 123456789012.
message AccessRequest {
  // The ID of the Access Request.
  string id = 1;

  // Batch ID of the Access Request. Access Requests created in the same
  // API call have the same Batch ID.
  string batch_id = 2;

  // The grants under consideration for access.
  repeated Grant grants = 3;

  // An access request is reviewable if one or more Grants in the request
  // requires a manual review.
  bool reviewable = 4;

  // True if the Access Request already existed and wasn't created by the API call.
  bool existing = 5;

  // The timestamp that the request was created at.
  google.protobuf.Timestamp created_at = 8;

  // The justification supplied when the request was created
  Justification justification = 9;

  // The user or service account that requested the access.
  //
  // If a service account requested access, the 'name' and 'email' may be empty.
  User principal = 10;

  string workflow_id = 11;
  string workflow_name = 12;
}

message AccessRequestActions {
  // True if the current user is allowed to approve the access request
  bool approve_allowed = 1;
  // True if the current user is allowed to activate the access request
  bool activate_allowed = 2;
  // True if the current user is allowed to perform a breakglass activate on the access request
  // potentially bypassing approval requirements
  bool breakglass_activate_allowed = 3;
  // True if the current user is allowed to extend the access request
  bool extend_allowed = 4;
  // True if the user is allowed to forcibly close an access request.
  // When a request is force closed, the request is closed regardless
  // if a deprovisioning error occurs.
  bool force_close_allowed = 5;
}

message ApproveAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;

  // If provided, will only approve the grants with the specified IDs
  repeated string approve_grants = 2;
}

message ApproveAccessRequestResponse {
  repeated Diagnostic diagnostics = 1;
}

message CloseAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;

  // If provided, will only close the grants with the specified IDs
  repeated string close_grants = 2;

  // Forcibly close the Access Request. When a request is force closed,
  // the request is closed regardless if a deprovisioning error occurs.
  bool force_close = 3;
}

message CloseAccessRequestResponse {
  repeated Diagnostic diagnostics = 1;
}

message ActivateAccessRequestRequest {
  // The ID of the Access Request.
  string id = 1;

  // If provided, will only activate the grants with the specified IDs
  repeated string activate_grants = 2;

  // If true, will attempt to activate if Access::Action::"BreakglassActivate" action is permitted for the user.
  // When configured, using this action will trigger notifications.
  bool breakglass = 3;

  string breakglass_reason = 4;

  option (buf.validate.message).cel = {
      id: "breakglass_requires_reason",
      message: "Breakglass access requires a reason",
      expression: "!(this.breakglass) || (this.breakglass && this.breakglass_reason != '')",
    };
}

message ActivateAccessRequestResponse {
  repeated Diagnostic diagnostics = 1;
}

message Justification {
  optional string reason = 1;
}
