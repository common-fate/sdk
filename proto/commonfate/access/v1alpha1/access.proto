syntax = "proto3";

package commonfate.access.v1alpha1;

import "commonfate/control/attest/v1alpha1/attestation.proto";
import "commonfate/access/v1alpha1/access_request.proto";
import "commonfate/authz/v1alpha1/entity.proto";
import "commonfate/access/v1alpha1/named_uid.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// AccessService is the Access Handler's user-facing API.
// Users call this API to ensure that they have access to entitlements.
service AccessService {
  // Grant is a high-level declarative API which can be called to ensure access has been provisioned to an entitlement.
  //
  // The method checks whether the entitlement has been provisioned to the user.
  // If the entitlement has not been provisioned, an Access Request will be created for the entitlement.
  // If a pending Access Request exists for the entitlement, this request is returned.
  //
  // In future, this method may trigger an extension to any Access Requests which are due to expire.
  // 
  //
  // This method is used by the Common Fate CLI in commands like 'cf exec gcp -- <command>' to ensure access
  // is provisioned prior to running a command.
  rpc Grant(GrantRequest) returns (GrantResponse) {}

  // Query for JIT entitlements available to the user.
  rpc QueryEntitlements(QueryEntitlementsRequest) returns (QueryEntitlementsResponse) {}
}

enum JITStatus {
  JIT_STATUS_UNSPECIFIED = 0;

  // The entitlement is currently granted to the principal.
  JIT_STATUS_ACTIVE = 1;

  // The entitlement is not granted to the principal.
  JIT_STATUS_INACTIVE = 2;
}

message QueryEntitlementsRequest {
  // If provided, filters entitlements for a particular principal
  commonfate.authz.v1alpha1.UID principal = 1;

  // If provided, filters entitlements for a particular JIT status
  JITStatus jit_status = 2;

   // The token for the next page.
   string page_token = 10;
}

message QueryEntitlementsResponse {
  repeated Entitlement entitlements = 1;
  string next_page_token = 2;
}


message Entitlement {
  // ID is just used internally and isn't really shown to users except for debugging purposes.
  // users refer to entitlements by the target and role, rather than the internal ID.
  string id = 1;

  // The particular resource which this entitlement gives access to
  NamedUID target = 2;

  // The particular role this entitlement gives access to
  NamedUID role = 3;

  // For providers which support it (like AWS IAM Identity Center), an ID of a resource representing
  // the entitlement assignment to the user. For example, in IAM Identity Center this is an AccountAssignment resource.
  commonfate.authz.v1alpha1.UID assignment = 7;

  // Details about JIT access. Only present on JIT Entitlements.
  // If nil, the entitlement is a persistent entitlement.
  // Currently all Entitlements are JIT Entitlements.
  // In future we may show users persistent entitlements which were assigned outside
  // of Common Fate JIT.
  JITEntitlementDetails jit = 8;
}

message JITEntitlementDetails {
  // the JIT workflow associated with the entitlement.
  string workflow_id = 1;

  // Whether the entitlement is currently assigned to the principal.
  // For JIT Entitlements, an entitlement may be inactive.
  // This means that it is available for request, but is not actually assigned
  // to the user at the particular moment.
  JITStatus status = 2;

  // The permitted access duration.
  google.protobuf.Duration duration = 3;

  // Whether access will be automatically approved.
  bool auto_approved = 4;

  // Whether extending access is permitted.
  bool extension_allowed = 5;

  // For active JIT entitlements, the duration from now that the access is due to expire.
  google.protobuf.Duration expires_in = 6;
}

message GrantRequest {
  // to be added in future when 'on-behalf-of' requests are implemented.
  reserved 1;
  reserved "principal";

  // The resource to grant the principal access to.
  commonfate.authz.v1alpha1.UID target = 3;

  // The role to grant the principal access to the resource with.
  commonfate.authz.v1alpha1.UID role = 2;

  // Optional justification as to why access is required.
  Justification justification = 4;
}

enum Decision {
  DECISION_UNSPECIFIED = 0;

  // Access to the resource is allowed.
  DECISION_ALLOWED = 2;

  // Access to the resource requires a manual review.
  DECISION_REVIEW_REQUIRED = 3;

  // Access to the resource is denied.
  DECISION_DENIED = 4;
}

message GrantResponse {
  // An ID which can be used to debug the evaluation of the access policies
  // associated with the request.
  string decision_id = 1;

  // The decision made by the Common Fate authorization engine.
  Decision decision = 2;

  // Indicates if the Access Request returned already existed.
  // Will be false if a new Access Request was created.
  bool request_already_exists = 3;

  // An Access Request. Will be nil if access is already active because the user was assigned
  // persistent access to the entitlement.
  optional AccessRequest access_request = 4;

  // If the access is active, the timestamp that the access expires at.
  // If access is persistent, the expires_at field will be nil.
  optional google.protobuf.Timestamp expires_at = 5;
}

message Justification {
  optional string reason = 1;
  optional commonfate.control.attest.v1alpha1.Attestation device_attestation = 2;
}
