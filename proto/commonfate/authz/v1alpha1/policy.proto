syntax = "proto3";

package commonfate.authz.v1alpha1;

import "commonfate/authz/v1alpha1/action.proto";
import "commonfate/authz/v1alpha1/read_only.proto";

service PolicyService {
  // Could also use this to remove some of the boilerplate
  option (commonfate.authz.v1alpha1.service_action_type) = "CF::Authz::PolicyService::Action";
  rpc CreatePolicySet(CreatePolicySetRequest) returns (CreatePolicySetResponse) {
    option (commonfate.authz.v1alpha1.action_options) = {
      action: {
        type: "CF::Authz::PolicyService::Action",
        id: "CreatePolicySet"
      },
      action_groups: {
        type: "CF::Admin::Action",
        id: "Write"
      },
      action_groups: {
        type: "CF::Authz::PolicyService::Action",
        id: "Write"
      }
    };
  }

  rpc UpdatePolicySet(UpdatePolicySetRequest) returns (UpdatePolicySetResponse) {
    option (commonfate.authz.v1alpha1.action_options) = {
      action: {
        type: "CF::Authz::PolicyService::Action",
        id: "UpdatePolicySet"
      },
      action_groups: {
        type: "CF::Admin::Action",
        id: "Write"
      },
      action_groups: {
        type: "CF::Authz::PolicyService::Action",
        id: "Write"
      }
    };
  }

  rpc ListPolicySets(ListPolicySetsRequest) returns (ListPolicySetsResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
    option (commonfate.authz.v1alpha1.action_options) = {
      action: {
        type: "CF::Authz::PolicyService::Action",
        id: "ListPolicySets"
      },
      action_groups: {
        type: "CF::Admin::Action",
        id: "Read"
      },
      action_groups: {
        type: "CF::Authz::PolicyService::Action",
        id: "Read"
      }
    };
  }

  rpc GetPolicySet(GetPolicySetRequest) returns (GetPolicySetResponse) {
    option (commonfate.authz.v1alpha1.read_only) = true;
    option (commonfate.authz.v1alpha1.action_options) = {
      action: {
        type: "CF::Authz::PolicyService::Action",
        id: "GetPolicySet"
      },
      action_groups: {
        type: "CF::Admin::Action",
        id: "Read"
      },
      action_groups: {
        type: "CF::Authz::PolicyService::Action",
        id: "Read"
      }
    };
  }

  rpc DeletePolicySet(DeletePolicySetRequest) returns (DeletePolicySetResponse) {
    option (commonfate.authz.v1alpha1.action_options) = {
      action: {
        type: "CF::Authz::PolicyService::Action",
        id: "DeletePolicySet"
      },
      action_groups: {
        type: "CF::Admin::Action",
        id: "Write"
      },
      action_groups: {
        type: "CF::Authz::PolicyService::Action",
        id: "Write"
      }
    };
  }
}

message Policy {
  // ID of the policy.
  string id = 1;

  // Cedar code for the policy set.
  string text = 2;
}

message PolicySet {
  // ID of the policy set.
  string id = 1;

  // The policies contained in the policy set.
  repeated Policy policies = 2;

  // The source code for the policy set.
  string text = 3;
}

message PolicySetInput {
  // ID of the policy.
  string id = 1;
  // Cedar code for the policy set.
  string text = 2;
}

message ListPolicySetsRequest {
  // The token for the next page.
  string page_token = 4;
}

message ListPolicySetsResponse {
  repeated PolicySet policy_sets = 1;
  string next_page_token = 2;
}

message CreatePolicySetRequest {
  PolicySetInput policy_set = 1;
}

message CreatePolicySetResponse {
  PolicySet policy_set = 1;
}

message UpdatePolicySetRequest {
  PolicySetInput policy_set = 1;
}

message UpdatePolicySetResponse {
  PolicySet policy_set = 1;
}

message DeletePolicySetRequest {
  string id = 1;
}

message DeletePolicySetResponse {
  string id = 1;
}

message GetPolicySetRequest {
  // The token for the next page.
  string id = 1;
}

message GetPolicySetResponse {
  PolicySet policy_set = 1;
}
