syntax = "proto3";

package commonfate.authz.v1alpha1;

import "commonfate/entity/v1alpha1/entity.proto";
import "commonfate/authz/v1alpha1/read_only.proto";
import "commonfate/entity/v1alpha1/eid.proto";

service PolicyService {
    rpc CreatePolicySet(CreatePolicySetRequest) returns (CreatePolicySetResponse) {}

    rpc UpdatePolicySet(UpdatePolicySetRequest) returns (UpdatePolicySetResponse) {}

    rpc ListPolicySets(ListPolicySetsRequest) returns (ListPolicySetsResponse) {
        option(commonfate.authz.v1alpha1.read_only) = true;
    }

    rpc GetPolicySet(GetPolicySetRequest) returns (GetPolicySetResponse) {
        option(commonfate.authz.v1alpha1.read_only) = true;
    }

    rpc DeletePolicySet(DeletePolicySetRequest) returns (DeletePolicySetResponse) {}
}

// type StructuredEmbeddedExpression struct {
// 	Resource   types.String `tfsdk:"resource"`
// 	Expression types.String `tfsdk:"expression"`
// 	Value      types.String `tfsdk:"value"`
// }

// type CedarConditionEntity struct {
// 	Text               types.String                  `tfsdk:"text"`
// 	EmbeddedExpression *StructuredEmbeddedExpression `tfsdk:"structured_embedded_expression"`
// }

// type CedarScopeEntity struct {
// 	Expression string  `tfsdk:"expression"`
// 	Resource   eid.EID `tfsdk:"resource"`
// }

// type Policy struct {
// 	Effect    types.String          `tfsdk:"effect"`
// 	Principal *CedarScopeEntity     `tfsdk:"principal"`
// 	Action    *CedarScopeEntity     `tfsdk:"action"`
// 	Resource  *CedarScopeEntity     `tfsdk:"resource"`
// 	When      *CedarConditionEntity `tfsdk:"when"`
// 	Unless    *CedarConditionEntity `tfsdk:"unless"`
// }


message CedarScopeEntity {
    string expression = 1;
    commonfate.entity.v1alpha1.EID resource = 2;
}

message StructuredEmbeddedExpression {
    string resource = 1;
    string expression =2; 
    string value = 3;
}

message CedarConditionEntity {
    string text = 1;
    StructuredEmbeddedExpression embedded_expression = 2;
}   

message StructuredPolicy {
    string effect = 1;
    CedarScopeEntity principal = 2;
    CedarScopeEntity action = 3;
    CedarScopeEntity resource = 4;
    CedarConditionEntity when = 5;
    CedarConditionEntity unless = 6;

}


message Policy {
    // ID of the policy.
    string id = 1;

    // Cedar code for the policy set.
    string text = 2;

    StructuredPolicy policy = 3;
}

message PolicySet {
    // ID of the policy set.
    string id = 1;
    
    // The policies contained in the policy set.
    repeated Policy policies = 2;

    // The source code for the policy set.
    string text = 3;
}

message PolicySetInput {
    // ID of the policy.
    string id = 1;
    // Cedar code for the policy set.
    string text = 2;
    StructuredPolicy policy = 3;
}


message ListPolicySetsRequest {
    // The token for the next page.
    string page_token = 4;
}

message ListPolicySetsResponse {
    repeated PolicySet policy_sets = 1;
    string next_page_token = 2;
}

message CreatePolicySetRequest {
    PolicySetInput policy_set = 1;
}

message CreatePolicySetResponse {
    PolicySet policy_set = 1;
}

message UpdatePolicySetRequest {
    PolicySetInput policy_set = 1;
}

message UpdatePolicySetResponse {
    PolicySet policy_set = 1;
}

message DeletePolicySetRequest {
     string id = 1;
}

message DeletePolicySetResponse {
    string id = 1;
}

message GetPolicySetRequest {
    // The token for the next page.
    string id = 1;
}

message GetPolicySetResponse {
    PolicySet policy_set = 1;
}