// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: granted/ingest/aws/v1alpha1/ingest.proto

package awsv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchWriteEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *BatchWriteEventsRequest) Reset() {
	*x = BatchWriteEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchWriteEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchWriteEventsRequest) ProtoMessage() {}

func (x *BatchWriteEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchWriteEventsRequest.ProtoReflect.Descriptor instead.
func (*BatchWriteEventsRequest) Descriptor() ([]byte, []int) {
	return file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescGZIP(), []int{0}
}

func (x *BatchWriteEventsRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type BatchWriteEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchWriteEventsResponse) Reset() {
	*x = BatchWriteEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchWriteEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchWriteEventsResponse) ProtoMessage() {}

func (x *BatchWriteEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchWriteEventsResponse.ProtoReflect.Descriptor instead.
func (*BatchWriteEventsResponse) Descriptor() ([]byte, []int) {
	return file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescGZIP(), []int{1}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Details:
	//
	//	*Event_AssumeRole
	//	*Event_ApiCallAttempt
	//	*Event_ApiCall
	Details isEvent_Details `protobuf_oneof:"details"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *Event) GetDetails() isEvent_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *Event) GetAssumeRole() *AssumeRoleEvent {
	if x, ok := x.GetDetails().(*Event_AssumeRole); ok {
		return x.AssumeRole
	}
	return nil
}

func (x *Event) GetApiCallAttempt() *APICallAttemptEvent {
	if x, ok := x.GetDetails().(*Event_ApiCallAttempt); ok {
		return x.ApiCallAttempt
	}
	return nil
}

func (x *Event) GetApiCall() *APICallEvent {
	if x, ok := x.GetDetails().(*Event_ApiCall); ok {
		return x.ApiCall
	}
	return nil
}

type isEvent_Details interface {
	isEvent_Details()
}

type Event_AssumeRole struct {
	AssumeRole *AssumeRoleEvent `protobuf:"bytes,2,opt,name=assume_role,json=assumeRole,proto3,oneof"`
}

type Event_ApiCallAttempt struct {
	ApiCallAttempt *APICallAttemptEvent `protobuf:"bytes,3,opt,name=api_call_attempt,json=apiCallAttempt,proto3,oneof"`
}

type Event_ApiCall struct {
	ApiCall *APICallEvent `protobuf:"bytes,4,opt,name=api_call,json=apiCall,proto3,oneof"`
}

func (*Event_AssumeRole) isEvent_Details() {}

func (*Event_ApiCallAttempt) isEvent_Details() {}

func (*Event_ApiCall) isEvent_Details() {}

type AssumeRoleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	RoleName    string `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	AccessKeyId string `protobuf:"bytes,3,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
}

func (x *AssumeRoleEvent) Reset() {
	*x = AssumeRoleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleEvent) ProtoMessage() {}

func (x *AssumeRoleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleEvent.ProtoReflect.Descriptor instead.
func (*AssumeRoleEvent) Descriptor() ([]byte, []int) {
	return file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescGZIP(), []int{3}
}

func (x *AssumeRoleEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AssumeRoleEvent) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *AssumeRoleEvent) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

type APICallAttemptEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId       string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Service        string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Api            string `protobuf:"bytes,3,opt,name=api,proto3" json:"api,omitempty"`
	AttemptLatency uint32 `protobuf:"varint,4,opt,name=attempt_latency,json=attemptLatency,proto3" json:"attempt_latency,omitempty"`
	Fqdn           string `protobuf:"bytes,5,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	UserAgent      string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	AccessKey      string `protobuf:"bytes,7,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	Region         string `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`
	HttpStatusCode uint32 `protobuf:"varint,9,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	XAmzRequestId  string `protobuf:"bytes,10,opt,name=x_amz_request_id,json=xAmzRequestId,proto3" json:"x_amz_request_id,omitempty"`
	XAmzId_2       string `protobuf:"bytes,11,opt,name=x_amz_id_2,json=xAmzId2,proto3" json:"x_amz_id_2,omitempty"`
}

func (x *APICallAttemptEvent) Reset() {
	*x = APICallAttemptEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APICallAttemptEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICallAttemptEvent) ProtoMessage() {}

func (x *APICallAttemptEvent) ProtoReflect() protoreflect.Message {
	mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICallAttemptEvent.ProtoReflect.Descriptor instead.
func (*APICallAttemptEvent) Descriptor() ([]byte, []int) {
	return file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescGZIP(), []int{4}
}

func (x *APICallAttemptEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *APICallAttemptEvent) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *APICallAttemptEvent) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *APICallAttemptEvent) GetAttemptLatency() uint32 {
	if x != nil {
		return x.AttemptLatency
	}
	return 0
}

func (x *APICallAttemptEvent) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *APICallAttemptEvent) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *APICallAttemptEvent) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *APICallAttemptEvent) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *APICallAttemptEvent) GetHttpStatusCode() uint32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *APICallAttemptEvent) GetXAmzRequestId() string {
	if x != nil {
		return x.XAmzRequestId
	}
	return ""
}

func (x *APICallAttemptEvent) GetXAmzId_2() string {
	if x != nil {
		return x.XAmzId_2
	}
	return ""
}

type APICallEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId            string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Service             string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Api                 string `protobuf:"bytes,3,opt,name=api,proto3" json:"api,omitempty"`
	AttemptCount        uint32 `protobuf:"varint,4,opt,name=attempt_count,json=attemptCount,proto3" json:"attempt_count,omitempty"`
	Region              string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	UserAgent           string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	FinalHttpStatusCode uint32 `protobuf:"varint,7,opt,name=final_http_status_code,json=finalHttpStatusCode,proto3" json:"final_http_status_code,omitempty"`
	AttemptLatency      uint32 `protobuf:"varint,8,opt,name=attempt_latency,json=attemptLatency,proto3" json:"attempt_latency,omitempty"`
	MaxRetriesExceeded  uint32 `protobuf:"varint,9,opt,name=max_retries_exceeded,json=maxRetriesExceeded,proto3" json:"max_retries_exceeded,omitempty"`
}

func (x *APICallEvent) Reset() {
	*x = APICallEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APICallEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APICallEvent) ProtoMessage() {}

func (x *APICallEvent) ProtoReflect() protoreflect.Message {
	mi := &file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APICallEvent.ProtoReflect.Descriptor instead.
func (*APICallEvent) Descriptor() ([]byte, []int) {
	return file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescGZIP(), []int{5}
}

func (x *APICallEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *APICallEvent) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *APICallEvent) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *APICallEvent) GetAttemptCount() uint32 {
	if x != nil {
		return x.AttemptCount
	}
	return 0
}

func (x *APICallEvent) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *APICallEvent) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *APICallEvent) GetFinalHttpStatusCode() uint32 {
	if x != nil {
		return x.FinalHttpStatusCode
	}
	return 0
}

func (x *APICallEvent) GetAttemptLatency() uint32 {
	if x != nil {
		return x.AttemptLatency
	}
	return 0
}

func (x *APICallEvent) GetMaxRetriesExceeded() uint32 {
	if x != nil {
		return x.MaxRetriesExceeded
	}
	return 0
}

var File_granted_ingest_aws_v1alpha1_ingest_proto protoreflect.FileDescriptor

var file_granted_ingest_aws_v1alpha1_ingest_proto_rawDesc = []byte{
	0x0a, 0x28, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x2f, 0x61, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x1a, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x4f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x2e, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x5c, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x61, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x46,
	0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x71, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x22, 0xe1, 0x02, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71,
	0x64, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x78, 0x5f, 0x61, 0x6d, 0x7a, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x78, 0x41,
	0x6d, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x0a, 0x78,
	0x5f, 0x61, 0x6d, 0x7a, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x78, 0x41, 0x6d, 0x7a, 0x49, 0x64, 0x32, 0x22, 0xc3, 0x02, 0x0a, 0x0c, 0x41, 0x50, 0x49,
	0x43, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x32, 0x93,
	0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x81, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x85, 0x02, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0b, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x2f,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2,
	0x02, 0x03, 0x47, 0x49, 0x41, 0xaa, 0x02, 0x1b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x2e,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x77, 0x73, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0xca, 0x02, 0x1b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5c, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xe2, 0x02, 0x27, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5c, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x3a, 0x3a, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x41,
	0x77, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescOnce sync.Once
	file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescData = file_granted_ingest_aws_v1alpha1_ingest_proto_rawDesc
)

func file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescGZIP() []byte {
	file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescOnce.Do(func() {
		file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescData = protoimpl.X.CompressGZIP(file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescData)
	})
	return file_granted_ingest_aws_v1alpha1_ingest_proto_rawDescData
}

var file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_granted_ingest_aws_v1alpha1_ingest_proto_goTypes = []any{
	(*BatchWriteEventsRequest)(nil),  // 0: granted.ingest.aws.v1alpha1.BatchWriteEventsRequest
	(*BatchWriteEventsResponse)(nil), // 1: granted.ingest.aws.v1alpha1.BatchWriteEventsResponse
	(*Event)(nil),                    // 2: granted.ingest.aws.v1alpha1.Event
	(*AssumeRoleEvent)(nil),          // 3: granted.ingest.aws.v1alpha1.AssumeRoleEvent
	(*APICallAttemptEvent)(nil),      // 4: granted.ingest.aws.v1alpha1.APICallAttemptEvent
	(*APICallEvent)(nil),             // 5: granted.ingest.aws.v1alpha1.APICallEvent
	(*timestamppb.Timestamp)(nil),    // 6: google.protobuf.Timestamp
}
var file_granted_ingest_aws_v1alpha1_ingest_proto_depIdxs = []int32{
	2, // 0: granted.ingest.aws.v1alpha1.BatchWriteEventsRequest.events:type_name -> granted.ingest.aws.v1alpha1.Event
	6, // 1: granted.ingest.aws.v1alpha1.Event.timestamp:type_name -> google.protobuf.Timestamp
	3, // 2: granted.ingest.aws.v1alpha1.Event.assume_role:type_name -> granted.ingest.aws.v1alpha1.AssumeRoleEvent
	4, // 3: granted.ingest.aws.v1alpha1.Event.api_call_attempt:type_name -> granted.ingest.aws.v1alpha1.APICallAttemptEvent
	5, // 4: granted.ingest.aws.v1alpha1.Event.api_call:type_name -> granted.ingest.aws.v1alpha1.APICallEvent
	0, // 5: granted.ingest.aws.v1alpha1.IngestService.BatchWriteEvents:input_type -> granted.ingest.aws.v1alpha1.BatchWriteEventsRequest
	1, // 6: granted.ingest.aws.v1alpha1.IngestService.BatchWriteEvents:output_type -> granted.ingest.aws.v1alpha1.BatchWriteEventsResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_granted_ingest_aws_v1alpha1_ingest_proto_init() }
func file_granted_ingest_aws_v1alpha1_ingest_proto_init() {
	if File_granted_ingest_aws_v1alpha1_ingest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BatchWriteEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BatchWriteEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AssumeRoleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*APICallAttemptEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*APICallEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes[2].OneofWrappers = []any{
		(*Event_AssumeRole)(nil),
		(*Event_ApiCallAttempt)(nil),
		(*Event_ApiCall)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_granted_ingest_aws_v1alpha1_ingest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_granted_ingest_aws_v1alpha1_ingest_proto_goTypes,
		DependencyIndexes: file_granted_ingest_aws_v1alpha1_ingest_proto_depIdxs,
		MessageInfos:      file_granted_ingest_aws_v1alpha1_ingest_proto_msgTypes,
	}.Build()
	File_granted_ingest_aws_v1alpha1_ingest_proto = out.File
	file_granted_ingest_aws_v1alpha1_ingest_proto_rawDesc = nil
	file_granted_ingest_aws_v1alpha1_ingest_proto_goTypes = nil
	file_granted_ingest_aws_v1alpha1_ingest_proto_depIdxs = nil
}
