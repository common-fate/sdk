// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: granted/ingest/v1alpha1/ingest.proto

package ingestv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BatchWriteEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchWriteEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchWriteEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchWriteEventsRequestMultiError, or nil if none found.
func (m *BatchWriteEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchWriteEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchWriteEventsRequestValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchWriteEventsRequestValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchWriteEventsRequestValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchWriteEventsRequestMultiError(errors)
	}

	return nil
}

// BatchWriteEventsRequestMultiError is an error wrapping multiple validation
// errors returned by BatchWriteEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchWriteEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchWriteEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchWriteEventsRequestMultiError) AllErrors() []error { return m }

// BatchWriteEventsRequestValidationError is the validation error returned by
// BatchWriteEventsRequest.Validate if the designated constraints aren't met.
type BatchWriteEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchWriteEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchWriteEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchWriteEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchWriteEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchWriteEventsRequestValidationError) ErrorName() string {
	return "BatchWriteEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchWriteEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchWriteEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchWriteEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchWriteEventsRequestValidationError{}

// Validate checks the field values on BatchWriteEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchWriteEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchWriteEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchWriteEventsResponseMultiError, or nil if none found.
func (m *BatchWriteEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchWriteEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchWriteEventsResponseMultiError(errors)
	}

	return nil
}

// BatchWriteEventsResponseMultiError is an error wrapping multiple validation
// errors returned by BatchWriteEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchWriteEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchWriteEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchWriteEventsResponseMultiError) AllErrors() []error { return m }

// BatchWriteEventsResponseValidationError is the validation error returned by
// BatchWriteEventsResponse.Validate if the designated constraints aren't met.
type BatchWriteEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchWriteEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchWriteEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchWriteEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchWriteEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchWriteEventsResponseValidationError) ErrorName() string {
	return "BatchWriteEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchWriteEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchWriteEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchWriteEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchWriteEventsResponseValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Details.(type) {
	case *Event_AwsAssumeRole:
		if v == nil {
			err := EventValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsAssumeRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AwsAssumeRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AwsAssumeRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsAssumeRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "AwsAssumeRole",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_AwsApiCallAttempt:
		if v == nil {
			err := EventValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsApiCallAttempt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AwsApiCallAttempt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AwsApiCallAttempt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsApiCallAttempt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "AwsApiCallAttempt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_AwsApiCall:
		if v == nil {
			err := EventValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsApiCall()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AwsApiCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AwsApiCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsApiCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "AwsApiCall",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on AWSAssumeRoleEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AWSAssumeRoleEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSAssumeRoleEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AWSAssumeRoleEventMultiError, or nil if none found.
func (m *AWSAssumeRoleEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSAssumeRoleEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for RoleName

	// no validation rules for AccessKeyId

	if len(errors) > 0 {
		return AWSAssumeRoleEventMultiError(errors)
	}

	return nil
}

// AWSAssumeRoleEventMultiError is an error wrapping multiple validation errors
// returned by AWSAssumeRoleEvent.ValidateAll() if the designated constraints
// aren't met.
type AWSAssumeRoleEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSAssumeRoleEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSAssumeRoleEventMultiError) AllErrors() []error { return m }

// AWSAssumeRoleEventValidationError is the validation error returned by
// AWSAssumeRoleEvent.Validate if the designated constraints aren't met.
type AWSAssumeRoleEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSAssumeRoleEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSAssumeRoleEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSAssumeRoleEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSAssumeRoleEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSAssumeRoleEventValidationError) ErrorName() string {
	return "AWSAssumeRoleEventValidationError"
}

// Error satisfies the builtin error interface
func (e AWSAssumeRoleEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSAssumeRoleEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSAssumeRoleEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSAssumeRoleEventValidationError{}

// Validate checks the field values on AWSAPICallAttemptEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AWSAPICallAttemptEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSAPICallAttemptEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AWSAPICallAttemptEventMultiError, or nil if none found.
func (m *AWSAPICallAttemptEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSAPICallAttemptEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for Service

	// no validation rules for Api

	// no validation rules for AttemptLatency

	// no validation rules for Fqdn

	// no validation rules for UserAgent

	// no validation rules for AccessKey

	// no validation rules for Region

	// no validation rules for HttpStatusCode

	// no validation rules for XAmzRequestId

	// no validation rules for XAmzId_2

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AWSAPICallAttemptEventValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AWSAPICallAttemptEventValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AWSAPICallAttemptEventValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUriParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AWSAPICallAttemptEventValidationError{
						field:  fmt.Sprintf("UriParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AWSAPICallAttemptEventValidationError{
						field:  fmt.Sprintf("UriParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AWSAPICallAttemptEventValidationError{
					field:  fmt.Sprintf("UriParameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AWSAPICallAttemptEventMultiError(errors)
	}

	return nil
}

// AWSAPICallAttemptEventMultiError is an error wrapping multiple validation
// errors returned by AWSAPICallAttemptEvent.ValidateAll() if the designated
// constraints aren't met.
type AWSAPICallAttemptEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSAPICallAttemptEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSAPICallAttemptEventMultiError) AllErrors() []error { return m }

// AWSAPICallAttemptEventValidationError is the validation error returned by
// AWSAPICallAttemptEvent.Validate if the designated constraints aren't met.
type AWSAPICallAttemptEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSAPICallAttemptEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSAPICallAttemptEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSAPICallAttemptEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSAPICallAttemptEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSAPICallAttemptEventValidationError) ErrorName() string {
	return "AWSAPICallAttemptEventValidationError"
}

// Error satisfies the builtin error interface
func (e AWSAPICallAttemptEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSAPICallAttemptEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSAPICallAttemptEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSAPICallAttemptEventValidationError{}

// Validate checks the field values on AWSAPICallEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AWSAPICallEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSAPICallEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AWSAPICallEventMultiError, or nil if none found.
func (m *AWSAPICallEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSAPICallEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for Service

	// no validation rules for Api

	// no validation rules for AttemptCount

	// no validation rules for Region

	// no validation rules for UserAgent

	// no validation rules for FinalHttpStatusCode

	// no validation rules for AttemptLatency

	// no validation rules for MaxRetriesExceeded

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AWSAPICallEventValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AWSAPICallEventValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AWSAPICallEventValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUriParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AWSAPICallEventValidationError{
						field:  fmt.Sprintf("UriParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AWSAPICallEventValidationError{
						field:  fmt.Sprintf("UriParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AWSAPICallEventValidationError{
					field:  fmt.Sprintf("UriParameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AWSAPICallEventMultiError(errors)
	}

	return nil
}

// AWSAPICallEventMultiError is an error wrapping multiple validation errors
// returned by AWSAPICallEvent.ValidateAll() if the designated constraints
// aren't met.
type AWSAPICallEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSAPICallEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSAPICallEventMultiError) AllErrors() []error { return m }

// AWSAPICallEventValidationError is the validation error returned by
// AWSAPICallEvent.Validate if the designated constraints aren't met.
type AWSAPICallEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSAPICallEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSAPICallEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSAPICallEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSAPICallEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSAPICallEventValidationError) ErrorName() string { return "AWSAPICallEventValidationError" }

// Error satisfies the builtin error interface
func (e AWSAPICallEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSAPICallEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSAPICallEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSAPICallEventValidationError{}

// Validate checks the field values on Parameter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Parameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Parameter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParameterMultiError, or nil
// if none found.
func (m *Parameter) ValidateAll() error {
	return m.validate(true)
}

func (m *Parameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return ParameterMultiError(errors)
	}

	return nil
}

// ParameterMultiError is an error wrapping multiple validation errors returned
// by Parameter.ValidateAll() if the designated constraints aren't met.
type ParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParameterMultiError) AllErrors() []error { return m }

// ParameterValidationError is the validation error returned by
// Parameter.Validate if the designated constraints aren't met.
type ParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterValidationError) ErrorName() string { return "ParameterValidationError" }

// Error satisfies the builtin error interface
func (e ParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterValidationError{}
