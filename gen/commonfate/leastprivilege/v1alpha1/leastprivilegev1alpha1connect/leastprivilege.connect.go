// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/leastprivilege/v1alpha1/leastprivilege.proto

package leastprivilegev1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/leastprivilege/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LeastPrivilegeServiceName is the fully-qualified name of the LeastPrivilegeService service.
	LeastPrivilegeServiceName = "commonfate.leastprivilege.v1alpha1.LeastPrivilegeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LeastPrivilegeServiceGetLatestReportProcedure is the fully-qualified name of the
	// LeastPrivilegeService's GetLatestReport RPC.
	LeastPrivilegeServiceGetLatestReportProcedure = "/commonfate.leastprivilege.v1alpha1.LeastPrivilegeService/GetLatestReport"
	// LeastPrivilegeServiceGetLatestEntitlementUsagesProcedure is the fully-qualified name of the
	// LeastPrivilegeService's GetLatestEntitlementUsages RPC.
	LeastPrivilegeServiceGetLatestEntitlementUsagesProcedure = "/commonfate.leastprivilege.v1alpha1.LeastPrivilegeService/GetLatestEntitlementUsages"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	leastPrivilegeServiceServiceDescriptor                          = v1alpha1.File_commonfate_leastprivilege_v1alpha1_leastprivilege_proto.Services().ByName("LeastPrivilegeService")
	leastPrivilegeServiceGetLatestReportMethodDescriptor            = leastPrivilegeServiceServiceDescriptor.Methods().ByName("GetLatestReport")
	leastPrivilegeServiceGetLatestEntitlementUsagesMethodDescriptor = leastPrivilegeServiceServiceDescriptor.Methods().ByName("GetLatestEntitlementUsages")
)

// LeastPrivilegeServiceClient is a client for the
// commonfate.leastprivilege.v1alpha1.LeastPrivilegeService service.
type LeastPrivilegeServiceClient interface {
	// retrieves the latest least privilege report.
	GetLatestReport(context.Context, *connect.Request[v1alpha1.GetLatestReportRequest]) (*connect.Response[v1alpha1.GetLatestReportResponse], error)
	GetLatestEntitlementUsages(context.Context, *connect.Request[v1alpha1.GetLatestEntitlementUsagesRequest]) (*connect.Response[v1alpha1.GetLatestEntitlementUsagesResponse], error)
}

// NewLeastPrivilegeServiceClient constructs a client for the
// commonfate.leastprivilege.v1alpha1.LeastPrivilegeService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLeastPrivilegeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LeastPrivilegeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &leastPrivilegeServiceClient{
		getLatestReport: connect.NewClient[v1alpha1.GetLatestReportRequest, v1alpha1.GetLatestReportResponse](
			httpClient,
			baseURL+LeastPrivilegeServiceGetLatestReportProcedure,
			connect.WithSchema(leastPrivilegeServiceGetLatestReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLatestEntitlementUsages: connect.NewClient[v1alpha1.GetLatestEntitlementUsagesRequest, v1alpha1.GetLatestEntitlementUsagesResponse](
			httpClient,
			baseURL+LeastPrivilegeServiceGetLatestEntitlementUsagesProcedure,
			connect.WithSchema(leastPrivilegeServiceGetLatestEntitlementUsagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// leastPrivilegeServiceClient implements LeastPrivilegeServiceClient.
type leastPrivilegeServiceClient struct {
	getLatestReport            *connect.Client[v1alpha1.GetLatestReportRequest, v1alpha1.GetLatestReportResponse]
	getLatestEntitlementUsages *connect.Client[v1alpha1.GetLatestEntitlementUsagesRequest, v1alpha1.GetLatestEntitlementUsagesResponse]
}

// GetLatestReport calls commonfate.leastprivilege.v1alpha1.LeastPrivilegeService.GetLatestReport.
func (c *leastPrivilegeServiceClient) GetLatestReport(ctx context.Context, req *connect.Request[v1alpha1.GetLatestReportRequest]) (*connect.Response[v1alpha1.GetLatestReportResponse], error) {
	return c.getLatestReport.CallUnary(ctx, req)
}

// GetLatestEntitlementUsages calls
// commonfate.leastprivilege.v1alpha1.LeastPrivilegeService.GetLatestEntitlementUsages.
func (c *leastPrivilegeServiceClient) GetLatestEntitlementUsages(ctx context.Context, req *connect.Request[v1alpha1.GetLatestEntitlementUsagesRequest]) (*connect.Response[v1alpha1.GetLatestEntitlementUsagesResponse], error) {
	return c.getLatestEntitlementUsages.CallUnary(ctx, req)
}

// LeastPrivilegeServiceHandler is an implementation of the
// commonfate.leastprivilege.v1alpha1.LeastPrivilegeService service.
type LeastPrivilegeServiceHandler interface {
	// retrieves the latest least privilege report.
	GetLatestReport(context.Context, *connect.Request[v1alpha1.GetLatestReportRequest]) (*connect.Response[v1alpha1.GetLatestReportResponse], error)
	GetLatestEntitlementUsages(context.Context, *connect.Request[v1alpha1.GetLatestEntitlementUsagesRequest]) (*connect.Response[v1alpha1.GetLatestEntitlementUsagesResponse], error)
}

// NewLeastPrivilegeServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLeastPrivilegeServiceHandler(svc LeastPrivilegeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	leastPrivilegeServiceGetLatestReportHandler := connect.NewUnaryHandler(
		LeastPrivilegeServiceGetLatestReportProcedure,
		svc.GetLatestReport,
		connect.WithSchema(leastPrivilegeServiceGetLatestReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	leastPrivilegeServiceGetLatestEntitlementUsagesHandler := connect.NewUnaryHandler(
		LeastPrivilegeServiceGetLatestEntitlementUsagesProcedure,
		svc.GetLatestEntitlementUsages,
		connect.WithSchema(leastPrivilegeServiceGetLatestEntitlementUsagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.leastprivilege.v1alpha1.LeastPrivilegeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LeastPrivilegeServiceGetLatestReportProcedure:
			leastPrivilegeServiceGetLatestReportHandler.ServeHTTP(w, r)
		case LeastPrivilegeServiceGetLatestEntitlementUsagesProcedure:
			leastPrivilegeServiceGetLatestEntitlementUsagesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLeastPrivilegeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLeastPrivilegeServiceHandler struct{}

func (UnimplementedLeastPrivilegeServiceHandler) GetLatestReport(context.Context, *connect.Request[v1alpha1.GetLatestReportRequest]) (*connect.Response[v1alpha1.GetLatestReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.leastprivilege.v1alpha1.LeastPrivilegeService.GetLatestReport is not implemented"))
}

func (UnimplementedLeastPrivilegeServiceHandler) GetLatestEntitlementUsages(context.Context, *connect.Request[v1alpha1.GetLatestEntitlementUsagesRequest]) (*connect.Response[v1alpha1.GetLatestEntitlementUsagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.leastprivilege.v1alpha1.LeastPrivilegeService.GetLatestEntitlementUsages is not implemented"))
}
