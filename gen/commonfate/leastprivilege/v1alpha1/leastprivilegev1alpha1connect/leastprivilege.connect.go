// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/leastprivilege/v1alpha1/leastprivilege.proto

package leastprivilegev1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/leastprivilege/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReportServiceName is the fully-qualified name of the ReportService service.
	ReportServiceName = "commonfate.leastprivilege.v1alpha1.ReportService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReportServiceGetLatestReportProcedure is the fully-qualified name of the ReportService's
	// GetLatestReport RPC.
	ReportServiceGetLatestReportProcedure = "/commonfate.leastprivilege.v1alpha1.ReportService/GetLatestReport"
	// ReportServiceGetHistoricalReportsProcedure is the fully-qualified name of the ReportService's
	// GetHistoricalReports RPC.
	ReportServiceGetHistoricalReportsProcedure = "/commonfate.leastprivilege.v1alpha1.ReportService/GetHistoricalReports"
	// ReportServiceDownloadEntitlementUsageReportProcedure is the fully-qualified name of the
	// ReportService's DownloadEntitlementUsageReport RPC.
	ReportServiceDownloadEntitlementUsageReportProcedure = "/commonfate.leastprivilege.v1alpha1.ReportService/DownloadEntitlementUsageReport"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	reportServiceServiceDescriptor                              = v1alpha1.File_commonfate_leastprivilege_v1alpha1_leastprivilege_proto.Services().ByName("ReportService")
	reportServiceGetLatestReportMethodDescriptor                = reportServiceServiceDescriptor.Methods().ByName("GetLatestReport")
	reportServiceGetHistoricalReportsMethodDescriptor           = reportServiceServiceDescriptor.Methods().ByName("GetHistoricalReports")
	reportServiceDownloadEntitlementUsageReportMethodDescriptor = reportServiceServiceDescriptor.Methods().ByName("DownloadEntitlementUsageReport")
)

// ReportServiceClient is a client for the commonfate.leastprivilege.v1alpha1.ReportService service.
type ReportServiceClient interface {
	// retrieves the latest least privilege report.
	GetLatestReport(context.Context, *connect.Request[v1alpha1.GetLatestReportRequest]) (*connect.Response[v1alpha1.GetLatestReportResponse], error)
	GetHistoricalReports(context.Context, *connect.Request[v1alpha1.GetHistoricalReportsRequest]) (*connect.Response[v1alpha1.GetHistoricalReportsResponse], error)
	DownloadEntitlementUsageReport(context.Context, *connect.Request[v1alpha1.DownloadEntitlementUsageReportRequest]) (*connect.Response[v1alpha1.DownloadEntitlementUsageReportResponse], error)
}

// NewReportServiceClient constructs a client for the
// commonfate.leastprivilege.v1alpha1.ReportService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReportServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReportServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &reportServiceClient{
		getLatestReport: connect.NewClient[v1alpha1.GetLatestReportRequest, v1alpha1.GetLatestReportResponse](
			httpClient,
			baseURL+ReportServiceGetLatestReportProcedure,
			connect.WithSchema(reportServiceGetLatestReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHistoricalReports: connect.NewClient[v1alpha1.GetHistoricalReportsRequest, v1alpha1.GetHistoricalReportsResponse](
			httpClient,
			baseURL+ReportServiceGetHistoricalReportsProcedure,
			connect.WithSchema(reportServiceGetHistoricalReportsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		downloadEntitlementUsageReport: connect.NewClient[v1alpha1.DownloadEntitlementUsageReportRequest, v1alpha1.DownloadEntitlementUsageReportResponse](
			httpClient,
			baseURL+ReportServiceDownloadEntitlementUsageReportProcedure,
			connect.WithSchema(reportServiceDownloadEntitlementUsageReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// reportServiceClient implements ReportServiceClient.
type reportServiceClient struct {
	getLatestReport                *connect.Client[v1alpha1.GetLatestReportRequest, v1alpha1.GetLatestReportResponse]
	getHistoricalReports           *connect.Client[v1alpha1.GetHistoricalReportsRequest, v1alpha1.GetHistoricalReportsResponse]
	downloadEntitlementUsageReport *connect.Client[v1alpha1.DownloadEntitlementUsageReportRequest, v1alpha1.DownloadEntitlementUsageReportResponse]
}

// GetLatestReport calls commonfate.leastprivilege.v1alpha1.ReportService.GetLatestReport.
func (c *reportServiceClient) GetLatestReport(ctx context.Context, req *connect.Request[v1alpha1.GetLatestReportRequest]) (*connect.Response[v1alpha1.GetLatestReportResponse], error) {
	return c.getLatestReport.CallUnary(ctx, req)
}

// GetHistoricalReports calls commonfate.leastprivilege.v1alpha1.ReportService.GetHistoricalReports.
func (c *reportServiceClient) GetHistoricalReports(ctx context.Context, req *connect.Request[v1alpha1.GetHistoricalReportsRequest]) (*connect.Response[v1alpha1.GetHistoricalReportsResponse], error) {
	return c.getHistoricalReports.CallUnary(ctx, req)
}

// DownloadEntitlementUsageReport calls
// commonfate.leastprivilege.v1alpha1.ReportService.DownloadEntitlementUsageReport.
func (c *reportServiceClient) DownloadEntitlementUsageReport(ctx context.Context, req *connect.Request[v1alpha1.DownloadEntitlementUsageReportRequest]) (*connect.Response[v1alpha1.DownloadEntitlementUsageReportResponse], error) {
	return c.downloadEntitlementUsageReport.CallUnary(ctx, req)
}

// ReportServiceHandler is an implementation of the commonfate.leastprivilege.v1alpha1.ReportService
// service.
type ReportServiceHandler interface {
	// retrieves the latest least privilege report.
	GetLatestReport(context.Context, *connect.Request[v1alpha1.GetLatestReportRequest]) (*connect.Response[v1alpha1.GetLatestReportResponse], error)
	GetHistoricalReports(context.Context, *connect.Request[v1alpha1.GetHistoricalReportsRequest]) (*connect.Response[v1alpha1.GetHistoricalReportsResponse], error)
	DownloadEntitlementUsageReport(context.Context, *connect.Request[v1alpha1.DownloadEntitlementUsageReportRequest]) (*connect.Response[v1alpha1.DownloadEntitlementUsageReportResponse], error)
}

// NewReportServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReportServiceHandler(svc ReportServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reportServiceGetLatestReportHandler := connect.NewUnaryHandler(
		ReportServiceGetLatestReportProcedure,
		svc.GetLatestReport,
		connect.WithSchema(reportServiceGetLatestReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reportServiceGetHistoricalReportsHandler := connect.NewUnaryHandler(
		ReportServiceGetHistoricalReportsProcedure,
		svc.GetHistoricalReports,
		connect.WithSchema(reportServiceGetHistoricalReportsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	reportServiceDownloadEntitlementUsageReportHandler := connect.NewUnaryHandler(
		ReportServiceDownloadEntitlementUsageReportProcedure,
		svc.DownloadEntitlementUsageReport,
		connect.WithSchema(reportServiceDownloadEntitlementUsageReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.leastprivilege.v1alpha1.ReportService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReportServiceGetLatestReportProcedure:
			reportServiceGetLatestReportHandler.ServeHTTP(w, r)
		case ReportServiceGetHistoricalReportsProcedure:
			reportServiceGetHistoricalReportsHandler.ServeHTTP(w, r)
		case ReportServiceDownloadEntitlementUsageReportProcedure:
			reportServiceDownloadEntitlementUsageReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReportServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReportServiceHandler struct{}

func (UnimplementedReportServiceHandler) GetLatestReport(context.Context, *connect.Request[v1alpha1.GetLatestReportRequest]) (*connect.Response[v1alpha1.GetLatestReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.leastprivilege.v1alpha1.ReportService.GetLatestReport is not implemented"))
}

func (UnimplementedReportServiceHandler) GetHistoricalReports(context.Context, *connect.Request[v1alpha1.GetHistoricalReportsRequest]) (*connect.Response[v1alpha1.GetHistoricalReportsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.leastprivilege.v1alpha1.ReportService.GetHistoricalReports is not implemented"))
}

func (UnimplementedReportServiceHandler) DownloadEntitlementUsageReport(context.Context, *connect.Request[v1alpha1.DownloadEntitlementUsageReportRequest]) (*connect.Response[v1alpha1.DownloadEntitlementUsageReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.leastprivilege.v1alpha1.ReportService.DownloadEntitlementUsageReport is not implemented"))
}
