// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/authz/v1alpha1/evaluation.proto

package authzv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DebugEvaluation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DebugEvaluation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugEvaluation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebugEvaluationMultiError, or nil if none found.
func (m *DebugEvaluation) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugEvaluation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetEvaluation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebugEvaluationValidationError{
					field:  "Evaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebugEvaluationValidationError{
					field:  "Evaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvaluation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebugEvaluationValidationError{
				field:  "Evaluation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDebugInformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebugEvaluationValidationError{
					field:  "DebugInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebugEvaluationValidationError{
					field:  "DebugInformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebugInformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebugEvaluationValidationError{
				field:  "DebugInformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DebugEvaluationMultiError(errors)
	}

	return nil
}

// DebugEvaluationMultiError is an error wrapping multiple validation errors
// returned by DebugEvaluation.ValidateAll() if the designated constraints
// aren't met.
type DebugEvaluationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugEvaluationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugEvaluationMultiError) AllErrors() []error { return m }

// DebugEvaluationValidationError is the validation error returned by
// DebugEvaluation.Validate if the designated constraints aren't met.
type DebugEvaluationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugEvaluationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugEvaluationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugEvaluationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugEvaluationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugEvaluationValidationError) ErrorName() string { return "DebugEvaluationValidationError" }

// Error satisfies the builtin error interface
func (e DebugEvaluationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugEvaluation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugEvaluationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugEvaluationValidationError{}

// Validate checks the field values on Evaluation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Evaluation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Evaluation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EvaluationMultiError, or
// nil if none found.
func (m *Evaluation) ValidateAll() error {
	return m.validate(true)
}

func (m *Evaluation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvaluationValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvaluationValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvaluationValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Decision

	if all {
		switch v := interface{}(m.GetDiagnostics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvaluationValidationError{
					field:  "Diagnostics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvaluationValidationError{
					field:  "Diagnostics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiagnostics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvaluationValidationError{
				field:  "Diagnostics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClientKey

	if all {
		switch v := interface{}(m.GetEvaluatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvaluationValidationError{
					field:  "EvaluatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvaluationValidationError{
					field:  "EvaluatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvaluatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvaluationValidationError{
				field:  "EvaluatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEvaluationDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvaluationValidationError{
					field:  "EvaluationDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvaluationValidationError{
					field:  "EvaluationDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvaluationDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvaluationValidationError{
				field:  "EvaluationDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Allowed

	if len(errors) > 0 {
		return EvaluationMultiError(errors)
	}

	return nil
}

// EvaluationMultiError is an error wrapping multiple validation errors
// returned by Evaluation.ValidateAll() if the designated constraints aren't met.
type EvaluationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvaluationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvaluationMultiError) AllErrors() []error { return m }

// EvaluationValidationError is the validation error returned by
// Evaluation.Validate if the designated constraints aren't met.
type EvaluationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvaluationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvaluationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvaluationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvaluationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvaluationValidationError) ErrorName() string { return "EvaluationValidationError" }

// Error satisfies the builtin error interface
func (e EvaluationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvaluation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvaluationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvaluationValidationError{}

// Validate checks the field values on Diagnostics with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Diagnostics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Diagnostics with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiagnosticsMultiError, or
// nil if none found.
func (m *Diagnostics) ValidateAll() error {
	return m.validate(true)
}

func (m *Diagnostics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiagnosticsValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiagnosticsValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiagnosticsValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiagnosticsMultiError(errors)
	}

	return nil
}

// DiagnosticsMultiError is an error wrapping multiple validation errors
// returned by Diagnostics.ValidateAll() if the designated constraints aren't met.
type DiagnosticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiagnosticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiagnosticsMultiError) AllErrors() []error { return m }

// DiagnosticsValidationError is the validation error returned by
// Diagnostics.Validate if the designated constraints aren't met.
type DiagnosticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiagnosticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiagnosticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiagnosticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiagnosticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiagnosticsValidationError) ErrorName() string { return "DiagnosticsValidationError" }

// Error satisfies the builtin error interface
func (e DiagnosticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiagnostics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiagnosticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiagnosticsValidationError{}

// Validate checks the field values on Annotation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Annotation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Annotation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnnotationMultiError, or
// nil if none found.
func (m *Annotation) ValidateAll() error {
	return m.validate(true)
}

func (m *Annotation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return AnnotationMultiError(errors)
	}

	return nil
}

// AnnotationMultiError is an error wrapping multiple validation errors
// returned by Annotation.ValidateAll() if the designated constraints aren't met.
type AnnotationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnotationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnotationMultiError) AllErrors() []error { return m }

// AnnotationValidationError is the validation error returned by
// Annotation.Validate if the designated constraints aren't met.
type AnnotationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnotationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnotationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnotationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnotationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnotationValidationError) ErrorName() string { return "AnnotationValidationError" }

// Error satisfies the builtin error interface
func (e AnnotationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnotation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnotationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnotationValidationError{}

// Validate checks the field values on DebugInformation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DebugInformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebugInformationMultiError, or nil if none found.
func (m *DebugInformation) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugInformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicySets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DebugInformationValidationError{
						field:  fmt.Sprintf("PolicySets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DebugInformationValidationError{
						field:  fmt.Sprintf("PolicySets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DebugInformationValidationError{
					field:  fmt.Sprintf("PolicySets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DebugInformationValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DebugInformationValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DebugInformationValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DebugInformationMultiError(errors)
	}

	return nil
}

// DebugInformationMultiError is an error wrapping multiple validation errors
// returned by DebugInformation.ValidateAll() if the designated constraints
// aren't met.
type DebugInformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugInformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugInformationMultiError) AllErrors() []error { return m }

// DebugInformationValidationError is the validation error returned by
// DebugInformation.Validate if the designated constraints aren't met.
type DebugInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugInformationValidationError) ErrorName() string { return "DebugInformationValidationError" }

// Error satisfies the builtin error interface
func (e DebugInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugInformationValidationError{}
