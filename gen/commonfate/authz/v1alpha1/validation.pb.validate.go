// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/authz/v1alpha1/validation.proto

package authzv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ValidatePolicySetTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidatePolicySetTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidatePolicySetTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidatePolicySetTextRequestMultiError, or nil if none found.
func (m *ValidatePolicySetTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidatePolicySetTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicySetText

	if len(errors) > 0 {
		return ValidatePolicySetTextRequestMultiError(errors)
	}

	return nil
}

// ValidatePolicySetTextRequestMultiError is an error wrapping multiple
// validation errors returned by ValidatePolicySetTextRequest.ValidateAll() if
// the designated constraints aren't met.
type ValidatePolicySetTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidatePolicySetTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidatePolicySetTextRequestMultiError) AllErrors() []error { return m }

// ValidatePolicySetTextRequestValidationError is the validation error returned
// by ValidatePolicySetTextRequest.Validate if the designated constraints
// aren't met.
type ValidatePolicySetTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidatePolicySetTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidatePolicySetTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidatePolicySetTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidatePolicySetTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidatePolicySetTextRequestValidationError) ErrorName() string {
	return "ValidatePolicySetTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidatePolicySetTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidatePolicySetTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidatePolicySetTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidatePolicySetTextRequestValidationError{}

// Validate checks the field values on ValidatePolicySetTextResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidatePolicySetTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidatePolicySetTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ValidatePolicySetTextResponseMultiError, or nil if none found.
func (m *ValidatePolicySetTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidatePolicySetTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidatePolicySetTextResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidatePolicySetTextResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidatePolicySetTextResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidatePolicySetTextResponseMultiError(errors)
	}

	return nil
}

// ValidatePolicySetTextResponseMultiError is an error wrapping multiple
// validation errors returned by ValidatePolicySetTextResponse.ValidateAll()
// if the designated constraints aren't met.
type ValidatePolicySetTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidatePolicySetTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidatePolicySetTextResponseMultiError) AllErrors() []error { return m }

// ValidatePolicySetTextResponseValidationError is the validation error
// returned by ValidatePolicySetTextResponse.Validate if the designated
// constraints aren't met.
type ValidatePolicySetTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidatePolicySetTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidatePolicySetTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidatePolicySetTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidatePolicySetTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidatePolicySetTextResponseValidationError) ErrorName() string {
	return "ValidatePolicySetTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidatePolicySetTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidatePolicySetTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidatePolicySetTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidatePolicySetTextResponseValidationError{}

// Validate checks the field values on ValidationResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidationResultMultiError, or nil if none found.
func (m *ValidationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationResultValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWarnings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Warnings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationResultValidationError{
						field:  fmt.Sprintf("Warnings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationResultValidationError{
					field:  fmt.Sprintf("Warnings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ValidationResultMultiError(errors)
	}

	return nil
}

// ValidationResultMultiError is an error wrapping multiple validation errors
// returned by ValidationResult.ValidateAll() if the designated constraints
// aren't met.
type ValidationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationResultMultiError) AllErrors() []error { return m }

// ValidationResultValidationError is the validation error returned by
// ValidationResult.Validate if the designated constraints aren't met.
type ValidationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationResultValidationError) ErrorName() string { return "ValidationResultValidationError" }

// Error satisfies the builtin error interface
func (e ValidationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationResultValidationError{}

// Validate checks the field values on ValidationError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidationError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidationError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidationErrorMultiError, or nil if none found.
func (m *ValidationError) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	// no validation rules for Message

	if len(errors) > 0 {
		return ValidationErrorMultiError(errors)
	}

	return nil
}

// ValidationErrorMultiError is an error wrapping multiple validation errors
// returned by ValidationError.ValidateAll() if the designated constraints
// aren't met.
type ValidationErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationErrorMultiError) AllErrors() []error { return m }

// ValidationErrorValidationError is the validation error returned by
// ValidationError.Validate if the designated constraints aren't met.
type ValidationErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationErrorValidationError) ErrorName() string { return "ValidationErrorValidationError" }

// Error satisfies the builtin error interface
func (e ValidationErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationErrorValidationError{}

// Validate checks the field values on ValidationWarning with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidationWarning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidationWarning with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidationWarningMultiError, or nil if none found.
func (m *ValidationWarning) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationWarning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	// no validation rules for Message

	if len(errors) > 0 {
		return ValidationWarningMultiError(errors)
	}

	return nil
}

// ValidationWarningMultiError is an error wrapping multiple validation errors
// returned by ValidationWarning.ValidateAll() if the designated constraints
// aren't met.
type ValidationWarningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationWarningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationWarningMultiError) AllErrors() []error { return m }

// ValidationWarningValidationError is the validation error returned by
// ValidationWarning.Validate if the designated constraints aren't met.
type ValidationWarningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationWarningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationWarningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationWarningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationWarningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationWarningValidationError) ErrorName() string {
	return "ValidationWarningValidationError"
}

// Error satisfies the builtin error interface
func (e ValidationWarningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationWarning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationWarningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationWarningValidationError{}

// Validate checks the field values on SourceRange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SourceRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SourceRange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SourceRangeMultiError, or
// nil if none found.
func (m *SourceRange) ValidateAll() error {
	return m.validate(true)
}

func (m *SourceRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return SourceRangeMultiError(errors)
	}

	return nil
}

// SourceRangeMultiError is an error wrapping multiple validation errors
// returned by SourceRange.ValidateAll() if the designated constraints aren't met.
type SourceRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SourceRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SourceRangeMultiError) AllErrors() []error { return m }

// SourceRangeValidationError is the validation error returned by
// SourceRange.Validate if the designated constraints aren't met.
type SourceRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceRangeValidationError) ErrorName() string { return "SourceRangeValidationError" }

// Error satisfies the builtin error interface
func (e SourceRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSourceRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceRangeValidationError{}
