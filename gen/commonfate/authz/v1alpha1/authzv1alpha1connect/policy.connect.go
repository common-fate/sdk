// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/authz/v1alpha1/policy.proto

package authzv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/authz/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PolicyServiceName is the fully-qualified name of the PolicyService service.
	PolicyServiceName = "commonfate.authz.v1alpha1.PolicyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PolicyServiceCreatePolicySetProcedure is the fully-qualified name of the PolicyService's
	// CreatePolicySet RPC.
	PolicyServiceCreatePolicySetProcedure = "/commonfate.authz.v1alpha1.PolicyService/CreatePolicySet"
	// PolicyServiceUpdatePolicySetProcedure is the fully-qualified name of the PolicyService's
	// UpdatePolicySet RPC.
	PolicyServiceUpdatePolicySetProcedure = "/commonfate.authz.v1alpha1.PolicyService/UpdatePolicySet"
	// PolicyServiceListPolicySetsProcedure is the fully-qualified name of the PolicyService's
	// ListPolicySets RPC.
	PolicyServiceListPolicySetsProcedure = "/commonfate.authz.v1alpha1.PolicyService/ListPolicySets"
	// PolicyServiceGetPolicySetProcedure is the fully-qualified name of the PolicyService's
	// GetPolicySet RPC.
	PolicyServiceGetPolicySetProcedure = "/commonfate.authz.v1alpha1.PolicyService/GetPolicySet"
	// PolicyServiceDeletePolicySetProcedure is the fully-qualified name of the PolicyService's
	// DeletePolicySet RPC.
	PolicyServiceDeletePolicySetProcedure = "/commonfate.authz.v1alpha1.PolicyService/DeletePolicySet"
)

// PolicyServiceClient is a client for the commonfate.authz.v1alpha1.PolicyService service.
type PolicyServiceClient interface {
	CreatePolicySet(context.Context, *connect_go.Request[v1alpha1.CreatePolicySetRequest]) (*connect_go.Response[v1alpha1.CreatePolicySetResponse], error)
	UpdatePolicySet(context.Context, *connect_go.Request[v1alpha1.UpdatePolicySetRequest]) (*connect_go.Response[v1alpha1.UpdatePolicySetResponse], error)
	ListPolicySets(context.Context, *connect_go.Request[v1alpha1.ListPolicySetsRequest]) (*connect_go.Response[v1alpha1.ListPolicySetsResponse], error)
	GetPolicySet(context.Context, *connect_go.Request[v1alpha1.GetPolicySetRequest]) (*connect_go.Response[v1alpha1.GetPolicySetResponse], error)
	DeletePolicySet(context.Context, *connect_go.Request[v1alpha1.DeletePolicySetRequest]) (*connect_go.Response[v1alpha1.DeletePolicySetResponse], error)
}

// NewPolicyServiceClient constructs a client for the commonfate.authz.v1alpha1.PolicyService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPolicyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PolicyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &policyServiceClient{
		createPolicySet: connect_go.NewClient[v1alpha1.CreatePolicySetRequest, v1alpha1.CreatePolicySetResponse](
			httpClient,
			baseURL+PolicyServiceCreatePolicySetProcedure,
			opts...,
		),
		updatePolicySet: connect_go.NewClient[v1alpha1.UpdatePolicySetRequest, v1alpha1.UpdatePolicySetResponse](
			httpClient,
			baseURL+PolicyServiceUpdatePolicySetProcedure,
			opts...,
		),
		listPolicySets: connect_go.NewClient[v1alpha1.ListPolicySetsRequest, v1alpha1.ListPolicySetsResponse](
			httpClient,
			baseURL+PolicyServiceListPolicySetsProcedure,
			opts...,
		),
		getPolicySet: connect_go.NewClient[v1alpha1.GetPolicySetRequest, v1alpha1.GetPolicySetResponse](
			httpClient,
			baseURL+PolicyServiceGetPolicySetProcedure,
			opts...,
		),
		deletePolicySet: connect_go.NewClient[v1alpha1.DeletePolicySetRequest, v1alpha1.DeletePolicySetResponse](
			httpClient,
			baseURL+PolicyServiceDeletePolicySetProcedure,
			opts...,
		),
	}
}

// policyServiceClient implements PolicyServiceClient.
type policyServiceClient struct {
	createPolicySet *connect_go.Client[v1alpha1.CreatePolicySetRequest, v1alpha1.CreatePolicySetResponse]
	updatePolicySet *connect_go.Client[v1alpha1.UpdatePolicySetRequest, v1alpha1.UpdatePolicySetResponse]
	listPolicySets  *connect_go.Client[v1alpha1.ListPolicySetsRequest, v1alpha1.ListPolicySetsResponse]
	getPolicySet    *connect_go.Client[v1alpha1.GetPolicySetRequest, v1alpha1.GetPolicySetResponse]
	deletePolicySet *connect_go.Client[v1alpha1.DeletePolicySetRequest, v1alpha1.DeletePolicySetResponse]
}

// CreatePolicySet calls commonfate.authz.v1alpha1.PolicyService.CreatePolicySet.
func (c *policyServiceClient) CreatePolicySet(ctx context.Context, req *connect_go.Request[v1alpha1.CreatePolicySetRequest]) (*connect_go.Response[v1alpha1.CreatePolicySetResponse], error) {
	return c.createPolicySet.CallUnary(ctx, req)
}

// UpdatePolicySet calls commonfate.authz.v1alpha1.PolicyService.UpdatePolicySet.
func (c *policyServiceClient) UpdatePolicySet(ctx context.Context, req *connect_go.Request[v1alpha1.UpdatePolicySetRequest]) (*connect_go.Response[v1alpha1.UpdatePolicySetResponse], error) {
	return c.updatePolicySet.CallUnary(ctx, req)
}

// ListPolicySets calls commonfate.authz.v1alpha1.PolicyService.ListPolicySets.
func (c *policyServiceClient) ListPolicySets(ctx context.Context, req *connect_go.Request[v1alpha1.ListPolicySetsRequest]) (*connect_go.Response[v1alpha1.ListPolicySetsResponse], error) {
	return c.listPolicySets.CallUnary(ctx, req)
}

// GetPolicySet calls commonfate.authz.v1alpha1.PolicyService.GetPolicySet.
func (c *policyServiceClient) GetPolicySet(ctx context.Context, req *connect_go.Request[v1alpha1.GetPolicySetRequest]) (*connect_go.Response[v1alpha1.GetPolicySetResponse], error) {
	return c.getPolicySet.CallUnary(ctx, req)
}

// DeletePolicySet calls commonfate.authz.v1alpha1.PolicyService.DeletePolicySet.
func (c *policyServiceClient) DeletePolicySet(ctx context.Context, req *connect_go.Request[v1alpha1.DeletePolicySetRequest]) (*connect_go.Response[v1alpha1.DeletePolicySetResponse], error) {
	return c.deletePolicySet.CallUnary(ctx, req)
}

// PolicyServiceHandler is an implementation of the commonfate.authz.v1alpha1.PolicyService service.
type PolicyServiceHandler interface {
	CreatePolicySet(context.Context, *connect_go.Request[v1alpha1.CreatePolicySetRequest]) (*connect_go.Response[v1alpha1.CreatePolicySetResponse], error)
	UpdatePolicySet(context.Context, *connect_go.Request[v1alpha1.UpdatePolicySetRequest]) (*connect_go.Response[v1alpha1.UpdatePolicySetResponse], error)
	ListPolicySets(context.Context, *connect_go.Request[v1alpha1.ListPolicySetsRequest]) (*connect_go.Response[v1alpha1.ListPolicySetsResponse], error)
	GetPolicySet(context.Context, *connect_go.Request[v1alpha1.GetPolicySetRequest]) (*connect_go.Response[v1alpha1.GetPolicySetResponse], error)
	DeletePolicySet(context.Context, *connect_go.Request[v1alpha1.DeletePolicySetRequest]) (*connect_go.Response[v1alpha1.DeletePolicySetResponse], error)
}

// NewPolicyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPolicyServiceHandler(svc PolicyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	policyServiceCreatePolicySetHandler := connect_go.NewUnaryHandler(
		PolicyServiceCreatePolicySetProcedure,
		svc.CreatePolicySet,
		opts...,
	)
	policyServiceUpdatePolicySetHandler := connect_go.NewUnaryHandler(
		PolicyServiceUpdatePolicySetProcedure,
		svc.UpdatePolicySet,
		opts...,
	)
	policyServiceListPolicySetsHandler := connect_go.NewUnaryHandler(
		PolicyServiceListPolicySetsProcedure,
		svc.ListPolicySets,
		opts...,
	)
	policyServiceGetPolicySetHandler := connect_go.NewUnaryHandler(
		PolicyServiceGetPolicySetProcedure,
		svc.GetPolicySet,
		opts...,
	)
	policyServiceDeletePolicySetHandler := connect_go.NewUnaryHandler(
		PolicyServiceDeletePolicySetProcedure,
		svc.DeletePolicySet,
		opts...,
	)
	return "/commonfate.authz.v1alpha1.PolicyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PolicyServiceCreatePolicySetProcedure:
			policyServiceCreatePolicySetHandler.ServeHTTP(w, r)
		case PolicyServiceUpdatePolicySetProcedure:
			policyServiceUpdatePolicySetHandler.ServeHTTP(w, r)
		case PolicyServiceListPolicySetsProcedure:
			policyServiceListPolicySetsHandler.ServeHTTP(w, r)
		case PolicyServiceGetPolicySetProcedure:
			policyServiceGetPolicySetHandler.ServeHTTP(w, r)
		case PolicyServiceDeletePolicySetProcedure:
			policyServiceDeletePolicySetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPolicyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPolicyServiceHandler struct{}

func (UnimplementedPolicyServiceHandler) CreatePolicySet(context.Context, *connect_go.Request[v1alpha1.CreatePolicySetRequest]) (*connect_go.Response[v1alpha1.CreatePolicySetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.authz.v1alpha1.PolicyService.CreatePolicySet is not implemented"))
}

func (UnimplementedPolicyServiceHandler) UpdatePolicySet(context.Context, *connect_go.Request[v1alpha1.UpdatePolicySetRequest]) (*connect_go.Response[v1alpha1.UpdatePolicySetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.authz.v1alpha1.PolicyService.UpdatePolicySet is not implemented"))
}

func (UnimplementedPolicyServiceHandler) ListPolicySets(context.Context, *connect_go.Request[v1alpha1.ListPolicySetsRequest]) (*connect_go.Response[v1alpha1.ListPolicySetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.authz.v1alpha1.PolicyService.ListPolicySets is not implemented"))
}

func (UnimplementedPolicyServiceHandler) GetPolicySet(context.Context, *connect_go.Request[v1alpha1.GetPolicySetRequest]) (*connect_go.Response[v1alpha1.GetPolicySetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.authz.v1alpha1.PolicyService.GetPolicySet is not implemented"))
}

func (UnimplementedPolicyServiceHandler) DeletePolicySet(context.Context, *connect_go.Request[v1alpha1.DeletePolicySetRequest]) (*connect_go.Response[v1alpha1.DeletePolicySetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.authz.v1alpha1.PolicyService.DeletePolicySet is not implemented"))
}
