// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/authz/v1alpha1/index.proto

package authzv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/authz/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IndexServiceName is the fully-qualified name of the IndexService service.
	IndexServiceName = "commonfate.authz.v1alpha1.IndexService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IndexServiceStartIndexJobProcedure is the fully-qualified name of the IndexService's
	// StartIndexJob RPC.
	IndexServiceStartIndexJobProcedure = "/commonfate.authz.v1alpha1.IndexService/StartIndexJob"
	// IndexServiceLookupResourcesProcedure is the fully-qualified name of the IndexService's
	// LookupResources RPC.
	IndexServiceLookupResourcesProcedure = "/commonfate.authz.v1alpha1.IndexService/LookupResources"
	// IndexServiceSimulateProcedure is the fully-qualified name of the IndexService's Simulate RPC.
	IndexServiceSimulateProcedure = "/commonfate.authz.v1alpha1.IndexService/Simulate"
)

// IndexServiceClient is a client for the commonfate.authz.v1alpha1.IndexService service.
type IndexServiceClient interface {
	// Manually trigger an indexing job.
	// The job will complete asynchronously and an ID of the job is returned.
	StartIndexJob(context.Context, *connect_go.Request[v1alpha1.StartIndexJobRequest]) (*connect_go.Response[v1alpha1.StartIndexJobResponse], error)
	// look up which resources a particular principal can access
	LookupResources(context.Context, *connect_go.Request[v1alpha1.LookupResourcesRequest]) (*connect_go.Response[v1alpha1.LookupResourcesResponse], error)
	// Simulate policy changes prior to applying them.
	Simulate(context.Context, *connect_go.Request[v1alpha1.SimulateRequest]) (*connect_go.Response[v1alpha1.SimulateResponse], error)
}

// NewIndexServiceClient constructs a client for the commonfate.authz.v1alpha1.IndexService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIndexServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IndexServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &indexServiceClient{
		startIndexJob: connect_go.NewClient[v1alpha1.StartIndexJobRequest, v1alpha1.StartIndexJobResponse](
			httpClient,
			baseURL+IndexServiceStartIndexJobProcedure,
			opts...,
		),
		lookupResources: connect_go.NewClient[v1alpha1.LookupResourcesRequest, v1alpha1.LookupResourcesResponse](
			httpClient,
			baseURL+IndexServiceLookupResourcesProcedure,
			opts...,
		),
		simulate: connect_go.NewClient[v1alpha1.SimulateRequest, v1alpha1.SimulateResponse](
			httpClient,
			baseURL+IndexServiceSimulateProcedure,
			opts...,
		),
	}
}

// indexServiceClient implements IndexServiceClient.
type indexServiceClient struct {
	startIndexJob   *connect_go.Client[v1alpha1.StartIndexJobRequest, v1alpha1.StartIndexJobResponse]
	lookupResources *connect_go.Client[v1alpha1.LookupResourcesRequest, v1alpha1.LookupResourcesResponse]
	simulate        *connect_go.Client[v1alpha1.SimulateRequest, v1alpha1.SimulateResponse]
}

// StartIndexJob calls commonfate.authz.v1alpha1.IndexService.StartIndexJob.
func (c *indexServiceClient) StartIndexJob(ctx context.Context, req *connect_go.Request[v1alpha1.StartIndexJobRequest]) (*connect_go.Response[v1alpha1.StartIndexJobResponse], error) {
	return c.startIndexJob.CallUnary(ctx, req)
}

// LookupResources calls commonfate.authz.v1alpha1.IndexService.LookupResources.
func (c *indexServiceClient) LookupResources(ctx context.Context, req *connect_go.Request[v1alpha1.LookupResourcesRequest]) (*connect_go.Response[v1alpha1.LookupResourcesResponse], error) {
	return c.lookupResources.CallUnary(ctx, req)
}

// Simulate calls commonfate.authz.v1alpha1.IndexService.Simulate.
func (c *indexServiceClient) Simulate(ctx context.Context, req *connect_go.Request[v1alpha1.SimulateRequest]) (*connect_go.Response[v1alpha1.SimulateResponse], error) {
	return c.simulate.CallUnary(ctx, req)
}

// IndexServiceHandler is an implementation of the commonfate.authz.v1alpha1.IndexService service.
type IndexServiceHandler interface {
	// Manually trigger an indexing job.
	// The job will complete asynchronously and an ID of the job is returned.
	StartIndexJob(context.Context, *connect_go.Request[v1alpha1.StartIndexJobRequest]) (*connect_go.Response[v1alpha1.StartIndexJobResponse], error)
	// look up which resources a particular principal can access
	LookupResources(context.Context, *connect_go.Request[v1alpha1.LookupResourcesRequest]) (*connect_go.Response[v1alpha1.LookupResourcesResponse], error)
	// Simulate policy changes prior to applying them.
	Simulate(context.Context, *connect_go.Request[v1alpha1.SimulateRequest]) (*connect_go.Response[v1alpha1.SimulateResponse], error)
}

// NewIndexServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIndexServiceHandler(svc IndexServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	indexServiceStartIndexJobHandler := connect_go.NewUnaryHandler(
		IndexServiceStartIndexJobProcedure,
		svc.StartIndexJob,
		opts...,
	)
	indexServiceLookupResourcesHandler := connect_go.NewUnaryHandler(
		IndexServiceLookupResourcesProcedure,
		svc.LookupResources,
		opts...,
	)
	indexServiceSimulateHandler := connect_go.NewUnaryHandler(
		IndexServiceSimulateProcedure,
		svc.Simulate,
		opts...,
	)
	return "/commonfate.authz.v1alpha1.IndexService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IndexServiceStartIndexJobProcedure:
			indexServiceStartIndexJobHandler.ServeHTTP(w, r)
		case IndexServiceLookupResourcesProcedure:
			indexServiceLookupResourcesHandler.ServeHTTP(w, r)
		case IndexServiceSimulateProcedure:
			indexServiceSimulateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIndexServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIndexServiceHandler struct{}

func (UnimplementedIndexServiceHandler) StartIndexJob(context.Context, *connect_go.Request[v1alpha1.StartIndexJobRequest]) (*connect_go.Response[v1alpha1.StartIndexJobResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.authz.v1alpha1.IndexService.StartIndexJob is not implemented"))
}

func (UnimplementedIndexServiceHandler) LookupResources(context.Context, *connect_go.Request[v1alpha1.LookupResourcesRequest]) (*connect_go.Response[v1alpha1.LookupResourcesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.authz.v1alpha1.IndexService.LookupResources is not implemented"))
}

func (UnimplementedIndexServiceHandler) Simulate(context.Context, *connect_go.Request[v1alpha1.SimulateRequest]) (*connect_go.Response[v1alpha1.SimulateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.authz.v1alpha1.IndexService.Simulate is not implemented"))
}
