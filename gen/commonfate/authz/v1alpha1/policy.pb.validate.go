// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/authz/v1alpha1/policy.proto

package authzv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolicyMultiError, or nil if none found.
func (m *Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Text

	if len(errors) > 0 {
		return PolicyMultiError(errors)
	}

	return nil
}

// PolicyMultiError is an error wrapping multiple validation errors returned by
// Policy.ValidateAll() if the designated constraints aren't met.
type PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyMultiError) AllErrors() []error { return m }

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

// Validate checks the field values on PolicySet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicySet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicySet with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicySetMultiError, or nil
// if none found.
func (m *PolicySet) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicySet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicySetValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicySetValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicySetValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Text

	if len(errors) > 0 {
		return PolicySetMultiError(errors)
	}

	return nil
}

// PolicySetMultiError is an error wrapping multiple validation errors returned
// by PolicySet.ValidateAll() if the designated constraints aren't met.
type PolicySetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicySetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicySetMultiError) AllErrors() []error { return m }

// PolicySetValidationError is the validation error returned by
// PolicySet.Validate if the designated constraints aren't met.
type PolicySetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicySetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicySetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicySetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicySetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicySetValidationError) ErrorName() string { return "PolicySetValidationError" }

// Error satisfies the builtin error interface
func (e PolicySetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicySet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicySetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicySetValidationError{}

// Validate checks the field values on PolicySetInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicySetInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicySetInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicySetInputMultiError,
// or nil if none found.
func (m *PolicySetInput) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicySetInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Text

	if len(errors) > 0 {
		return PolicySetInputMultiError(errors)
	}

	return nil
}

// PolicySetInputMultiError is an error wrapping multiple validation errors
// returned by PolicySetInput.ValidateAll() if the designated constraints
// aren't met.
type PolicySetInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicySetInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicySetInputMultiError) AllErrors() []error { return m }

// PolicySetInputValidationError is the validation error returned by
// PolicySetInput.Validate if the designated constraints aren't met.
type PolicySetInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicySetInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicySetInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicySetInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicySetInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicySetInputValidationError) ErrorName() string { return "PolicySetInputValidationError" }

// Error satisfies the builtin error interface
func (e PolicySetInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicySetInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicySetInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicySetInputValidationError{}

// Validate checks the field values on ListPolicySetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPolicySetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPolicySetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPolicySetsRequestMultiError, or nil if none found.
func (m *ListPolicySetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPolicySetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListPolicySetsRequestMultiError(errors)
	}

	return nil
}

// ListPolicySetsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPolicySetsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPolicySetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPolicySetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPolicySetsRequestMultiError) AllErrors() []error { return m }

// ListPolicySetsRequestValidationError is the validation error returned by
// ListPolicySetsRequest.Validate if the designated constraints aren't met.
type ListPolicySetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPolicySetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPolicySetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPolicySetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPolicySetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPolicySetsRequestValidationError) ErrorName() string {
	return "ListPolicySetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPolicySetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPolicySetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPolicySetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPolicySetsRequestValidationError{}

// Validate checks the field values on ListPolicySetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPolicySetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPolicySetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPolicySetsResponseMultiError, or nil if none found.
func (m *ListPolicySetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPolicySetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicySets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPolicySetsResponseValidationError{
						field:  fmt.Sprintf("PolicySets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPolicySetsResponseValidationError{
						field:  fmt.Sprintf("PolicySets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPolicySetsResponseValidationError{
					field:  fmt.Sprintf("PolicySets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListPolicySetsResponseMultiError(errors)
	}

	return nil
}

// ListPolicySetsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPolicySetsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPolicySetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPolicySetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPolicySetsResponseMultiError) AllErrors() []error { return m }

// ListPolicySetsResponseValidationError is the validation error returned by
// ListPolicySetsResponse.Validate if the designated constraints aren't met.
type ListPolicySetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPolicySetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPolicySetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPolicySetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPolicySetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPolicySetsResponseValidationError) ErrorName() string {
	return "ListPolicySetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPolicySetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPolicySetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPolicySetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPolicySetsResponseValidationError{}

// Validate checks the field values on CreatePolicySetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicySetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicySetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicySetRequestMultiError, or nil if none found.
func (m *CreatePolicySetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicySetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicySet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicySetRequestValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicySetRequestValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicySet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicySetRequestValidationError{
				field:  "PolicySet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicySetRequestMultiError(errors)
	}

	return nil
}

// CreatePolicySetRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePolicySetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicySetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicySetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicySetRequestMultiError) AllErrors() []error { return m }

// CreatePolicySetRequestValidationError is the validation error returned by
// CreatePolicySetRequest.Validate if the designated constraints aren't met.
type CreatePolicySetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicySetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicySetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicySetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicySetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicySetRequestValidationError) ErrorName() string {
	return "CreatePolicySetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicySetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicySetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicySetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicySetRequestValidationError{}

// Validate checks the field values on CreatePolicySetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicySetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicySetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicySetResponseMultiError, or nil if none found.
func (m *CreatePolicySetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicySetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicySet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicySetResponseValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicySetResponseValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicySet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicySetResponseValidationError{
				field:  "PolicySet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicySetResponseMultiError(errors)
	}

	return nil
}

// CreatePolicySetResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePolicySetResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicySetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicySetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicySetResponseMultiError) AllErrors() []error { return m }

// CreatePolicySetResponseValidationError is the validation error returned by
// CreatePolicySetResponse.Validate if the designated constraints aren't met.
type CreatePolicySetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicySetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicySetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicySetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicySetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicySetResponseValidationError) ErrorName() string {
	return "CreatePolicySetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicySetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicySetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicySetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicySetResponseValidationError{}

// Validate checks the field values on UpdatePolicySetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePolicySetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePolicySetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePolicySetRequestMultiError, or nil if none found.
func (m *UpdatePolicySetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePolicySetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicySet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePolicySetRequestValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePolicySetRequestValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicySet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePolicySetRequestValidationError{
				field:  "PolicySet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePolicySetRequestMultiError(errors)
	}

	return nil
}

// UpdatePolicySetRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePolicySetRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePolicySetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePolicySetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePolicySetRequestMultiError) AllErrors() []error { return m }

// UpdatePolicySetRequestValidationError is the validation error returned by
// UpdatePolicySetRequest.Validate if the designated constraints aren't met.
type UpdatePolicySetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicySetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicySetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicySetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicySetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicySetRequestValidationError) ErrorName() string {
	return "UpdatePolicySetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicySetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicySetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicySetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicySetRequestValidationError{}

// Validate checks the field values on UpdatePolicySetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePolicySetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePolicySetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePolicySetResponseMultiError, or nil if none found.
func (m *UpdatePolicySetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePolicySetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicySet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePolicySetResponseValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePolicySetResponseValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicySet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePolicySetResponseValidationError{
				field:  "PolicySet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePolicySetResponseMultiError(errors)
	}

	return nil
}

// UpdatePolicySetResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePolicySetResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePolicySetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePolicySetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePolicySetResponseMultiError) AllErrors() []error { return m }

// UpdatePolicySetResponseValidationError is the validation error returned by
// UpdatePolicySetResponse.Validate if the designated constraints aren't met.
type UpdatePolicySetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicySetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicySetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicySetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicySetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicySetResponseValidationError) ErrorName() string {
	return "UpdatePolicySetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicySetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicySetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicySetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicySetResponseValidationError{}

// Validate checks the field values on DeletePolicySetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePolicySetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePolicySetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePolicySetRequestMultiError, or nil if none found.
func (m *DeletePolicySetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePolicySetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePolicySetRequestMultiError(errors)
	}

	return nil
}

// DeletePolicySetRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePolicySetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePolicySetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePolicySetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePolicySetRequestMultiError) AllErrors() []error { return m }

// DeletePolicySetRequestValidationError is the validation error returned by
// DeletePolicySetRequest.Validate if the designated constraints aren't met.
type DeletePolicySetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicySetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicySetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicySetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicySetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicySetRequestValidationError) ErrorName() string {
	return "DeletePolicySetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicySetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicySetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicySetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicySetRequestValidationError{}

// Validate checks the field values on DeletePolicySetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePolicySetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePolicySetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePolicySetResponseMultiError, or nil if none found.
func (m *DeletePolicySetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePolicySetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePolicySetResponseMultiError(errors)
	}

	return nil
}

// DeletePolicySetResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePolicySetResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePolicySetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePolicySetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePolicySetResponseMultiError) AllErrors() []error { return m }

// DeletePolicySetResponseValidationError is the validation error returned by
// DeletePolicySetResponse.Validate if the designated constraints aren't met.
type DeletePolicySetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicySetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicySetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicySetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicySetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicySetResponseValidationError) ErrorName() string {
	return "DeletePolicySetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicySetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicySetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicySetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicySetResponseValidationError{}

// Validate checks the field values on GetPolicySetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPolicySetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicySetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicySetRequestMultiError, or nil if none found.
func (m *GetPolicySetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicySetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPolicySetRequestMultiError(errors)
	}

	return nil
}

// GetPolicySetRequestMultiError is an error wrapping multiple validation
// errors returned by GetPolicySetRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPolicySetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicySetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicySetRequestMultiError) AllErrors() []error { return m }

// GetPolicySetRequestValidationError is the validation error returned by
// GetPolicySetRequest.Validate if the designated constraints aren't met.
type GetPolicySetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicySetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicySetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicySetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicySetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicySetRequestValidationError) ErrorName() string {
	return "GetPolicySetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPolicySetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicySetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicySetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicySetRequestValidationError{}

// Validate checks the field values on GetPolicySetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPolicySetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicySetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicySetResponseMultiError, or nil if none found.
func (m *GetPolicySetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicySetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicySet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPolicySetResponseValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPolicySetResponseValidationError{
					field:  "PolicySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicySet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPolicySetResponseValidationError{
				field:  "PolicySet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPolicySetResponseMultiError(errors)
	}

	return nil
}

// GetPolicySetResponseMultiError is an error wrapping multiple validation
// errors returned by GetPolicySetResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPolicySetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicySetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicySetResponseMultiError) AllErrors() []error { return m }

// GetPolicySetResponseValidationError is the validation error returned by
// GetPolicySetResponse.Validate if the designated constraints aren't met.
type GetPolicySetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicySetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicySetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicySetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicySetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicySetResponseValidationError) ErrorName() string {
	return "GetPolicySetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPolicySetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicySetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicySetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicySetResponseValidationError{}
