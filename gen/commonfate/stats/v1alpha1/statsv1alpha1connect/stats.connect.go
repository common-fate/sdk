// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/stats/v1alpha1/stats.proto

package statsv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/stats/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StatsServiceName is the fully-qualified name of the StatsService service.
	StatsServiceName = "commonfate.stats.v1alpha1.StatsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StatsServiceGetStatsProcedure is the fully-qualified name of the StatsService's GetStats RPC.
	StatsServiceGetStatsProcedure = "/commonfate.stats.v1alpha1.StatsService/GetStats"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	statsServiceServiceDescriptor        = v1alpha1.File_commonfate_stats_v1alpha1_stats_proto.Services().ByName("StatsService")
	statsServiceGetStatsMethodDescriptor = statsServiceServiceDescriptor.Methods().ByName("GetStats")
)

// StatsServiceClient is a client for the commonfate.stats.v1alpha1.StatsService service.
type StatsServiceClient interface {
	// retrieves the latest least privilege report.
	GetStats(context.Context, *connect.Request[v1alpha1.GetStatsRequest]) (*connect.Response[v1alpha1.GetStatsResponse], error)
}

// NewStatsServiceClient constructs a client for the commonfate.stats.v1alpha1.StatsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStatsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StatsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &statsServiceClient{
		getStats: connect.NewClient[v1alpha1.GetStatsRequest, v1alpha1.GetStatsResponse](
			httpClient,
			baseURL+StatsServiceGetStatsProcedure,
			connect.WithSchema(statsServiceGetStatsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// statsServiceClient implements StatsServiceClient.
type statsServiceClient struct {
	getStats *connect.Client[v1alpha1.GetStatsRequest, v1alpha1.GetStatsResponse]
}

// GetStats calls commonfate.stats.v1alpha1.StatsService.GetStats.
func (c *statsServiceClient) GetStats(ctx context.Context, req *connect.Request[v1alpha1.GetStatsRequest]) (*connect.Response[v1alpha1.GetStatsResponse], error) {
	return c.getStats.CallUnary(ctx, req)
}

// StatsServiceHandler is an implementation of the commonfate.stats.v1alpha1.StatsService service.
type StatsServiceHandler interface {
	// retrieves the latest least privilege report.
	GetStats(context.Context, *connect.Request[v1alpha1.GetStatsRequest]) (*connect.Response[v1alpha1.GetStatsResponse], error)
}

// NewStatsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStatsServiceHandler(svc StatsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	statsServiceGetStatsHandler := connect.NewUnaryHandler(
		StatsServiceGetStatsProcedure,
		svc.GetStats,
		connect.WithSchema(statsServiceGetStatsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.stats.v1alpha1.StatsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StatsServiceGetStatsProcedure:
			statsServiceGetStatsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStatsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStatsServiceHandler struct{}

func (UnimplementedStatsServiceHandler) GetStats(context.Context, *connect.Request[v1alpha1.GetStatsRequest]) (*connect.Response[v1alpha1.GetStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.stats.v1alpha1.StatsService.GetStats is not implemented"))
}
