// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/entity/v1alpha1/entity_service.proto

package entityv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/entity/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EntityServiceName is the fully-qualified name of the EntityService service.
	EntityServiceName = "commonfate.entity.v1alpha1.EntityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EntityServiceBatchUpdateProcedure is the fully-qualified name of the EntityService's BatchUpdate
	// RPC.
	EntityServiceBatchUpdateProcedure = "/commonfate.entity.v1alpha1.EntityService/BatchUpdate"
	// EntityServiceListProcedure is the fully-qualified name of the EntityService's List RPC.
	EntityServiceListProcedure = "/commonfate.entity.v1alpha1.EntityService/List"
	// EntityServiceGetProcedure is the fully-qualified name of the EntityService's Get RPC.
	EntityServiceGetProcedure = "/commonfate.entity.v1alpha1.EntityService/Get"
	// EntityServiceListChildrenProcedure is the fully-qualified name of the EntityService's
	// ListChildren RPC.
	EntityServiceListChildrenProcedure = "/commonfate.entity.v1alpha1.EntityService/ListChildren"
	// EntityServiceListParentsProcedure is the fully-qualified name of the EntityService's ListParents
	// RPC.
	EntityServiceListParentsProcedure = "/commonfate.entity.v1alpha1.EntityService/ListParents"
	// EntityServiceBatchGetProcedure is the fully-qualified name of the EntityService's BatchGet RPC.
	EntityServiceBatchGetProcedure = "/commonfate.entity.v1alpha1.EntityService/BatchGet"
	// EntityServiceSelectProcedure is the fully-qualified name of the EntityService's Select RPC.
	EntityServiceSelectProcedure = "/commonfate.entity.v1alpha1.EntityService/Select"
)

// EntityServiceClient is a client for the commonfate.entity.v1alpha1.EntityService service.
type EntityServiceClient interface {
	// creates or updates entities for a particular policy store in the authorization service.
	BatchUpdate(context.Context, *connect_go.Request[v1alpha1.BatchUpdateRequest]) (*connect_go.Response[v1alpha1.BatchUpdateResponse], error)
	// List entities matching filter conditions.
	List(context.Context, *connect_go.Request[v1alpha1.ListRequest]) (*connect_go.Response[v1alpha1.ListResponse], error)
	// Get an entity by EID.
	Get(context.Context, *connect_go.Request[v1alpha1.GetRequest]) (*connect_go.Response[v1alpha1.GetResponse], error)
	// List the children for a particular entity.
	ListChildren(context.Context, *connect_go.Request[v1alpha1.ListChildrenRequest]) (*connect_go.Response[v1alpha1.ListChildrenResponse], error)
	// List the parents for a particular entity.
	ListParents(context.Context, *connect_go.Request[v1alpha1.ListParentsRequest]) (*connect_go.Response[v1alpha1.ListParentsResponse], error)
	// Get multiple entities by EID.
	BatchGet(context.Context, *connect_go.Request[v1alpha1.BatchGetRequest]) (*connect_go.Response[v1alpha1.BatchGetResponse], error)
	Select(context.Context, *connect_go.Request[v1alpha1.SelectRequest]) (*connect_go.Response[v1alpha1.SelectResponse], error)
}

// NewEntityServiceClient constructs a client for the commonfate.entity.v1alpha1.EntityService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEntityServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EntityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &entityServiceClient{
		batchUpdate: connect_go.NewClient[v1alpha1.BatchUpdateRequest, v1alpha1.BatchUpdateResponse](
			httpClient,
			baseURL+EntityServiceBatchUpdateProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1alpha1.ListRequest, v1alpha1.ListResponse](
			httpClient,
			baseURL+EntityServiceListProcedure,
			opts...,
		),
		get: connect_go.NewClient[v1alpha1.GetRequest, v1alpha1.GetResponse](
			httpClient,
			baseURL+EntityServiceGetProcedure,
			opts...,
		),
		listChildren: connect_go.NewClient[v1alpha1.ListChildrenRequest, v1alpha1.ListChildrenResponse](
			httpClient,
			baseURL+EntityServiceListChildrenProcedure,
			opts...,
		),
		listParents: connect_go.NewClient[v1alpha1.ListParentsRequest, v1alpha1.ListParentsResponse](
			httpClient,
			baseURL+EntityServiceListParentsProcedure,
			opts...,
		),
		batchGet: connect_go.NewClient[v1alpha1.BatchGetRequest, v1alpha1.BatchGetResponse](
			httpClient,
			baseURL+EntityServiceBatchGetProcedure,
			opts...,
		),
		_select: connect_go.NewClient[v1alpha1.SelectRequest, v1alpha1.SelectResponse](
			httpClient,
			baseURL+EntityServiceSelectProcedure,
			opts...,
		),
	}
}

// entityServiceClient implements EntityServiceClient.
type entityServiceClient struct {
	batchUpdate  *connect_go.Client[v1alpha1.BatchUpdateRequest, v1alpha1.BatchUpdateResponse]
	list         *connect_go.Client[v1alpha1.ListRequest, v1alpha1.ListResponse]
	get          *connect_go.Client[v1alpha1.GetRequest, v1alpha1.GetResponse]
	listChildren *connect_go.Client[v1alpha1.ListChildrenRequest, v1alpha1.ListChildrenResponse]
	listParents  *connect_go.Client[v1alpha1.ListParentsRequest, v1alpha1.ListParentsResponse]
	batchGet     *connect_go.Client[v1alpha1.BatchGetRequest, v1alpha1.BatchGetResponse]
	_select      *connect_go.Client[v1alpha1.SelectRequest, v1alpha1.SelectResponse]
}

// BatchUpdate calls commonfate.entity.v1alpha1.EntityService.BatchUpdate.
func (c *entityServiceClient) BatchUpdate(ctx context.Context, req *connect_go.Request[v1alpha1.BatchUpdateRequest]) (*connect_go.Response[v1alpha1.BatchUpdateResponse], error) {
	return c.batchUpdate.CallUnary(ctx, req)
}

// List calls commonfate.entity.v1alpha1.EntityService.List.
func (c *entityServiceClient) List(ctx context.Context, req *connect_go.Request[v1alpha1.ListRequest]) (*connect_go.Response[v1alpha1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls commonfate.entity.v1alpha1.EntityService.Get.
func (c *entityServiceClient) Get(ctx context.Context, req *connect_go.Request[v1alpha1.GetRequest]) (*connect_go.Response[v1alpha1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// ListChildren calls commonfate.entity.v1alpha1.EntityService.ListChildren.
func (c *entityServiceClient) ListChildren(ctx context.Context, req *connect_go.Request[v1alpha1.ListChildrenRequest]) (*connect_go.Response[v1alpha1.ListChildrenResponse], error) {
	return c.listChildren.CallUnary(ctx, req)
}

// ListParents calls commonfate.entity.v1alpha1.EntityService.ListParents.
func (c *entityServiceClient) ListParents(ctx context.Context, req *connect_go.Request[v1alpha1.ListParentsRequest]) (*connect_go.Response[v1alpha1.ListParentsResponse], error) {
	return c.listParents.CallUnary(ctx, req)
}

// BatchGet calls commonfate.entity.v1alpha1.EntityService.BatchGet.
func (c *entityServiceClient) BatchGet(ctx context.Context, req *connect_go.Request[v1alpha1.BatchGetRequest]) (*connect_go.Response[v1alpha1.BatchGetResponse], error) {
	return c.batchGet.CallUnary(ctx, req)
}

// Select calls commonfate.entity.v1alpha1.EntityService.Select.
func (c *entityServiceClient) Select(ctx context.Context, req *connect_go.Request[v1alpha1.SelectRequest]) (*connect_go.Response[v1alpha1.SelectResponse], error) {
	return c._select.CallUnary(ctx, req)
}

// EntityServiceHandler is an implementation of the commonfate.entity.v1alpha1.EntityService
// service.
type EntityServiceHandler interface {
	// creates or updates entities for a particular policy store in the authorization service.
	BatchUpdate(context.Context, *connect_go.Request[v1alpha1.BatchUpdateRequest]) (*connect_go.Response[v1alpha1.BatchUpdateResponse], error)
	// List entities matching filter conditions.
	List(context.Context, *connect_go.Request[v1alpha1.ListRequest]) (*connect_go.Response[v1alpha1.ListResponse], error)
	// Get an entity by EID.
	Get(context.Context, *connect_go.Request[v1alpha1.GetRequest]) (*connect_go.Response[v1alpha1.GetResponse], error)
	// List the children for a particular entity.
	ListChildren(context.Context, *connect_go.Request[v1alpha1.ListChildrenRequest]) (*connect_go.Response[v1alpha1.ListChildrenResponse], error)
	// List the parents for a particular entity.
	ListParents(context.Context, *connect_go.Request[v1alpha1.ListParentsRequest]) (*connect_go.Response[v1alpha1.ListParentsResponse], error)
	// Get multiple entities by EID.
	BatchGet(context.Context, *connect_go.Request[v1alpha1.BatchGetRequest]) (*connect_go.Response[v1alpha1.BatchGetResponse], error)
	Select(context.Context, *connect_go.Request[v1alpha1.SelectRequest]) (*connect_go.Response[v1alpha1.SelectResponse], error)
}

// NewEntityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEntityServiceHandler(svc EntityServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	entityServiceBatchUpdateHandler := connect_go.NewUnaryHandler(
		EntityServiceBatchUpdateProcedure,
		svc.BatchUpdate,
		opts...,
	)
	entityServiceListHandler := connect_go.NewUnaryHandler(
		EntityServiceListProcedure,
		svc.List,
		opts...,
	)
	entityServiceGetHandler := connect_go.NewUnaryHandler(
		EntityServiceGetProcedure,
		svc.Get,
		opts...,
	)
	entityServiceListChildrenHandler := connect_go.NewUnaryHandler(
		EntityServiceListChildrenProcedure,
		svc.ListChildren,
		opts...,
	)
	entityServiceListParentsHandler := connect_go.NewUnaryHandler(
		EntityServiceListParentsProcedure,
		svc.ListParents,
		opts...,
	)
	entityServiceBatchGetHandler := connect_go.NewUnaryHandler(
		EntityServiceBatchGetProcedure,
		svc.BatchGet,
		opts...,
	)
	entityServiceSelectHandler := connect_go.NewUnaryHandler(
		EntityServiceSelectProcedure,
		svc.Select,
		opts...,
	)
	return "/commonfate.entity.v1alpha1.EntityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EntityServiceBatchUpdateProcedure:
			entityServiceBatchUpdateHandler.ServeHTTP(w, r)
		case EntityServiceListProcedure:
			entityServiceListHandler.ServeHTTP(w, r)
		case EntityServiceGetProcedure:
			entityServiceGetHandler.ServeHTTP(w, r)
		case EntityServiceListChildrenProcedure:
			entityServiceListChildrenHandler.ServeHTTP(w, r)
		case EntityServiceListParentsProcedure:
			entityServiceListParentsHandler.ServeHTTP(w, r)
		case EntityServiceBatchGetProcedure:
			entityServiceBatchGetHandler.ServeHTTP(w, r)
		case EntityServiceSelectProcedure:
			entityServiceSelectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEntityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEntityServiceHandler struct{}

func (UnimplementedEntityServiceHandler) BatchUpdate(context.Context, *connect_go.Request[v1alpha1.BatchUpdateRequest]) (*connect_go.Response[v1alpha1.BatchUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.entity.v1alpha1.EntityService.BatchUpdate is not implemented"))
}

func (UnimplementedEntityServiceHandler) List(context.Context, *connect_go.Request[v1alpha1.ListRequest]) (*connect_go.Response[v1alpha1.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.entity.v1alpha1.EntityService.List is not implemented"))
}

func (UnimplementedEntityServiceHandler) Get(context.Context, *connect_go.Request[v1alpha1.GetRequest]) (*connect_go.Response[v1alpha1.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.entity.v1alpha1.EntityService.Get is not implemented"))
}

func (UnimplementedEntityServiceHandler) ListChildren(context.Context, *connect_go.Request[v1alpha1.ListChildrenRequest]) (*connect_go.Response[v1alpha1.ListChildrenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.entity.v1alpha1.EntityService.ListChildren is not implemented"))
}

func (UnimplementedEntityServiceHandler) ListParents(context.Context, *connect_go.Request[v1alpha1.ListParentsRequest]) (*connect_go.Response[v1alpha1.ListParentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.entity.v1alpha1.EntityService.ListParents is not implemented"))
}

func (UnimplementedEntityServiceHandler) BatchGet(context.Context, *connect_go.Request[v1alpha1.BatchGetRequest]) (*connect_go.Response[v1alpha1.BatchGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.entity.v1alpha1.EntityService.BatchGet is not implemented"))
}

func (UnimplementedEntityServiceHandler) Select(context.Context, *connect_go.Request[v1alpha1.SelectRequest]) (*connect_go.Response[v1alpha1.SelectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.entity.v1alpha1.EntityService.Select is not implemented"))
}
