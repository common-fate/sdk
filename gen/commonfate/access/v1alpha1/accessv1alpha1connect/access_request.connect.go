// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v1alpha1/access_request.proto

package accessv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccessRequestServiceName is the fully-qualified name of the AccessRequestService service.
	AccessRequestServiceName = "commonfate.access.v1alpha1.AccessRequestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccessRequestServiceQueryAccessRequestsProcedure is the fully-qualified name of the
	// AccessRequestService's QueryAccessRequests RPC.
	AccessRequestServiceQueryAccessRequestsProcedure = "/commonfate.access.v1alpha1.AccessRequestService/QueryAccessRequests"
	// AccessRequestServiceQueryMyAccessRequestsProcedure is the fully-qualified name of the
	// AccessRequestService's QueryMyAccessRequests RPC.
	AccessRequestServiceQueryMyAccessRequestsProcedure = "/commonfate.access.v1alpha1.AccessRequestService/QueryMyAccessRequests"
	// AccessRequestServiceGetAccessRequestProcedure is the fully-qualified name of the
	// AccessRequestService's GetAccessRequest RPC.
	AccessRequestServiceGetAccessRequestProcedure = "/commonfate.access.v1alpha1.AccessRequestService/GetAccessRequest"
	// AccessRequestServiceGetAccessRequestActionsProcedure is the fully-qualified name of the
	// AccessRequestService's GetAccessRequestActions RPC.
	AccessRequestServiceGetAccessRequestActionsProcedure = "/commonfate.access.v1alpha1.AccessRequestService/GetAccessRequestActions"
	// AccessRequestServiceApproveAccessRequestProcedure is the fully-qualified name of the
	// AccessRequestService's ApproveAccessRequest RPC.
	AccessRequestServiceApproveAccessRequestProcedure = "/commonfate.access.v1alpha1.AccessRequestService/ApproveAccessRequest"
	// AccessRequestServiceActivateAccessRequestProcedure is the fully-qualified name of the
	// AccessRequestService's ActivateAccessRequest RPC.
	AccessRequestServiceActivateAccessRequestProcedure = "/commonfate.access.v1alpha1.AccessRequestService/ActivateAccessRequest"
	// AccessRequestServiceCloseAccessRequestProcedure is the fully-qualified name of the
	// AccessRequestService's CloseAccessRequest RPC.
	AccessRequestServiceCloseAccessRequestProcedure = "/commonfate.access.v1alpha1.AccessRequestService/CloseAccessRequest"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accessRequestServiceServiceDescriptor                       = v1alpha1.File_commonfate_access_v1alpha1_access_request_proto.Services().ByName("AccessRequestService")
	accessRequestServiceQueryAccessRequestsMethodDescriptor     = accessRequestServiceServiceDescriptor.Methods().ByName("QueryAccessRequests")
	accessRequestServiceQueryMyAccessRequestsMethodDescriptor   = accessRequestServiceServiceDescriptor.Methods().ByName("QueryMyAccessRequests")
	accessRequestServiceGetAccessRequestMethodDescriptor        = accessRequestServiceServiceDescriptor.Methods().ByName("GetAccessRequest")
	accessRequestServiceGetAccessRequestActionsMethodDescriptor = accessRequestServiceServiceDescriptor.Methods().ByName("GetAccessRequestActions")
	accessRequestServiceApproveAccessRequestMethodDescriptor    = accessRequestServiceServiceDescriptor.Methods().ByName("ApproveAccessRequest")
	accessRequestServiceActivateAccessRequestMethodDescriptor   = accessRequestServiceServiceDescriptor.Methods().ByName("ActivateAccessRequest")
	accessRequestServiceCloseAccessRequestMethodDescriptor      = accessRequestServiceServiceDescriptor.Methods().ByName("CloseAccessRequest")
)

// AccessRequestServiceClient is a client for the commonfate.access.v1alpha1.AccessRequestService
// service.
type AccessRequestServiceClient interface {
	QueryAccessRequests(context.Context, *connect.Request[v1alpha1.QueryAccessRequestsRequest]) (*connect.Response[v1alpha1.QueryAccessRequestsResponse], error)
	// Query the access requests where the user is the principal
	QueryMyAccessRequests(context.Context, *connect.Request[v1alpha1.QueryMyAccessRequestsRequest]) (*connect.Response[v1alpha1.QueryMyAccessRequestsResponse], error)
	GetAccessRequest(context.Context, *connect.Request[v1alpha1.GetAccessRequestRequest]) (*connect.Response[v1alpha1.GetAccessRequestResponse], error)
	// Returns the actions that the current user is allowed to perform on the request
	GetAccessRequestActions(context.Context, *connect.Request[v1alpha1.GetAccessRequestActionsRequest]) (*connect.Response[v1alpha1.GetAccessRequestActionsResponse], error)
	// Approving an Access Request will attempt to approve all of the Grants associated with the request.
	//
	// If the caller is not permitted to approve particular grants, warnings will be returned.
	ApproveAccessRequest(context.Context, *connect.Request[v1alpha1.ApproveAccessRequestRequest]) (*connect.Response[v1alpha1.ApproveAccessRequestResponse], error)
	ActivateAccessRequest(context.Context, *connect.Request[v1alpha1.ActivateAccessRequestRequest]) (*connect.Response[v1alpha1.ActivateAccessRequestResponse], error)
	// Closing an Access Request will make it no longer reviewable and will deactivate any Grants associated with the request.
	CloseAccessRequest(context.Context, *connect.Request[v1alpha1.CloseAccessRequestRequest]) (*connect.Response[v1alpha1.CloseAccessRequestResponse], error)
}

// NewAccessRequestServiceClient constructs a client for the
// commonfate.access.v1alpha1.AccessRequestService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccessRequestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccessRequestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accessRequestServiceClient{
		queryAccessRequests: connect.NewClient[v1alpha1.QueryAccessRequestsRequest, v1alpha1.QueryAccessRequestsResponse](
			httpClient,
			baseURL+AccessRequestServiceQueryAccessRequestsProcedure,
			connect.WithSchema(accessRequestServiceQueryAccessRequestsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryMyAccessRequests: connect.NewClient[v1alpha1.QueryMyAccessRequestsRequest, v1alpha1.QueryMyAccessRequestsResponse](
			httpClient,
			baseURL+AccessRequestServiceQueryMyAccessRequestsProcedure,
			connect.WithSchema(accessRequestServiceQueryMyAccessRequestsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAccessRequest: connect.NewClient[v1alpha1.GetAccessRequestRequest, v1alpha1.GetAccessRequestResponse](
			httpClient,
			baseURL+AccessRequestServiceGetAccessRequestProcedure,
			connect.WithSchema(accessRequestServiceGetAccessRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAccessRequestActions: connect.NewClient[v1alpha1.GetAccessRequestActionsRequest, v1alpha1.GetAccessRequestActionsResponse](
			httpClient,
			baseURL+AccessRequestServiceGetAccessRequestActionsProcedure,
			connect.WithSchema(accessRequestServiceGetAccessRequestActionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		approveAccessRequest: connect.NewClient[v1alpha1.ApproveAccessRequestRequest, v1alpha1.ApproveAccessRequestResponse](
			httpClient,
			baseURL+AccessRequestServiceApproveAccessRequestProcedure,
			connect.WithSchema(accessRequestServiceApproveAccessRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		activateAccessRequest: connect.NewClient[v1alpha1.ActivateAccessRequestRequest, v1alpha1.ActivateAccessRequestResponse](
			httpClient,
			baseURL+AccessRequestServiceActivateAccessRequestProcedure,
			connect.WithSchema(accessRequestServiceActivateAccessRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		closeAccessRequest: connect.NewClient[v1alpha1.CloseAccessRequestRequest, v1alpha1.CloseAccessRequestResponse](
			httpClient,
			baseURL+AccessRequestServiceCloseAccessRequestProcedure,
			connect.WithSchema(accessRequestServiceCloseAccessRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accessRequestServiceClient implements AccessRequestServiceClient.
type accessRequestServiceClient struct {
	queryAccessRequests     *connect.Client[v1alpha1.QueryAccessRequestsRequest, v1alpha1.QueryAccessRequestsResponse]
	queryMyAccessRequests   *connect.Client[v1alpha1.QueryMyAccessRequestsRequest, v1alpha1.QueryMyAccessRequestsResponse]
	getAccessRequest        *connect.Client[v1alpha1.GetAccessRequestRequest, v1alpha1.GetAccessRequestResponse]
	getAccessRequestActions *connect.Client[v1alpha1.GetAccessRequestActionsRequest, v1alpha1.GetAccessRequestActionsResponse]
	approveAccessRequest    *connect.Client[v1alpha1.ApproveAccessRequestRequest, v1alpha1.ApproveAccessRequestResponse]
	activateAccessRequest   *connect.Client[v1alpha1.ActivateAccessRequestRequest, v1alpha1.ActivateAccessRequestResponse]
	closeAccessRequest      *connect.Client[v1alpha1.CloseAccessRequestRequest, v1alpha1.CloseAccessRequestResponse]
}

// QueryAccessRequests calls commonfate.access.v1alpha1.AccessRequestService.QueryAccessRequests.
func (c *accessRequestServiceClient) QueryAccessRequests(ctx context.Context, req *connect.Request[v1alpha1.QueryAccessRequestsRequest]) (*connect.Response[v1alpha1.QueryAccessRequestsResponse], error) {
	return c.queryAccessRequests.CallUnary(ctx, req)
}

// QueryMyAccessRequests calls
// commonfate.access.v1alpha1.AccessRequestService.QueryMyAccessRequests.
func (c *accessRequestServiceClient) QueryMyAccessRequests(ctx context.Context, req *connect.Request[v1alpha1.QueryMyAccessRequestsRequest]) (*connect.Response[v1alpha1.QueryMyAccessRequestsResponse], error) {
	return c.queryMyAccessRequests.CallUnary(ctx, req)
}

// GetAccessRequest calls commonfate.access.v1alpha1.AccessRequestService.GetAccessRequest.
func (c *accessRequestServiceClient) GetAccessRequest(ctx context.Context, req *connect.Request[v1alpha1.GetAccessRequestRequest]) (*connect.Response[v1alpha1.GetAccessRequestResponse], error) {
	return c.getAccessRequest.CallUnary(ctx, req)
}

// GetAccessRequestActions calls
// commonfate.access.v1alpha1.AccessRequestService.GetAccessRequestActions.
func (c *accessRequestServiceClient) GetAccessRequestActions(ctx context.Context, req *connect.Request[v1alpha1.GetAccessRequestActionsRequest]) (*connect.Response[v1alpha1.GetAccessRequestActionsResponse], error) {
	return c.getAccessRequestActions.CallUnary(ctx, req)
}

// ApproveAccessRequest calls commonfate.access.v1alpha1.AccessRequestService.ApproveAccessRequest.
func (c *accessRequestServiceClient) ApproveAccessRequest(ctx context.Context, req *connect.Request[v1alpha1.ApproveAccessRequestRequest]) (*connect.Response[v1alpha1.ApproveAccessRequestResponse], error) {
	return c.approveAccessRequest.CallUnary(ctx, req)
}

// ActivateAccessRequest calls
// commonfate.access.v1alpha1.AccessRequestService.ActivateAccessRequest.
func (c *accessRequestServiceClient) ActivateAccessRequest(ctx context.Context, req *connect.Request[v1alpha1.ActivateAccessRequestRequest]) (*connect.Response[v1alpha1.ActivateAccessRequestResponse], error) {
	return c.activateAccessRequest.CallUnary(ctx, req)
}

// CloseAccessRequest calls commonfate.access.v1alpha1.AccessRequestService.CloseAccessRequest.
func (c *accessRequestServiceClient) CloseAccessRequest(ctx context.Context, req *connect.Request[v1alpha1.CloseAccessRequestRequest]) (*connect.Response[v1alpha1.CloseAccessRequestResponse], error) {
	return c.closeAccessRequest.CallUnary(ctx, req)
}

// AccessRequestServiceHandler is an implementation of the
// commonfate.access.v1alpha1.AccessRequestService service.
type AccessRequestServiceHandler interface {
	QueryAccessRequests(context.Context, *connect.Request[v1alpha1.QueryAccessRequestsRequest]) (*connect.Response[v1alpha1.QueryAccessRequestsResponse], error)
	// Query the access requests where the user is the principal
	QueryMyAccessRequests(context.Context, *connect.Request[v1alpha1.QueryMyAccessRequestsRequest]) (*connect.Response[v1alpha1.QueryMyAccessRequestsResponse], error)
	GetAccessRequest(context.Context, *connect.Request[v1alpha1.GetAccessRequestRequest]) (*connect.Response[v1alpha1.GetAccessRequestResponse], error)
	// Returns the actions that the current user is allowed to perform on the request
	GetAccessRequestActions(context.Context, *connect.Request[v1alpha1.GetAccessRequestActionsRequest]) (*connect.Response[v1alpha1.GetAccessRequestActionsResponse], error)
	// Approving an Access Request will attempt to approve all of the Grants associated with the request.
	//
	// If the caller is not permitted to approve particular grants, warnings will be returned.
	ApproveAccessRequest(context.Context, *connect.Request[v1alpha1.ApproveAccessRequestRequest]) (*connect.Response[v1alpha1.ApproveAccessRequestResponse], error)
	ActivateAccessRequest(context.Context, *connect.Request[v1alpha1.ActivateAccessRequestRequest]) (*connect.Response[v1alpha1.ActivateAccessRequestResponse], error)
	// Closing an Access Request will make it no longer reviewable and will deactivate any Grants associated with the request.
	CloseAccessRequest(context.Context, *connect.Request[v1alpha1.CloseAccessRequestRequest]) (*connect.Response[v1alpha1.CloseAccessRequestResponse], error)
}

// NewAccessRequestServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccessRequestServiceHandler(svc AccessRequestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accessRequestServiceQueryAccessRequestsHandler := connect.NewUnaryHandler(
		AccessRequestServiceQueryAccessRequestsProcedure,
		svc.QueryAccessRequests,
		connect.WithSchema(accessRequestServiceQueryAccessRequestsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessRequestServiceQueryMyAccessRequestsHandler := connect.NewUnaryHandler(
		AccessRequestServiceQueryMyAccessRequestsProcedure,
		svc.QueryMyAccessRequests,
		connect.WithSchema(accessRequestServiceQueryMyAccessRequestsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessRequestServiceGetAccessRequestHandler := connect.NewUnaryHandler(
		AccessRequestServiceGetAccessRequestProcedure,
		svc.GetAccessRequest,
		connect.WithSchema(accessRequestServiceGetAccessRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessRequestServiceGetAccessRequestActionsHandler := connect.NewUnaryHandler(
		AccessRequestServiceGetAccessRequestActionsProcedure,
		svc.GetAccessRequestActions,
		connect.WithSchema(accessRequestServiceGetAccessRequestActionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessRequestServiceApproveAccessRequestHandler := connect.NewUnaryHandler(
		AccessRequestServiceApproveAccessRequestProcedure,
		svc.ApproveAccessRequest,
		connect.WithSchema(accessRequestServiceApproveAccessRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessRequestServiceActivateAccessRequestHandler := connect.NewUnaryHandler(
		AccessRequestServiceActivateAccessRequestProcedure,
		svc.ActivateAccessRequest,
		connect.WithSchema(accessRequestServiceActivateAccessRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessRequestServiceCloseAccessRequestHandler := connect.NewUnaryHandler(
		AccessRequestServiceCloseAccessRequestProcedure,
		svc.CloseAccessRequest,
		connect.WithSchema(accessRequestServiceCloseAccessRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.access.v1alpha1.AccessRequestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccessRequestServiceQueryAccessRequestsProcedure:
			accessRequestServiceQueryAccessRequestsHandler.ServeHTTP(w, r)
		case AccessRequestServiceQueryMyAccessRequestsProcedure:
			accessRequestServiceQueryMyAccessRequestsHandler.ServeHTTP(w, r)
		case AccessRequestServiceGetAccessRequestProcedure:
			accessRequestServiceGetAccessRequestHandler.ServeHTTP(w, r)
		case AccessRequestServiceGetAccessRequestActionsProcedure:
			accessRequestServiceGetAccessRequestActionsHandler.ServeHTTP(w, r)
		case AccessRequestServiceApproveAccessRequestProcedure:
			accessRequestServiceApproveAccessRequestHandler.ServeHTTP(w, r)
		case AccessRequestServiceActivateAccessRequestProcedure:
			accessRequestServiceActivateAccessRequestHandler.ServeHTTP(w, r)
		case AccessRequestServiceCloseAccessRequestProcedure:
			accessRequestServiceCloseAccessRequestHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccessRequestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccessRequestServiceHandler struct{}

func (UnimplementedAccessRequestServiceHandler) QueryAccessRequests(context.Context, *connect.Request[v1alpha1.QueryAccessRequestsRequest]) (*connect.Response[v1alpha1.QueryAccessRequestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessRequestService.QueryAccessRequests is not implemented"))
}

func (UnimplementedAccessRequestServiceHandler) QueryMyAccessRequests(context.Context, *connect.Request[v1alpha1.QueryMyAccessRequestsRequest]) (*connect.Response[v1alpha1.QueryMyAccessRequestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessRequestService.QueryMyAccessRequests is not implemented"))
}

func (UnimplementedAccessRequestServiceHandler) GetAccessRequest(context.Context, *connect.Request[v1alpha1.GetAccessRequestRequest]) (*connect.Response[v1alpha1.GetAccessRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessRequestService.GetAccessRequest is not implemented"))
}

func (UnimplementedAccessRequestServiceHandler) GetAccessRequestActions(context.Context, *connect.Request[v1alpha1.GetAccessRequestActionsRequest]) (*connect.Response[v1alpha1.GetAccessRequestActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessRequestService.GetAccessRequestActions is not implemented"))
}

func (UnimplementedAccessRequestServiceHandler) ApproveAccessRequest(context.Context, *connect.Request[v1alpha1.ApproveAccessRequestRequest]) (*connect.Response[v1alpha1.ApproveAccessRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessRequestService.ApproveAccessRequest is not implemented"))
}

func (UnimplementedAccessRequestServiceHandler) ActivateAccessRequest(context.Context, *connect.Request[v1alpha1.ActivateAccessRequestRequest]) (*connect.Response[v1alpha1.ActivateAccessRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessRequestService.ActivateAccessRequest is not implemented"))
}

func (UnimplementedAccessRequestServiceHandler) CloseAccessRequest(context.Context, *connect.Request[v1alpha1.CloseAccessRequestRequest]) (*connect.Response[v1alpha1.CloseAccessRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessRequestService.CloseAccessRequest is not implemented"))
}
