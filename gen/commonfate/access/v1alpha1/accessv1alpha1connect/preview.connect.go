// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v1alpha1/preview.proto

package accessv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PreviewServiceName is the fully-qualified name of the PreviewService service.
	PreviewServiceName = "commonfate.access.v1alpha1.PreviewService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PreviewServiceQueryApproversProcedure is the fully-qualified name of the PreviewService's
	// QueryApprovers RPC.
	PreviewServiceQueryApproversProcedure = "/commonfate.access.v1alpha1.PreviewService/QueryApprovers"
	// PreviewServicePreviewUserAccessProcedure is the fully-qualified name of the PreviewService's
	// PreviewUserAccess RPC.
	PreviewServicePreviewUserAccessProcedure = "/commonfate.access.v1alpha1.PreviewService/PreviewUserAccess"
	// PreviewServicePreviewEntitlementAccessProcedure is the fully-qualified name of the
	// PreviewService's PreviewEntitlementAccess RPC.
	PreviewServicePreviewEntitlementAccessProcedure = "/commonfate.access.v1alpha1.PreviewService/PreviewEntitlementAccess"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	previewServiceServiceDescriptor                        = v1alpha1.File_commonfate_access_v1alpha1_preview_proto.Services().ByName("PreviewService")
	previewServiceQueryApproversMethodDescriptor           = previewServiceServiceDescriptor.Methods().ByName("QueryApprovers")
	previewServicePreviewUserAccessMethodDescriptor        = previewServiceServiceDescriptor.Methods().ByName("PreviewUserAccess")
	previewServicePreviewEntitlementAccessMethodDescriptor = previewServiceServiceDescriptor.Methods().ByName("PreviewEntitlementAccess")
)

// PreviewServiceClient is a client for the commonfate.access.v1alpha1.PreviewService service.
type PreviewServiceClient interface {
	QueryApprovers(context.Context, *connect.Request[v1alpha1.QueryApproversRequest]) (*connect.Response[v1alpha1.QueryApproversResponse], error)
	PreviewUserAccess(context.Context, *connect.Request[v1alpha1.PreviewUserAccessRequest]) (*connect.Response[v1alpha1.PreviewUserAccessResponse], error)
	PreviewEntitlementAccess(context.Context, *connect.Request[v1alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v1alpha1.PreviewEntitlementAccessResponse], error)
}

// NewPreviewServiceClient constructs a client for the commonfate.access.v1alpha1.PreviewService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPreviewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PreviewServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &previewServiceClient{
		queryApprovers: connect.NewClient[v1alpha1.QueryApproversRequest, v1alpha1.QueryApproversResponse](
			httpClient,
			baseURL+PreviewServiceQueryApproversProcedure,
			connect.WithSchema(previewServiceQueryApproversMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		previewUserAccess: connect.NewClient[v1alpha1.PreviewUserAccessRequest, v1alpha1.PreviewUserAccessResponse](
			httpClient,
			baseURL+PreviewServicePreviewUserAccessProcedure,
			connect.WithSchema(previewServicePreviewUserAccessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		previewEntitlementAccess: connect.NewClient[v1alpha1.PreviewEntitlementAccessRequest, v1alpha1.PreviewEntitlementAccessResponse](
			httpClient,
			baseURL+PreviewServicePreviewEntitlementAccessProcedure,
			connect.WithSchema(previewServicePreviewEntitlementAccessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// previewServiceClient implements PreviewServiceClient.
type previewServiceClient struct {
	queryApprovers           *connect.Client[v1alpha1.QueryApproversRequest, v1alpha1.QueryApproversResponse]
	previewUserAccess        *connect.Client[v1alpha1.PreviewUserAccessRequest, v1alpha1.PreviewUserAccessResponse]
	previewEntitlementAccess *connect.Client[v1alpha1.PreviewEntitlementAccessRequest, v1alpha1.PreviewEntitlementAccessResponse]
}

// QueryApprovers calls commonfate.access.v1alpha1.PreviewService.QueryApprovers.
func (c *previewServiceClient) QueryApprovers(ctx context.Context, req *connect.Request[v1alpha1.QueryApproversRequest]) (*connect.Response[v1alpha1.QueryApproversResponse], error) {
	return c.queryApprovers.CallUnary(ctx, req)
}

// PreviewUserAccess calls commonfate.access.v1alpha1.PreviewService.PreviewUserAccess.
func (c *previewServiceClient) PreviewUserAccess(ctx context.Context, req *connect.Request[v1alpha1.PreviewUserAccessRequest]) (*connect.Response[v1alpha1.PreviewUserAccessResponse], error) {
	return c.previewUserAccess.CallUnary(ctx, req)
}

// PreviewEntitlementAccess calls
// commonfate.access.v1alpha1.PreviewService.PreviewEntitlementAccess.
func (c *previewServiceClient) PreviewEntitlementAccess(ctx context.Context, req *connect.Request[v1alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v1alpha1.PreviewEntitlementAccessResponse], error) {
	return c.previewEntitlementAccess.CallUnary(ctx, req)
}

// PreviewServiceHandler is an implementation of the commonfate.access.v1alpha1.PreviewService
// service.
type PreviewServiceHandler interface {
	QueryApprovers(context.Context, *connect.Request[v1alpha1.QueryApproversRequest]) (*connect.Response[v1alpha1.QueryApproversResponse], error)
	PreviewUserAccess(context.Context, *connect.Request[v1alpha1.PreviewUserAccessRequest]) (*connect.Response[v1alpha1.PreviewUserAccessResponse], error)
	PreviewEntitlementAccess(context.Context, *connect.Request[v1alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v1alpha1.PreviewEntitlementAccessResponse], error)
}

// NewPreviewServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPreviewServiceHandler(svc PreviewServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	previewServiceQueryApproversHandler := connect.NewUnaryHandler(
		PreviewServiceQueryApproversProcedure,
		svc.QueryApprovers,
		connect.WithSchema(previewServiceQueryApproversMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	previewServicePreviewUserAccessHandler := connect.NewUnaryHandler(
		PreviewServicePreviewUserAccessProcedure,
		svc.PreviewUserAccess,
		connect.WithSchema(previewServicePreviewUserAccessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	previewServicePreviewEntitlementAccessHandler := connect.NewUnaryHandler(
		PreviewServicePreviewEntitlementAccessProcedure,
		svc.PreviewEntitlementAccess,
		connect.WithSchema(previewServicePreviewEntitlementAccessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.access.v1alpha1.PreviewService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PreviewServiceQueryApproversProcedure:
			previewServiceQueryApproversHandler.ServeHTTP(w, r)
		case PreviewServicePreviewUserAccessProcedure:
			previewServicePreviewUserAccessHandler.ServeHTTP(w, r)
		case PreviewServicePreviewEntitlementAccessProcedure:
			previewServicePreviewEntitlementAccessHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPreviewServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPreviewServiceHandler struct{}

func (UnimplementedPreviewServiceHandler) QueryApprovers(context.Context, *connect.Request[v1alpha1.QueryApproversRequest]) (*connect.Response[v1alpha1.QueryApproversResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.PreviewService.QueryApprovers is not implemented"))
}

func (UnimplementedPreviewServiceHandler) PreviewUserAccess(context.Context, *connect.Request[v1alpha1.PreviewUserAccessRequest]) (*connect.Response[v1alpha1.PreviewUserAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.PreviewService.PreviewUserAccess is not implemented"))
}

func (UnimplementedPreviewServiceHandler) PreviewEntitlementAccess(context.Context, *connect.Request[v1alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v1alpha1.PreviewEntitlementAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.PreviewService.PreviewEntitlementAccess is not implemented"))
}
