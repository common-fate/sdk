// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v1alpha1/attachments.proto

package accessv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AttachmentsServiceName is the fully-qualified name of the AttachmentsService service.
	AttachmentsServiceName = "commonfate.access.v1alpha1.AttachmentsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AttachmentsServiceQueryJiraIssuesProcedure is the fully-qualified name of the
	// AttachmentsService's QueryJiraIssues RPC.
	AttachmentsServiceQueryJiraIssuesProcedure = "/commonfate.access.v1alpha1.AttachmentsService/QueryJiraIssues"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	attachmentsServiceServiceDescriptor               = v1alpha1.File_commonfate_access_v1alpha1_attachments_proto.Services().ByName("AttachmentsService")
	attachmentsServiceQueryJiraIssuesMethodDescriptor = attachmentsServiceServiceDescriptor.Methods().ByName("QueryJiraIssues")
)

// AttachmentsServiceClient is a client for the commonfate.access.v1alpha1.AttachmentsService
// service.
type AttachmentsServiceClient interface {
	QueryJiraIssues(context.Context, *connect.Request[v1alpha1.QueryJiraIssuesRequest]) (*connect.Response[v1alpha1.QueryJiraIssuesResponse], error)
}

// NewAttachmentsServiceClient constructs a client for the
// commonfate.access.v1alpha1.AttachmentsService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAttachmentsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AttachmentsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &attachmentsServiceClient{
		queryJiraIssues: connect.NewClient[v1alpha1.QueryJiraIssuesRequest, v1alpha1.QueryJiraIssuesResponse](
			httpClient,
			baseURL+AttachmentsServiceQueryJiraIssuesProcedure,
			connect.WithSchema(attachmentsServiceQueryJiraIssuesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// attachmentsServiceClient implements AttachmentsServiceClient.
type attachmentsServiceClient struct {
	queryJiraIssues *connect.Client[v1alpha1.QueryJiraIssuesRequest, v1alpha1.QueryJiraIssuesResponse]
}

// QueryJiraIssues calls commonfate.access.v1alpha1.AttachmentsService.QueryJiraIssues.
func (c *attachmentsServiceClient) QueryJiraIssues(ctx context.Context, req *connect.Request[v1alpha1.QueryJiraIssuesRequest]) (*connect.Response[v1alpha1.QueryJiraIssuesResponse], error) {
	return c.queryJiraIssues.CallUnary(ctx, req)
}

// AttachmentsServiceHandler is an implementation of the
// commonfate.access.v1alpha1.AttachmentsService service.
type AttachmentsServiceHandler interface {
	QueryJiraIssues(context.Context, *connect.Request[v1alpha1.QueryJiraIssuesRequest]) (*connect.Response[v1alpha1.QueryJiraIssuesResponse], error)
}

// NewAttachmentsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAttachmentsServiceHandler(svc AttachmentsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	attachmentsServiceQueryJiraIssuesHandler := connect.NewUnaryHandler(
		AttachmentsServiceQueryJiraIssuesProcedure,
		svc.QueryJiraIssues,
		connect.WithSchema(attachmentsServiceQueryJiraIssuesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.access.v1alpha1.AttachmentsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AttachmentsServiceQueryJiraIssuesProcedure:
			attachmentsServiceQueryJiraIssuesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAttachmentsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAttachmentsServiceHandler struct{}

func (UnimplementedAttachmentsServiceHandler) QueryJiraIssues(context.Context, *connect.Request[v1alpha1.QueryJiraIssuesRequest]) (*connect.Response[v1alpha1.QueryJiraIssuesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AttachmentsService.QueryJiraIssues is not implemented"))
}
