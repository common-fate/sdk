// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v1alpha1/integration_audit_logs.proto

package accessv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IntegrationAuditLogServiceName is the fully-qualified name of the IntegrationAuditLogService
	// service.
	IntegrationAuditLogServiceName = "commonfate.access.v1alpha1.IntegrationAuditLogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntegrationAuditLogServiceBatchPutAuditLogProcedure is the fully-qualified name of the
	// IntegrationAuditLogService's BatchPutAuditLog RPC.
	IntegrationAuditLogServiceBatchPutAuditLogProcedure = "/commonfate.access.v1alpha1.IntegrationAuditLogService/BatchPutAuditLog"
)

// IntegrationAuditLogServiceClient is a client for the
// commonfate.access.v1alpha1.IntegrationAuditLogService service.
type IntegrationAuditLogServiceClient interface {
	// Put audit logs relating to a grant
	BatchPutAuditLog(context.Context, *connect_go.Request[v1alpha1.BatchPutAuditLogRequest]) (*connect_go.Response[v1alpha1.BatchPutAuditLogResponse], error)
}

// NewIntegrationAuditLogServiceClient constructs a client for the
// commonfate.access.v1alpha1.IntegrationAuditLogService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationAuditLogServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IntegrationAuditLogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &integrationAuditLogServiceClient{
		batchPutAuditLog: connect_go.NewClient[v1alpha1.BatchPutAuditLogRequest, v1alpha1.BatchPutAuditLogResponse](
			httpClient,
			baseURL+IntegrationAuditLogServiceBatchPutAuditLogProcedure,
			opts...,
		),
	}
}

// integrationAuditLogServiceClient implements IntegrationAuditLogServiceClient.
type integrationAuditLogServiceClient struct {
	batchPutAuditLog *connect_go.Client[v1alpha1.BatchPutAuditLogRequest, v1alpha1.BatchPutAuditLogResponse]
}

// BatchPutAuditLog calls commonfate.access.v1alpha1.IntegrationAuditLogService.BatchPutAuditLog.
func (c *integrationAuditLogServiceClient) BatchPutAuditLog(ctx context.Context, req *connect_go.Request[v1alpha1.BatchPutAuditLogRequest]) (*connect_go.Response[v1alpha1.BatchPutAuditLogResponse], error) {
	return c.batchPutAuditLog.CallUnary(ctx, req)
}

// IntegrationAuditLogServiceHandler is an implementation of the
// commonfate.access.v1alpha1.IntegrationAuditLogService service.
type IntegrationAuditLogServiceHandler interface {
	// Put audit logs relating to a grant
	BatchPutAuditLog(context.Context, *connect_go.Request[v1alpha1.BatchPutAuditLogRequest]) (*connect_go.Response[v1alpha1.BatchPutAuditLogResponse], error)
}

// NewIntegrationAuditLogServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationAuditLogServiceHandler(svc IntegrationAuditLogServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	integrationAuditLogServiceBatchPutAuditLogHandler := connect_go.NewUnaryHandler(
		IntegrationAuditLogServiceBatchPutAuditLogProcedure,
		svc.BatchPutAuditLog,
		opts...,
	)
	return "/commonfate.access.v1alpha1.IntegrationAuditLogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntegrationAuditLogServiceBatchPutAuditLogProcedure:
			integrationAuditLogServiceBatchPutAuditLogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntegrationAuditLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationAuditLogServiceHandler struct{}

func (UnimplementedIntegrationAuditLogServiceHandler) BatchPutAuditLog(context.Context, *connect_go.Request[v1alpha1.BatchPutAuditLogRequest]) (*connect_go.Response[v1alpha1.BatchPutAuditLogResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.IntegrationAuditLogService.BatchPutAuditLog is not implemented"))
}
