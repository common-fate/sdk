// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v1alpha1/access.proto

package accessv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AccessServiceName is the fully-qualified name of the AccessService service.
	AccessServiceName = "commonfate.access.v1alpha1.AccessService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccessServiceEnsureProcedure is the fully-qualified name of the AccessService's Ensure RPC.
	AccessServiceEnsureProcedure = "/commonfate.access.v1alpha1.AccessService/Ensure"
	// AccessServiceBatchEnsureProcedure is the fully-qualified name of the AccessService's BatchEnsure
	// RPC.
	AccessServiceBatchEnsureProcedure = "/commonfate.access.v1alpha1.AccessService/BatchEnsure"
	// AccessServiceQueryAvailabilitiesProcedure is the fully-qualified name of the AccessService's
	// QueryAvailabilities RPC.
	AccessServiceQueryAvailabilitiesProcedure = "/commonfate.access.v1alpha1.AccessService/QueryAvailabilities"
)

// AccessServiceClient is a client for the commonfate.access.v1alpha1.AccessService service.
type AccessServiceClient interface {
	// Ensure is a high-level declarative API which can be called to ensure access has been provisioned to an entitlement.
	//
	// The method checks whether the entitlement has been provisioned to the user.
	// If the entitlement has not been provisioned, an Access Request will be created for the entitlement.
	// If a pending Access Request exists for the entitlement, this request is returned.
	//
	// In future, this method may trigger an extension to any Access Requests which are due to expire.
	//
	// This method is used by the Common Fate CLI in commands like 'cf exec gcp -- <command>' to ensure access
	// is provisioned prior to running a command.
	Ensure(context.Context, *connect_go.Request[v1alpha1.EnsureRequest]) (*connect_go.Response[v1alpha1.EnsureResponse], error)
	// BatchEnsure is a high-level declarative API which can be called to ensure access has been provisioned to multiple entitlements.
	//
	// The method checks whether the entitlement has been provisioned to the user.
	// If the entitlement has not been provisioned, an Access Request will be created for the entitlement.
	// If a pending Access Request exists for the entitlement, this request is returned.
	//
	// In future, this method may trigger an extension to any Access Requests which are due to expire.
	BatchEnsure(context.Context, *connect_go.Request[v1alpha1.BatchEnsureRequest]) (*connect_go.Response[v1alpha1.BatchEnsureResponse], error)
	// Query for JIT availabilities.
	QueryAvailabilities(context.Context, *connect_go.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect_go.Response[v1alpha1.QueryAvailabilitiesResponse], error)
}

// NewAccessServiceClient constructs a client for the commonfate.access.v1alpha1.AccessService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccessServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AccessServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accessServiceClient{
		ensure: connect_go.NewClient[v1alpha1.EnsureRequest, v1alpha1.EnsureResponse](
			httpClient,
			baseURL+AccessServiceEnsureProcedure,
			opts...,
		),
		batchEnsure: connect_go.NewClient[v1alpha1.BatchEnsureRequest, v1alpha1.BatchEnsureResponse](
			httpClient,
			baseURL+AccessServiceBatchEnsureProcedure,
			opts...,
		),
		queryAvailabilities: connect_go.NewClient[v1alpha1.QueryAvailabilitiesRequest, v1alpha1.QueryAvailabilitiesResponse](
			httpClient,
			baseURL+AccessServiceQueryAvailabilitiesProcedure,
			opts...,
		),
	}
}

// accessServiceClient implements AccessServiceClient.
type accessServiceClient struct {
	ensure              *connect_go.Client[v1alpha1.EnsureRequest, v1alpha1.EnsureResponse]
	batchEnsure         *connect_go.Client[v1alpha1.BatchEnsureRequest, v1alpha1.BatchEnsureResponse]
	queryAvailabilities *connect_go.Client[v1alpha1.QueryAvailabilitiesRequest, v1alpha1.QueryAvailabilitiesResponse]
}

// Ensure calls commonfate.access.v1alpha1.AccessService.Ensure.
func (c *accessServiceClient) Ensure(ctx context.Context, req *connect_go.Request[v1alpha1.EnsureRequest]) (*connect_go.Response[v1alpha1.EnsureResponse], error) {
	return c.ensure.CallUnary(ctx, req)
}

// BatchEnsure calls commonfate.access.v1alpha1.AccessService.BatchEnsure.
func (c *accessServiceClient) BatchEnsure(ctx context.Context, req *connect_go.Request[v1alpha1.BatchEnsureRequest]) (*connect_go.Response[v1alpha1.BatchEnsureResponse], error) {
	return c.batchEnsure.CallUnary(ctx, req)
}

// QueryAvailabilities calls commonfate.access.v1alpha1.AccessService.QueryAvailabilities.
func (c *accessServiceClient) QueryAvailabilities(ctx context.Context, req *connect_go.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect_go.Response[v1alpha1.QueryAvailabilitiesResponse], error) {
	return c.queryAvailabilities.CallUnary(ctx, req)
}

// AccessServiceHandler is an implementation of the commonfate.access.v1alpha1.AccessService
// service.
type AccessServiceHandler interface {
	// Ensure is a high-level declarative API which can be called to ensure access has been provisioned to an entitlement.
	//
	// The method checks whether the entitlement has been provisioned to the user.
	// If the entitlement has not been provisioned, an Access Request will be created for the entitlement.
	// If a pending Access Request exists for the entitlement, this request is returned.
	//
	// In future, this method may trigger an extension to any Access Requests which are due to expire.
	//
	// This method is used by the Common Fate CLI in commands like 'cf exec gcp -- <command>' to ensure access
	// is provisioned prior to running a command.
	Ensure(context.Context, *connect_go.Request[v1alpha1.EnsureRequest]) (*connect_go.Response[v1alpha1.EnsureResponse], error)
	// BatchEnsure is a high-level declarative API which can be called to ensure access has been provisioned to multiple entitlements.
	//
	// The method checks whether the entitlement has been provisioned to the user.
	// If the entitlement has not been provisioned, an Access Request will be created for the entitlement.
	// If a pending Access Request exists for the entitlement, this request is returned.
	//
	// In future, this method may trigger an extension to any Access Requests which are due to expire.
	BatchEnsure(context.Context, *connect_go.Request[v1alpha1.BatchEnsureRequest]) (*connect_go.Response[v1alpha1.BatchEnsureResponse], error)
	// Query for JIT availabilities.
	QueryAvailabilities(context.Context, *connect_go.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect_go.Response[v1alpha1.QueryAvailabilitiesResponse], error)
}

// NewAccessServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccessServiceHandler(svc AccessServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	accessServiceEnsureHandler := connect_go.NewUnaryHandler(
		AccessServiceEnsureProcedure,
		svc.Ensure,
		opts...,
	)
	accessServiceBatchEnsureHandler := connect_go.NewUnaryHandler(
		AccessServiceBatchEnsureProcedure,
		svc.BatchEnsure,
		opts...,
	)
	accessServiceQueryAvailabilitiesHandler := connect_go.NewUnaryHandler(
		AccessServiceQueryAvailabilitiesProcedure,
		svc.QueryAvailabilities,
		opts...,
	)
	return "/commonfate.access.v1alpha1.AccessService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccessServiceEnsureProcedure:
			accessServiceEnsureHandler.ServeHTTP(w, r)
		case AccessServiceBatchEnsureProcedure:
			accessServiceBatchEnsureHandler.ServeHTTP(w, r)
		case AccessServiceQueryAvailabilitiesProcedure:
			accessServiceQueryAvailabilitiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccessServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccessServiceHandler struct{}

func (UnimplementedAccessServiceHandler) Ensure(context.Context, *connect_go.Request[v1alpha1.EnsureRequest]) (*connect_go.Response[v1alpha1.EnsureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessService.Ensure is not implemented"))
}

func (UnimplementedAccessServiceHandler) BatchEnsure(context.Context, *connect_go.Request[v1alpha1.BatchEnsureRequest]) (*connect_go.Response[v1alpha1.BatchEnsureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessService.BatchEnsure is not implemented"))
}

func (UnimplementedAccessServiceHandler) QueryAvailabilities(context.Context, *connect_go.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect_go.Response[v1alpha1.QueryAvailabilitiesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessService.QueryAvailabilities is not implemented"))
}
