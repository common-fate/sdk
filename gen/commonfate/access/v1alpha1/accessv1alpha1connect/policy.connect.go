// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v1alpha1/policy.proto

package accessv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PolicyServiceName is the fully-qualified name of the PolicyService service.
	PolicyServiceName = "commonfate.cloud.access.v1alpha1.PolicyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PolicyServiceSetPolicyProcedure is the fully-qualified name of the PolicyService's SetPolicy RPC.
	PolicyServiceSetPolicyProcedure = "/commonfate.cloud.access.v1alpha1.PolicyService/SetPolicy"
)

// PolicyServiceClient is a client for the commonfate.cloud.access.v1alpha1.PolicyService service.
type PolicyServiceClient interface {
	SetPolicy(context.Context, *connect_go.Request[v1alpha1.SetPolicyRequest]) (*connect_go.Response[v1alpha1.SetPolicyResponse], error)
}

// NewPolicyServiceClient constructs a client for the commonfate.cloud.access.v1alpha1.PolicyService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPolicyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PolicyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &policyServiceClient{
		setPolicy: connect_go.NewClient[v1alpha1.SetPolicyRequest, v1alpha1.SetPolicyResponse](
			httpClient,
			baseURL+PolicyServiceSetPolicyProcedure,
			opts...,
		),
	}
}

// policyServiceClient implements PolicyServiceClient.
type policyServiceClient struct {
	setPolicy *connect_go.Client[v1alpha1.SetPolicyRequest, v1alpha1.SetPolicyResponse]
}

// SetPolicy calls commonfate.cloud.access.v1alpha1.PolicyService.SetPolicy.
func (c *policyServiceClient) SetPolicy(ctx context.Context, req *connect_go.Request[v1alpha1.SetPolicyRequest]) (*connect_go.Response[v1alpha1.SetPolicyResponse], error) {
	return c.setPolicy.CallUnary(ctx, req)
}

// PolicyServiceHandler is an implementation of the commonfate.cloud.access.v1alpha1.PolicyService
// service.
type PolicyServiceHandler interface {
	SetPolicy(context.Context, *connect_go.Request[v1alpha1.SetPolicyRequest]) (*connect_go.Response[v1alpha1.SetPolicyResponse], error)
}

// NewPolicyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPolicyServiceHandler(svc PolicyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	policyServiceSetPolicyHandler := connect_go.NewUnaryHandler(
		PolicyServiceSetPolicyProcedure,
		svc.SetPolicy,
		opts...,
	)
	return "/commonfate.cloud.access.v1alpha1.PolicyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PolicyServiceSetPolicyProcedure:
			policyServiceSetPolicyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPolicyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPolicyServiceHandler struct{}

func (UnimplementedPolicyServiceHandler) SetPolicy(context.Context, *connect_go.Request[v1alpha1.SetPolicyRequest]) (*connect_go.Response[v1alpha1.SetPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.cloud.access.v1alpha1.PolicyService.SetPolicy is not implemented"))
}
