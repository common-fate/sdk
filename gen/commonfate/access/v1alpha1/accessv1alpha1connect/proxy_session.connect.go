// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v1alpha1/proxy_session.proto

package accessv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProxySessionServiceName is the fully-qualified name of the ProxySessionService service.
	ProxySessionServiceName = "commonfate.access.v1alpha1.ProxySessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProxySessionServiceStartSessionProcedure is the fully-qualified name of the ProxySessionService's
	// StartSession RPC.
	ProxySessionServiceStartSessionProcedure = "/commonfate.access.v1alpha1.ProxySessionService/StartSession"
	// ProxySessionServiceEndSessionProcedure is the fully-qualified name of the ProxySessionService's
	// EndSession RPC.
	ProxySessionServiceEndSessionProcedure = "/commonfate.access.v1alpha1.ProxySessionService/EndSession"
	// ProxySessionServicePutSessionLogProcedure is the fully-qualified name of the
	// ProxySessionService's PutSessionLog RPC.
	ProxySessionServicePutSessionLogProcedure = "/commonfate.access.v1alpha1.ProxySessionService/PutSessionLog"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	proxySessionServiceServiceDescriptor             = v1alpha1.File_commonfate_access_v1alpha1_proxy_session_proto.Services().ByName("ProxySessionService")
	proxySessionServiceStartSessionMethodDescriptor  = proxySessionServiceServiceDescriptor.Methods().ByName("StartSession")
	proxySessionServiceEndSessionMethodDescriptor    = proxySessionServiceServiceDescriptor.Methods().ByName("EndSession")
	proxySessionServicePutSessionLogMethodDescriptor = proxySessionServiceServiceDescriptor.Methods().ByName("PutSessionLog")
)

// ProxySessionServiceClient is a client for the commonfate.access.v1alpha1.ProxySessionService
// service.
type ProxySessionServiceClient interface {
	StartSession(context.Context, *connect.Request[v1alpha1.StartSessionRequest]) (*connect.Response[v1alpha1.StartSessionResponse], error)
	EndSession(context.Context, *connect.Request[v1alpha1.EndSessionRequest]) (*connect.Response[v1alpha1.EndSessionResponse], error)
	PutSessionLog(context.Context, *connect.Request[v1alpha1.PutSessionLogRequest]) (*connect.Response[v1alpha1.PutSessionLogResponse], error)
}

// NewProxySessionServiceClient constructs a client for the
// commonfate.access.v1alpha1.ProxySessionService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProxySessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProxySessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &proxySessionServiceClient{
		startSession: connect.NewClient[v1alpha1.StartSessionRequest, v1alpha1.StartSessionResponse](
			httpClient,
			baseURL+ProxySessionServiceStartSessionProcedure,
			connect.WithSchema(proxySessionServiceStartSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		endSession: connect.NewClient[v1alpha1.EndSessionRequest, v1alpha1.EndSessionResponse](
			httpClient,
			baseURL+ProxySessionServiceEndSessionProcedure,
			connect.WithSchema(proxySessionServiceEndSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putSessionLog: connect.NewClient[v1alpha1.PutSessionLogRequest, v1alpha1.PutSessionLogResponse](
			httpClient,
			baseURL+ProxySessionServicePutSessionLogProcedure,
			connect.WithSchema(proxySessionServicePutSessionLogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// proxySessionServiceClient implements ProxySessionServiceClient.
type proxySessionServiceClient struct {
	startSession  *connect.Client[v1alpha1.StartSessionRequest, v1alpha1.StartSessionResponse]
	endSession    *connect.Client[v1alpha1.EndSessionRequest, v1alpha1.EndSessionResponse]
	putSessionLog *connect.Client[v1alpha1.PutSessionLogRequest, v1alpha1.PutSessionLogResponse]
}

// StartSession calls commonfate.access.v1alpha1.ProxySessionService.StartSession.
func (c *proxySessionServiceClient) StartSession(ctx context.Context, req *connect.Request[v1alpha1.StartSessionRequest]) (*connect.Response[v1alpha1.StartSessionResponse], error) {
	return c.startSession.CallUnary(ctx, req)
}

// EndSession calls commonfate.access.v1alpha1.ProxySessionService.EndSession.
func (c *proxySessionServiceClient) EndSession(ctx context.Context, req *connect.Request[v1alpha1.EndSessionRequest]) (*connect.Response[v1alpha1.EndSessionResponse], error) {
	return c.endSession.CallUnary(ctx, req)
}

// PutSessionLog calls commonfate.access.v1alpha1.ProxySessionService.PutSessionLog.
func (c *proxySessionServiceClient) PutSessionLog(ctx context.Context, req *connect.Request[v1alpha1.PutSessionLogRequest]) (*connect.Response[v1alpha1.PutSessionLogResponse], error) {
	return c.putSessionLog.CallUnary(ctx, req)
}

// ProxySessionServiceHandler is an implementation of the
// commonfate.access.v1alpha1.ProxySessionService service.
type ProxySessionServiceHandler interface {
	StartSession(context.Context, *connect.Request[v1alpha1.StartSessionRequest]) (*connect.Response[v1alpha1.StartSessionResponse], error)
	EndSession(context.Context, *connect.Request[v1alpha1.EndSessionRequest]) (*connect.Response[v1alpha1.EndSessionResponse], error)
	PutSessionLog(context.Context, *connect.Request[v1alpha1.PutSessionLogRequest]) (*connect.Response[v1alpha1.PutSessionLogResponse], error)
}

// NewProxySessionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProxySessionServiceHandler(svc ProxySessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	proxySessionServiceStartSessionHandler := connect.NewUnaryHandler(
		ProxySessionServiceStartSessionProcedure,
		svc.StartSession,
		connect.WithSchema(proxySessionServiceStartSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServiceEndSessionHandler := connect.NewUnaryHandler(
		ProxySessionServiceEndSessionProcedure,
		svc.EndSession,
		connect.WithSchema(proxySessionServiceEndSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServicePutSessionLogHandler := connect.NewUnaryHandler(
		ProxySessionServicePutSessionLogProcedure,
		svc.PutSessionLog,
		connect.WithSchema(proxySessionServicePutSessionLogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.access.v1alpha1.ProxySessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProxySessionServiceStartSessionProcedure:
			proxySessionServiceStartSessionHandler.ServeHTTP(w, r)
		case ProxySessionServiceEndSessionProcedure:
			proxySessionServiceEndSessionHandler.ServeHTTP(w, r)
		case ProxySessionServicePutSessionLogProcedure:
			proxySessionServicePutSessionLogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProxySessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProxySessionServiceHandler struct{}

func (UnimplementedProxySessionServiceHandler) StartSession(context.Context, *connect.Request[v1alpha1.StartSessionRequest]) (*connect.Response[v1alpha1.StartSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.StartSession is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) EndSession(context.Context, *connect.Request[v1alpha1.EndSessionRequest]) (*connect.Response[v1alpha1.EndSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.EndSession is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) PutSessionLog(context.Context, *connect.Request[v1alpha1.PutSessionLogRequest]) (*connect.Response[v1alpha1.PutSessionLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.PutSessionLog is not implemented"))
}
