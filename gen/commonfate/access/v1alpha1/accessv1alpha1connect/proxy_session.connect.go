// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v1alpha1/proxy_session.proto

package accessv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProxySessionServiceName is the fully-qualified name of the ProxySessionService service.
	ProxySessionServiceName = "commonfate.access.v1alpha1.ProxySessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProxySessionServiceStartSessionProcedure is the fully-qualified name of the ProxySessionService's
	// StartSession RPC.
	ProxySessionServiceStartSessionProcedure = "/commonfate.access.v1alpha1.ProxySessionService/StartSession"
	// ProxySessionServiceEndSessionProcedure is the fully-qualified name of the ProxySessionService's
	// EndSession RPC.
	ProxySessionServiceEndSessionProcedure = "/commonfate.access.v1alpha1.ProxySessionService/EndSession"
	// ProxySessionServicePutSessionLogProcedure is the fully-qualified name of the
	// ProxySessionService's PutSessionLog RPC.
	ProxySessionServicePutSessionLogProcedure = "/commonfate.access.v1alpha1.ProxySessionService/PutSessionLog"
	// ProxySessionServiceQuerySessionLogsProcedure is the fully-qualified name of the
	// ProxySessionService's QuerySessionLogs RPC.
	ProxySessionServiceQuerySessionLogsProcedure = "/commonfate.access.v1alpha1.ProxySessionService/QuerySessionLogs"
	// ProxySessionServiceQuerySessionLogsForSessionProcedure is the fully-qualified name of the
	// ProxySessionService's QuerySessionLogsForSession RPC.
	ProxySessionServiceQuerySessionLogsForSessionProcedure = "/commonfate.access.v1alpha1.ProxySessionService/QuerySessionLogsForSession"
	// ProxySessionServiceGetSessionProcedure is the fully-qualified name of the ProxySessionService's
	// GetSession RPC.
	ProxySessionServiceGetSessionProcedure = "/commonfate.access.v1alpha1.ProxySessionService/GetSession"
	// ProxySessionServiceStartShellSessionProcedure is the fully-qualified name of the
	// ProxySessionService's StartShellSession RPC.
	ProxySessionServiceStartShellSessionProcedure = "/commonfate.access.v1alpha1.ProxySessionService/StartShellSession"
	// ProxySessionServiceEndShellSessionProcedure is the fully-qualified name of the
	// ProxySessionService's EndShellSession RPC.
	ProxySessionServiceEndShellSessionProcedure = "/commonfate.access.v1alpha1.ProxySessionService/EndShellSession"
	// ProxySessionServicePutShellSessionChunkProcedure is the fully-qualified name of the
	// ProxySessionService's PutShellSessionChunk RPC.
	ProxySessionServicePutShellSessionChunkProcedure = "/commonfate.access.v1alpha1.ProxySessionService/PutShellSessionChunk"
	// ProxySessionServiceGetShellSessionProcedure is the fully-qualified name of the
	// ProxySessionService's GetShellSession RPC.
	ProxySessionServiceGetShellSessionProcedure = "/commonfate.access.v1alpha1.ProxySessionService/GetShellSession"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	proxySessionServiceServiceDescriptor                          = v1alpha1.File_commonfate_access_v1alpha1_proxy_session_proto.Services().ByName("ProxySessionService")
	proxySessionServiceStartSessionMethodDescriptor               = proxySessionServiceServiceDescriptor.Methods().ByName("StartSession")
	proxySessionServiceEndSessionMethodDescriptor                 = proxySessionServiceServiceDescriptor.Methods().ByName("EndSession")
	proxySessionServicePutSessionLogMethodDescriptor              = proxySessionServiceServiceDescriptor.Methods().ByName("PutSessionLog")
	proxySessionServiceQuerySessionLogsMethodDescriptor           = proxySessionServiceServiceDescriptor.Methods().ByName("QuerySessionLogs")
	proxySessionServiceQuerySessionLogsForSessionMethodDescriptor = proxySessionServiceServiceDescriptor.Methods().ByName("QuerySessionLogsForSession")
	proxySessionServiceGetSessionMethodDescriptor                 = proxySessionServiceServiceDescriptor.Methods().ByName("GetSession")
	proxySessionServiceStartShellSessionMethodDescriptor          = proxySessionServiceServiceDescriptor.Methods().ByName("StartShellSession")
	proxySessionServiceEndShellSessionMethodDescriptor            = proxySessionServiceServiceDescriptor.Methods().ByName("EndShellSession")
	proxySessionServicePutShellSessionChunkMethodDescriptor       = proxySessionServiceServiceDescriptor.Methods().ByName("PutShellSessionChunk")
	proxySessionServiceGetShellSessionMethodDescriptor            = proxySessionServiceServiceDescriptor.Methods().ByName("GetShellSession")
)

// ProxySessionServiceClient is a client for the commonfate.access.v1alpha1.ProxySessionService
// service.
type ProxySessionServiceClient interface {
	StartSession(context.Context, *connect.Request[v1alpha1.StartSessionRequest]) (*connect.Response[v1alpha1.StartSessionResponse], error)
	EndSession(context.Context, *connect.Request[v1alpha1.EndSessionRequest]) (*connect.Response[v1alpha1.EndSessionResponse], error)
	PutSessionLog(context.Context, *connect.Request[v1alpha1.PutSessionLogRequest]) (*connect.Response[v1alpha1.PutSessionLogResponse], error)
	QuerySessionLogs(context.Context, *connect.Request[v1alpha1.QuerySessionLogsRequest]) (*connect.Response[v1alpha1.QuerySessionLogsResponse], error)
	QuerySessionLogsForSession(context.Context, *connect.Request[v1alpha1.QuerySessionLogsForSessionRequest]) (*connect.Response[v1alpha1.QuerySessionLogsForSessionResponse], error)
	GetSession(context.Context, *connect.Request[v1alpha1.GetSessionRequest]) (*connect.Response[v1alpha1.GetSessionResponse], error)
	StartShellSession(context.Context, *connect.Request[v1alpha1.StartShellSessionRequest]) (*connect.Response[v1alpha1.StartShellSessionResponse], error)
	EndShellSession(context.Context, *connect.Request[v1alpha1.EndShellSessionRequest]) (*connect.Response[v1alpha1.EndShellSessionResponse], error)
	PutShellSessionChunk(context.Context, *connect.Request[v1alpha1.PutShellSessionChunkRequest]) (*connect.Response[v1alpha1.PutShellSessionChunkResponse], error)
	GetShellSession(context.Context, *connect.Request[v1alpha1.GetShellSessionRequest]) (*connect.Response[v1alpha1.GetShellSessionResponse], error)
}

// NewProxySessionServiceClient constructs a client for the
// commonfate.access.v1alpha1.ProxySessionService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProxySessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProxySessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &proxySessionServiceClient{
		startSession: connect.NewClient[v1alpha1.StartSessionRequest, v1alpha1.StartSessionResponse](
			httpClient,
			baseURL+ProxySessionServiceStartSessionProcedure,
			connect.WithSchema(proxySessionServiceStartSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		endSession: connect.NewClient[v1alpha1.EndSessionRequest, v1alpha1.EndSessionResponse](
			httpClient,
			baseURL+ProxySessionServiceEndSessionProcedure,
			connect.WithSchema(proxySessionServiceEndSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putSessionLog: connect.NewClient[v1alpha1.PutSessionLogRequest, v1alpha1.PutSessionLogResponse](
			httpClient,
			baseURL+ProxySessionServicePutSessionLogProcedure,
			connect.WithSchema(proxySessionServicePutSessionLogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		querySessionLogs: connect.NewClient[v1alpha1.QuerySessionLogsRequest, v1alpha1.QuerySessionLogsResponse](
			httpClient,
			baseURL+ProxySessionServiceQuerySessionLogsProcedure,
			connect.WithSchema(proxySessionServiceQuerySessionLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		querySessionLogsForSession: connect.NewClient[v1alpha1.QuerySessionLogsForSessionRequest, v1alpha1.QuerySessionLogsForSessionResponse](
			httpClient,
			baseURL+ProxySessionServiceQuerySessionLogsForSessionProcedure,
			connect.WithSchema(proxySessionServiceQuerySessionLogsForSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSession: connect.NewClient[v1alpha1.GetSessionRequest, v1alpha1.GetSessionResponse](
			httpClient,
			baseURL+ProxySessionServiceGetSessionProcedure,
			connect.WithSchema(proxySessionServiceGetSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startShellSession: connect.NewClient[v1alpha1.StartShellSessionRequest, v1alpha1.StartShellSessionResponse](
			httpClient,
			baseURL+ProxySessionServiceStartShellSessionProcedure,
			connect.WithSchema(proxySessionServiceStartShellSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		endShellSession: connect.NewClient[v1alpha1.EndShellSessionRequest, v1alpha1.EndShellSessionResponse](
			httpClient,
			baseURL+ProxySessionServiceEndShellSessionProcedure,
			connect.WithSchema(proxySessionServiceEndShellSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putShellSessionChunk: connect.NewClient[v1alpha1.PutShellSessionChunkRequest, v1alpha1.PutShellSessionChunkResponse](
			httpClient,
			baseURL+ProxySessionServicePutShellSessionChunkProcedure,
			connect.WithSchema(proxySessionServicePutShellSessionChunkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getShellSession: connect.NewClient[v1alpha1.GetShellSessionRequest, v1alpha1.GetShellSessionResponse](
			httpClient,
			baseURL+ProxySessionServiceGetShellSessionProcedure,
			connect.WithSchema(proxySessionServiceGetShellSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// proxySessionServiceClient implements ProxySessionServiceClient.
type proxySessionServiceClient struct {
	startSession               *connect.Client[v1alpha1.StartSessionRequest, v1alpha1.StartSessionResponse]
	endSession                 *connect.Client[v1alpha1.EndSessionRequest, v1alpha1.EndSessionResponse]
	putSessionLog              *connect.Client[v1alpha1.PutSessionLogRequest, v1alpha1.PutSessionLogResponse]
	querySessionLogs           *connect.Client[v1alpha1.QuerySessionLogsRequest, v1alpha1.QuerySessionLogsResponse]
	querySessionLogsForSession *connect.Client[v1alpha1.QuerySessionLogsForSessionRequest, v1alpha1.QuerySessionLogsForSessionResponse]
	getSession                 *connect.Client[v1alpha1.GetSessionRequest, v1alpha1.GetSessionResponse]
	startShellSession          *connect.Client[v1alpha1.StartShellSessionRequest, v1alpha1.StartShellSessionResponse]
	endShellSession            *connect.Client[v1alpha1.EndShellSessionRequest, v1alpha1.EndShellSessionResponse]
	putShellSessionChunk       *connect.Client[v1alpha1.PutShellSessionChunkRequest, v1alpha1.PutShellSessionChunkResponse]
	getShellSession            *connect.Client[v1alpha1.GetShellSessionRequest, v1alpha1.GetShellSessionResponse]
}

// StartSession calls commonfate.access.v1alpha1.ProxySessionService.StartSession.
func (c *proxySessionServiceClient) StartSession(ctx context.Context, req *connect.Request[v1alpha1.StartSessionRequest]) (*connect.Response[v1alpha1.StartSessionResponse], error) {
	return c.startSession.CallUnary(ctx, req)
}

// EndSession calls commonfate.access.v1alpha1.ProxySessionService.EndSession.
func (c *proxySessionServiceClient) EndSession(ctx context.Context, req *connect.Request[v1alpha1.EndSessionRequest]) (*connect.Response[v1alpha1.EndSessionResponse], error) {
	return c.endSession.CallUnary(ctx, req)
}

// PutSessionLog calls commonfate.access.v1alpha1.ProxySessionService.PutSessionLog.
func (c *proxySessionServiceClient) PutSessionLog(ctx context.Context, req *connect.Request[v1alpha1.PutSessionLogRequest]) (*connect.Response[v1alpha1.PutSessionLogResponse], error) {
	return c.putSessionLog.CallUnary(ctx, req)
}

// QuerySessionLogs calls commonfate.access.v1alpha1.ProxySessionService.QuerySessionLogs.
func (c *proxySessionServiceClient) QuerySessionLogs(ctx context.Context, req *connect.Request[v1alpha1.QuerySessionLogsRequest]) (*connect.Response[v1alpha1.QuerySessionLogsResponse], error) {
	return c.querySessionLogs.CallUnary(ctx, req)
}

// QuerySessionLogsForSession calls
// commonfate.access.v1alpha1.ProxySessionService.QuerySessionLogsForSession.
func (c *proxySessionServiceClient) QuerySessionLogsForSession(ctx context.Context, req *connect.Request[v1alpha1.QuerySessionLogsForSessionRequest]) (*connect.Response[v1alpha1.QuerySessionLogsForSessionResponse], error) {
	return c.querySessionLogsForSession.CallUnary(ctx, req)
}

// GetSession calls commonfate.access.v1alpha1.ProxySessionService.GetSession.
func (c *proxySessionServiceClient) GetSession(ctx context.Context, req *connect.Request[v1alpha1.GetSessionRequest]) (*connect.Response[v1alpha1.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// StartShellSession calls commonfate.access.v1alpha1.ProxySessionService.StartShellSession.
func (c *proxySessionServiceClient) StartShellSession(ctx context.Context, req *connect.Request[v1alpha1.StartShellSessionRequest]) (*connect.Response[v1alpha1.StartShellSessionResponse], error) {
	return c.startShellSession.CallUnary(ctx, req)
}

// EndShellSession calls commonfate.access.v1alpha1.ProxySessionService.EndShellSession.
func (c *proxySessionServiceClient) EndShellSession(ctx context.Context, req *connect.Request[v1alpha1.EndShellSessionRequest]) (*connect.Response[v1alpha1.EndShellSessionResponse], error) {
	return c.endShellSession.CallUnary(ctx, req)
}

// PutShellSessionChunk calls commonfate.access.v1alpha1.ProxySessionService.PutShellSessionChunk.
func (c *proxySessionServiceClient) PutShellSessionChunk(ctx context.Context, req *connect.Request[v1alpha1.PutShellSessionChunkRequest]) (*connect.Response[v1alpha1.PutShellSessionChunkResponse], error) {
	return c.putShellSessionChunk.CallUnary(ctx, req)
}

// GetShellSession calls commonfate.access.v1alpha1.ProxySessionService.GetShellSession.
func (c *proxySessionServiceClient) GetShellSession(ctx context.Context, req *connect.Request[v1alpha1.GetShellSessionRequest]) (*connect.Response[v1alpha1.GetShellSessionResponse], error) {
	return c.getShellSession.CallUnary(ctx, req)
}

// ProxySessionServiceHandler is an implementation of the
// commonfate.access.v1alpha1.ProxySessionService service.
type ProxySessionServiceHandler interface {
	StartSession(context.Context, *connect.Request[v1alpha1.StartSessionRequest]) (*connect.Response[v1alpha1.StartSessionResponse], error)
	EndSession(context.Context, *connect.Request[v1alpha1.EndSessionRequest]) (*connect.Response[v1alpha1.EndSessionResponse], error)
	PutSessionLog(context.Context, *connect.Request[v1alpha1.PutSessionLogRequest]) (*connect.Response[v1alpha1.PutSessionLogResponse], error)
	QuerySessionLogs(context.Context, *connect.Request[v1alpha1.QuerySessionLogsRequest]) (*connect.Response[v1alpha1.QuerySessionLogsResponse], error)
	QuerySessionLogsForSession(context.Context, *connect.Request[v1alpha1.QuerySessionLogsForSessionRequest]) (*connect.Response[v1alpha1.QuerySessionLogsForSessionResponse], error)
	GetSession(context.Context, *connect.Request[v1alpha1.GetSessionRequest]) (*connect.Response[v1alpha1.GetSessionResponse], error)
	StartShellSession(context.Context, *connect.Request[v1alpha1.StartShellSessionRequest]) (*connect.Response[v1alpha1.StartShellSessionResponse], error)
	EndShellSession(context.Context, *connect.Request[v1alpha1.EndShellSessionRequest]) (*connect.Response[v1alpha1.EndShellSessionResponse], error)
	PutShellSessionChunk(context.Context, *connect.Request[v1alpha1.PutShellSessionChunkRequest]) (*connect.Response[v1alpha1.PutShellSessionChunkResponse], error)
	GetShellSession(context.Context, *connect.Request[v1alpha1.GetShellSessionRequest]) (*connect.Response[v1alpha1.GetShellSessionResponse], error)
}

// NewProxySessionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProxySessionServiceHandler(svc ProxySessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	proxySessionServiceStartSessionHandler := connect.NewUnaryHandler(
		ProxySessionServiceStartSessionProcedure,
		svc.StartSession,
		connect.WithSchema(proxySessionServiceStartSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServiceEndSessionHandler := connect.NewUnaryHandler(
		ProxySessionServiceEndSessionProcedure,
		svc.EndSession,
		connect.WithSchema(proxySessionServiceEndSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServicePutSessionLogHandler := connect.NewUnaryHandler(
		ProxySessionServicePutSessionLogProcedure,
		svc.PutSessionLog,
		connect.WithSchema(proxySessionServicePutSessionLogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServiceQuerySessionLogsHandler := connect.NewUnaryHandler(
		ProxySessionServiceQuerySessionLogsProcedure,
		svc.QuerySessionLogs,
		connect.WithSchema(proxySessionServiceQuerySessionLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServiceQuerySessionLogsForSessionHandler := connect.NewUnaryHandler(
		ProxySessionServiceQuerySessionLogsForSessionProcedure,
		svc.QuerySessionLogsForSession,
		connect.WithSchema(proxySessionServiceQuerySessionLogsForSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServiceGetSessionHandler := connect.NewUnaryHandler(
		ProxySessionServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(proxySessionServiceGetSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServiceStartShellSessionHandler := connect.NewUnaryHandler(
		ProxySessionServiceStartShellSessionProcedure,
		svc.StartShellSession,
		connect.WithSchema(proxySessionServiceStartShellSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServiceEndShellSessionHandler := connect.NewUnaryHandler(
		ProxySessionServiceEndShellSessionProcedure,
		svc.EndShellSession,
		connect.WithSchema(proxySessionServiceEndShellSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServicePutShellSessionChunkHandler := connect.NewUnaryHandler(
		ProxySessionServicePutShellSessionChunkProcedure,
		svc.PutShellSessionChunk,
		connect.WithSchema(proxySessionServicePutShellSessionChunkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxySessionServiceGetShellSessionHandler := connect.NewUnaryHandler(
		ProxySessionServiceGetShellSessionProcedure,
		svc.GetShellSession,
		connect.WithSchema(proxySessionServiceGetShellSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.access.v1alpha1.ProxySessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProxySessionServiceStartSessionProcedure:
			proxySessionServiceStartSessionHandler.ServeHTTP(w, r)
		case ProxySessionServiceEndSessionProcedure:
			proxySessionServiceEndSessionHandler.ServeHTTP(w, r)
		case ProxySessionServicePutSessionLogProcedure:
			proxySessionServicePutSessionLogHandler.ServeHTTP(w, r)
		case ProxySessionServiceQuerySessionLogsProcedure:
			proxySessionServiceQuerySessionLogsHandler.ServeHTTP(w, r)
		case ProxySessionServiceQuerySessionLogsForSessionProcedure:
			proxySessionServiceQuerySessionLogsForSessionHandler.ServeHTTP(w, r)
		case ProxySessionServiceGetSessionProcedure:
			proxySessionServiceGetSessionHandler.ServeHTTP(w, r)
		case ProxySessionServiceStartShellSessionProcedure:
			proxySessionServiceStartShellSessionHandler.ServeHTTP(w, r)
		case ProxySessionServiceEndShellSessionProcedure:
			proxySessionServiceEndShellSessionHandler.ServeHTTP(w, r)
		case ProxySessionServicePutShellSessionChunkProcedure:
			proxySessionServicePutShellSessionChunkHandler.ServeHTTP(w, r)
		case ProxySessionServiceGetShellSessionProcedure:
			proxySessionServiceGetShellSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProxySessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProxySessionServiceHandler struct{}

func (UnimplementedProxySessionServiceHandler) StartSession(context.Context, *connect.Request[v1alpha1.StartSessionRequest]) (*connect.Response[v1alpha1.StartSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.StartSession is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) EndSession(context.Context, *connect.Request[v1alpha1.EndSessionRequest]) (*connect.Response[v1alpha1.EndSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.EndSession is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) PutSessionLog(context.Context, *connect.Request[v1alpha1.PutSessionLogRequest]) (*connect.Response[v1alpha1.PutSessionLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.PutSessionLog is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) QuerySessionLogs(context.Context, *connect.Request[v1alpha1.QuerySessionLogsRequest]) (*connect.Response[v1alpha1.QuerySessionLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.QuerySessionLogs is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) QuerySessionLogsForSession(context.Context, *connect.Request[v1alpha1.QuerySessionLogsForSessionRequest]) (*connect.Response[v1alpha1.QuerySessionLogsForSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.QuerySessionLogsForSession is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) GetSession(context.Context, *connect.Request[v1alpha1.GetSessionRequest]) (*connect.Response[v1alpha1.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.GetSession is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) StartShellSession(context.Context, *connect.Request[v1alpha1.StartShellSessionRequest]) (*connect.Response[v1alpha1.StartShellSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.StartShellSession is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) EndShellSession(context.Context, *connect.Request[v1alpha1.EndShellSessionRequest]) (*connect.Response[v1alpha1.EndShellSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.EndShellSession is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) PutShellSessionChunk(context.Context, *connect.Request[v1alpha1.PutShellSessionChunkRequest]) (*connect.Response[v1alpha1.PutShellSessionChunkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.PutShellSessionChunk is not implemented"))
}

func (UnimplementedProxySessionServiceHandler) GetShellSession(context.Context, *connect.Request[v1alpha1.GetShellSessionRequest]) (*connect.Response[v1alpha1.GetShellSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.ProxySessionService.GetShellSession is not implemented"))
}
