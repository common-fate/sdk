// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v1alpha1/entitlements.proto

package accessv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EntitlementsServiceName is the fully-qualified name of the EntitlementsService service.
	EntitlementsServiceName = "commonfate.access.v1alpha1.EntitlementsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EntitlementsServiceQueryAvailabilitiesProcedure is the fully-qualified name of the
	// EntitlementsService's QueryAvailabilities RPC.
	EntitlementsServiceQueryAvailabilitiesProcedure = "/commonfate.access.v1alpha1.EntitlementsService/QueryAvailabilities"
	// EntitlementsServiceQueryEntitlementsProcedure is the fully-qualified name of the
	// EntitlementsService's QueryEntitlements RPC.
	EntitlementsServiceQueryEntitlementsProcedure = "/commonfate.access.v1alpha1.EntitlementsService/QueryEntitlements"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	entitlementsServiceServiceDescriptor                   = v1alpha1.File_commonfate_access_v1alpha1_entitlements_proto.Services().ByName("EntitlementsService")
	entitlementsServiceQueryAvailabilitiesMethodDescriptor = entitlementsServiceServiceDescriptor.Methods().ByName("QueryAvailabilities")
	entitlementsServiceQueryEntitlementsMethodDescriptor   = entitlementsServiceServiceDescriptor.Methods().ByName("QueryEntitlements")
)

// EntitlementsServiceClient is a client for the commonfate.access.v1alpha1.EntitlementsService
// service.
type EntitlementsServiceClient interface {
	QueryAvailabilities(context.Context, *connect.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v1alpha1.QueryAvailabilitiesResponse], error)
	QueryEntitlements(context.Context, *connect.Request[v1alpha1.QueryEntitlementsRequest]) (*connect.Response[v1alpha1.QueryEntitlementsResponse], error)
}

// NewEntitlementsServiceClient constructs a client for the
// commonfate.access.v1alpha1.EntitlementsService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEntitlementsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EntitlementsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &entitlementsServiceClient{
		queryAvailabilities: connect.NewClient[v1alpha1.QueryAvailabilitiesRequest, v1alpha1.QueryAvailabilitiesResponse](
			httpClient,
			baseURL+EntitlementsServiceQueryAvailabilitiesProcedure,
			connect.WithSchema(entitlementsServiceQueryAvailabilitiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryEntitlements: connect.NewClient[v1alpha1.QueryEntitlementsRequest, v1alpha1.QueryEntitlementsResponse](
			httpClient,
			baseURL+EntitlementsServiceQueryEntitlementsProcedure,
			connect.WithSchema(entitlementsServiceQueryEntitlementsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// entitlementsServiceClient implements EntitlementsServiceClient.
type entitlementsServiceClient struct {
	queryAvailabilities *connect.Client[v1alpha1.QueryAvailabilitiesRequest, v1alpha1.QueryAvailabilitiesResponse]
	queryEntitlements   *connect.Client[v1alpha1.QueryEntitlementsRequest, v1alpha1.QueryEntitlementsResponse]
}

// QueryAvailabilities calls commonfate.access.v1alpha1.EntitlementsService.QueryAvailabilities.
func (c *entitlementsServiceClient) QueryAvailabilities(ctx context.Context, req *connect.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v1alpha1.QueryAvailabilitiesResponse], error) {
	return c.queryAvailabilities.CallUnary(ctx, req)
}

// QueryEntitlements calls commonfate.access.v1alpha1.EntitlementsService.QueryEntitlements.
func (c *entitlementsServiceClient) QueryEntitlements(ctx context.Context, req *connect.Request[v1alpha1.QueryEntitlementsRequest]) (*connect.Response[v1alpha1.QueryEntitlementsResponse], error) {
	return c.queryEntitlements.CallUnary(ctx, req)
}

// EntitlementsServiceHandler is an implementation of the
// commonfate.access.v1alpha1.EntitlementsService service.
type EntitlementsServiceHandler interface {
	QueryAvailabilities(context.Context, *connect.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v1alpha1.QueryAvailabilitiesResponse], error)
	QueryEntitlements(context.Context, *connect.Request[v1alpha1.QueryEntitlementsRequest]) (*connect.Response[v1alpha1.QueryEntitlementsResponse], error)
}

// NewEntitlementsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEntitlementsServiceHandler(svc EntitlementsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	entitlementsServiceQueryAvailabilitiesHandler := connect.NewUnaryHandler(
		EntitlementsServiceQueryAvailabilitiesProcedure,
		svc.QueryAvailabilities,
		connect.WithSchema(entitlementsServiceQueryAvailabilitiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	entitlementsServiceQueryEntitlementsHandler := connect.NewUnaryHandler(
		EntitlementsServiceQueryEntitlementsProcedure,
		svc.QueryEntitlements,
		connect.WithSchema(entitlementsServiceQueryEntitlementsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.access.v1alpha1.EntitlementsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EntitlementsServiceQueryAvailabilitiesProcedure:
			entitlementsServiceQueryAvailabilitiesHandler.ServeHTTP(w, r)
		case EntitlementsServiceQueryEntitlementsProcedure:
			entitlementsServiceQueryEntitlementsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEntitlementsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEntitlementsServiceHandler struct{}

func (UnimplementedEntitlementsServiceHandler) QueryAvailabilities(context.Context, *connect.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v1alpha1.QueryAvailabilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.EntitlementsService.QueryAvailabilities is not implemented"))
}

func (UnimplementedEntitlementsServiceHandler) QueryEntitlements(context.Context, *connect.Request[v1alpha1.QueryEntitlementsRequest]) (*connect.Response[v1alpha1.QueryEntitlementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.EntitlementsService.QueryEntitlements is not implemented"))
}
