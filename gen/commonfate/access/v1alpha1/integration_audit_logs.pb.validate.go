// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/access/v1alpha1/integration_audit_logs.proto

package accessv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BatchPutAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchPutAuditLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchPutAuditLogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchPutAuditLogRequestMultiError, or nil if none found.
func (m *BatchPutAuditLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchPutAuditLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantId

	for idx, item := range m.GetAuditLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchPutAuditLogRequestValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchPutAuditLogRequestValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchPutAuditLogRequestValidationError{
					field:  fmt.Sprintf("AuditLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchPutAuditLogRequestMultiError(errors)
	}

	return nil
}

// BatchPutAuditLogRequestMultiError is an error wrapping multiple validation
// errors returned by BatchPutAuditLogRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchPutAuditLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchPutAuditLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchPutAuditLogRequestMultiError) AllErrors() []error { return m }

// BatchPutAuditLogRequestValidationError is the validation error returned by
// BatchPutAuditLogRequest.Validate if the designated constraints aren't met.
type BatchPutAuditLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchPutAuditLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchPutAuditLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchPutAuditLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchPutAuditLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchPutAuditLogRequestValidationError) ErrorName() string {
	return "BatchPutAuditLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchPutAuditLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchPutAuditLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchPutAuditLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchPutAuditLogRequestValidationError{}

// Validate checks the field values on BatchPutAuditLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchPutAuditLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchPutAuditLogResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchPutAuditLogResponseMultiError, or nil if none found.
func (m *BatchPutAuditLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchPutAuditLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchPutAuditLogResponseMultiError(errors)
	}

	return nil
}

// BatchPutAuditLogResponseMultiError is an error wrapping multiple validation
// errors returned by BatchPutAuditLogResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchPutAuditLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchPutAuditLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchPutAuditLogResponseMultiError) AllErrors() []error { return m }

// BatchPutAuditLogResponseValidationError is the validation error returned by
// BatchPutAuditLogResponse.Validate if the designated constraints aren't met.
type BatchPutAuditLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchPutAuditLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchPutAuditLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchPutAuditLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchPutAuditLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchPutAuditLogResponseValidationError) ErrorName() string {
	return "BatchPutAuditLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchPutAuditLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchPutAuditLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchPutAuditLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchPutAuditLogResponseValidationError{}

// Validate checks the field values on IntegrationAuditLog with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntegrationAuditLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationAuditLog with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationAuditLogMultiError, or nil if none found.
func (m *IntegrationAuditLog) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationAuditLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetOccurredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationAuditLogValidationError{
					field:  "OccurredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationAuditLogValidationError{
					field:  "OccurredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOccurredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationAuditLogValidationError{
				field:  "OccurredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationAuditLogValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationAuditLogValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationAuditLogValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationAuditLogMultiError(errors)
	}

	return nil
}

// IntegrationAuditLogMultiError is an error wrapping multiple validation
// errors returned by IntegrationAuditLog.ValidateAll() if the designated
// constraints aren't met.
type IntegrationAuditLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationAuditLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationAuditLogMultiError) AllErrors() []error { return m }

// IntegrationAuditLogValidationError is the validation error returned by
// IntegrationAuditLog.Validate if the designated constraints aren't met.
type IntegrationAuditLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationAuditLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationAuditLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationAuditLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationAuditLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationAuditLogValidationError) ErrorName() string {
	return "IntegrationAuditLogValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationAuditLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationAuditLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationAuditLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationAuditLogValidationError{}
