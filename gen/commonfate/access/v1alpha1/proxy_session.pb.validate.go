// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/access/v1alpha1/proxy_session.proto

package accessv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StartSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartSessionRequestMultiError, or nil if none found.
func (m *StartSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantId

	if len(errors) > 0 {
		return StartSessionRequestMultiError(errors)
	}

	return nil
}

// StartSessionRequestMultiError is an error wrapping multiple validation
// errors returned by StartSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartSessionRequestMultiError) AllErrors() []error { return m }

// StartSessionRequestValidationError is the validation error returned by
// StartSessionRequest.Validate if the designated constraints aren't met.
type StartSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartSessionRequestValidationError) ErrorName() string {
	return "StartSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartSessionRequestValidationError{}

// Validate checks the field values on StartSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartSessionResponseMultiError, or nil if none found.
func (m *StartSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return StartSessionResponseMultiError(errors)
	}

	return nil
}

// StartSessionResponseMultiError is an error wrapping multiple validation
// errors returned by StartSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartSessionResponseMultiError) AllErrors() []error { return m }

// StartSessionResponseValidationError is the validation error returned by
// StartSessionResponse.Validate if the designated constraints aren't met.
type StartSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartSessionResponseValidationError) ErrorName() string {
	return "StartSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartSessionResponseValidationError{}

// Validate checks the field values on EndSessionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EndSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndSessionRequestMultiError, or nil if none found.
func (m *EndSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EndSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return EndSessionRequestMultiError(errors)
	}

	return nil
}

// EndSessionRequestMultiError is an error wrapping multiple validation errors
// returned by EndSessionRequest.ValidateAll() if the designated constraints
// aren't met.
type EndSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndSessionRequestMultiError) AllErrors() []error { return m }

// EndSessionRequestValidationError is the validation error returned by
// EndSessionRequest.Validate if the designated constraints aren't met.
type EndSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndSessionRequestValidationError) ErrorName() string {
	return "EndSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EndSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndSessionRequestValidationError{}

// Validate checks the field values on EndSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndSessionResponseMultiError, or nil if none found.
func (m *EndSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EndSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EndSessionResponseMultiError(errors)
	}

	return nil
}

// EndSessionResponseMultiError is an error wrapping multiple validation errors
// returned by EndSessionResponse.ValidateAll() if the designated constraints
// aren't met.
type EndSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndSessionResponseMultiError) AllErrors() []error { return m }

// EndSessionResponseValidationError is the validation error returned by
// EndSessionResponse.Validate if the designated constraints aren't met.
type EndSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndSessionResponseValidationError) ErrorName() string {
	return "EndSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EndSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndSessionResponseValidationError{}

// Validate checks the field values on PutSessionLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutSessionLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutSessionLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutSessionLogRequestMultiError, or nil if none found.
func (m *PutSessionLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutSessionLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantId

	// no validation rules for SessionId

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetOccurredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutSessionLogRequestValidationError{
					field:  "OccurredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutSessionLogRequestValidationError{
					field:  "OccurredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOccurredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutSessionLogRequestValidationError{
				field:  "OccurredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Detail.(type) {
	case *PutSessionLogRequest_KubernetesAction:
		if v == nil {
			err := PutSessionLogRequestValidationError{
				field:  "Detail",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKubernetesAction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PutSessionLogRequestValidationError{
						field:  "KubernetesAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PutSessionLogRequestValidationError{
						field:  "KubernetesAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKubernetesAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PutSessionLogRequestValidationError{
					field:  "KubernetesAction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PutSessionLogRequestMultiError(errors)
	}

	return nil
}

// PutSessionLogRequestMultiError is an error wrapping multiple validation
// errors returned by PutSessionLogRequest.ValidateAll() if the designated
// constraints aren't met.
type PutSessionLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutSessionLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutSessionLogRequestMultiError) AllErrors() []error { return m }

// PutSessionLogRequestValidationError is the validation error returned by
// PutSessionLogRequest.Validate if the designated constraints aren't met.
type PutSessionLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutSessionLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutSessionLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutSessionLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutSessionLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutSessionLogRequestValidationError) ErrorName() string {
	return "PutSessionLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutSessionLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutSessionLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutSessionLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutSessionLogRequestValidationError{}

// Validate checks the field values on KubernetesAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KubernetesAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesActionMultiError, or nil if none found.
func (m *KubernetesAction) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionName

	// no validation rules for ClusterName

	// no validation rules for HttpMethod

	// no validation rules for ImpersonateUserHeader

	// no validation rules for RequestUri

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if m.Pod != nil {
		// no validation rules for Pod
	}

	if len(errors) > 0 {
		return KubernetesActionMultiError(errors)
	}

	return nil
}

// KubernetesActionMultiError is an error wrapping multiple validation errors
// returned by KubernetesAction.ValidateAll() if the designated constraints
// aren't met.
type KubernetesActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesActionMultiError) AllErrors() []error { return m }

// KubernetesActionValidationError is the validation error returned by
// KubernetesAction.Validate if the designated constraints aren't met.
type KubernetesActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesActionValidationError) ErrorName() string { return "KubernetesActionValidationError" }

// Error satisfies the builtin error interface
func (e KubernetesActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesActionValidationError{}

// Validate checks the field values on PutSessionLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutSessionLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutSessionLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutSessionLogResponseMultiError, or nil if none found.
func (m *PutSessionLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutSessionLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutSessionLogResponseMultiError(errors)
	}

	return nil
}

// PutSessionLogResponseMultiError is an error wrapping multiple validation
// errors returned by PutSessionLogResponse.ValidateAll() if the designated
// constraints aren't met.
type PutSessionLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutSessionLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutSessionLogResponseMultiError) AllErrors() []error { return m }

// PutSessionLogResponseValidationError is the validation error returned by
// PutSessionLogResponse.Validate if the designated constraints aren't met.
type PutSessionLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutSessionLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutSessionLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutSessionLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutSessionLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutSessionLogResponseValidationError) ErrorName() string {
	return "PutSessionLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutSessionLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutSessionLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutSessionLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutSessionLogResponseValidationError{}

// Validate checks the field values on SessionLogFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SessionLogFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionLogFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionLogFilterMultiError, or nil if none found.
func (m *SessionLogFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionLogFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Filter.(type) {
	case *SessionLogFilter_OccuredAt:
		if v == nil {
			err := SessionLogFilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOccuredAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionLogFilterValidationError{
						field:  "OccuredAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionLogFilterValidationError{
						field:  "OccuredAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOccuredAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionLogFilterValidationError{
					field:  "OccuredAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SessionLogFilter_Principal:
		if v == nil {
			err := SessionLogFilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPrincipal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionLogFilterValidationError{
						field:  "Principal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionLogFilterValidationError{
						field:  "Principal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionLogFilterValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SessionLogFilter_Resource:
		if v == nil {
			err := SessionLogFilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResource()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionLogFilterValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionLogFilterValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionLogFilterValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SessionLogFilterMultiError(errors)
	}

	return nil
}

// SessionLogFilterMultiError is an error wrapping multiple validation errors
// returned by SessionLogFilter.ValidateAll() if the designated constraints
// aren't met.
type SessionLogFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionLogFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionLogFilterMultiError) AllErrors() []error { return m }

// SessionLogFilterValidationError is the validation error returned by
// SessionLogFilter.Validate if the designated constraints aren't met.
type SessionLogFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionLogFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionLogFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionLogFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionLogFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionLogFilterValidationError) ErrorName() string { return "SessionLogFilterValidationError" }

// Error satisfies the builtin error interface
func (e SessionLogFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionLogFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionLogFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionLogFilterValidationError{}

// Validate checks the field values on QuerySessionLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuerySessionLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySessionLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySessionLogsRequestMultiError, or nil if none found.
func (m *QuerySessionLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySessionLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for PageToken

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuerySessionLogsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuerySessionLogsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuerySessionLogsRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuerySessionLogsRequestMultiError(errors)
	}

	return nil
}

// QuerySessionLogsRequestMultiError is an error wrapping multiple validation
// errors returned by QuerySessionLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type QuerySessionLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySessionLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySessionLogsRequestMultiError) AllErrors() []error { return m }

// QuerySessionLogsRequestValidationError is the validation error returned by
// QuerySessionLogsRequest.Validate if the designated constraints aren't met.
type QuerySessionLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySessionLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySessionLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySessionLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySessionLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySessionLogsRequestValidationError) ErrorName() string {
	return "QuerySessionLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuerySessionLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySessionLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySessionLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySessionLogsRequestValidationError{}

// Validate checks the field values on QuerySessionLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuerySessionLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySessionLogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySessionLogsResponseMultiError, or nil if none found.
func (m *QuerySessionLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySessionLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSessionLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuerySessionLogsResponseValidationError{
						field:  fmt.Sprintf("SessionLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuerySessionLogsResponseValidationError{
						field:  fmt.Sprintf("SessionLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuerySessionLogsResponseValidationError{
					field:  fmt.Sprintf("SessionLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return QuerySessionLogsResponseMultiError(errors)
	}

	return nil
}

// QuerySessionLogsResponseMultiError is an error wrapping multiple validation
// errors returned by QuerySessionLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type QuerySessionLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySessionLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySessionLogsResponseMultiError) AllErrors() []error { return m }

// QuerySessionLogsResponseValidationError is the validation error returned by
// QuerySessionLogsResponse.Validate if the designated constraints aren't met.
type QuerySessionLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySessionLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySessionLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySessionLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySessionLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySessionLogsResponseValidationError) ErrorName() string {
	return "QuerySessionLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuerySessionLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySessionLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySessionLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySessionLogsResponseValidationError{}

// Validate checks the field values on SessionLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SessionLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionLog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SessionLogMultiError, or
// nil if none found.
func (m *SessionLog) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetOccurredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionLogValidationError{
					field:  "OccurredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionLogValidationError{
					field:  "OccurredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOccurredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionLogValidationError{
				field:  "OccurredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSessionLogDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionLogValidationError{
					field:  "SessionLogDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionLogValidationError{
					field:  "SessionLogDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSessionLogDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionLogValidationError{
				field:  "SessionLogDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SessionLogMultiError(errors)
	}

	return nil
}

// SessionLogMultiError is an error wrapping multiple validation errors
// returned by SessionLog.ValidateAll() if the designated constraints aren't met.
type SessionLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionLogMultiError) AllErrors() []error { return m }

// SessionLogValidationError is the validation error returned by
// SessionLog.Validate if the designated constraints aren't met.
type SessionLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionLogValidationError) ErrorName() string { return "SessionLogValidationError" }

// Error satisfies the builtin error interface
func (e SessionLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionLogValidationError{}

// Validate checks the field values on SessionLogDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SessionLogDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionLogDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionLogDetailMultiError, or nil if none found.
func (m *SessionLogDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionLogDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.SessionLogDetail.(type) {
	case *SessionLogDetail_KubernetesAction:
		if v == nil {
			err := SessionLogDetailValidationError{
				field:  "SessionLogDetail",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKubernetesAction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionLogDetailValidationError{
						field:  "KubernetesAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionLogDetailValidationError{
						field:  "KubernetesAction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKubernetesAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionLogDetailValidationError{
					field:  "KubernetesAction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SessionLogDetailMultiError(errors)
	}

	return nil
}

// SessionLogDetailMultiError is an error wrapping multiple validation errors
// returned by SessionLogDetail.ValidateAll() if the designated constraints
// aren't met.
type SessionLogDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionLogDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionLogDetailMultiError) AllErrors() []error { return m }

// SessionLogDetailValidationError is the validation error returned by
// SessionLogDetail.Validate if the designated constraints aren't met.
type SessionLogDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionLogDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionLogDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionLogDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionLogDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionLogDetailValidationError) ErrorName() string { return "SessionLogDetailValidationError" }

// Error satisfies the builtin error interface
func (e SessionLogDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionLogDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionLogDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionLogDetailValidationError{}

// Validate checks the field values on GetSessionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionRequestMultiError, or nil if none found.
func (m *GetSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return GetSessionRequestMultiError(errors)
	}

	return nil
}

// GetSessionRequestMultiError is an error wrapping multiple validation errors
// returned by GetSessionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionRequestMultiError) AllErrors() []error { return m }

// GetSessionRequestValidationError is the validation error returned by
// GetSessionRequest.Validate if the designated constraints aren't met.
type GetSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionRequestValidationError) ErrorName() string {
	return "GetSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionRequestValidationError{}

// Validate checks the field values on GetSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionResponseMultiError, or nil if none found.
func (m *GetSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSessionResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSessionResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSessionResponseValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSessionResponseMultiError(errors)
	}

	return nil
}

// GetSessionResponseMultiError is an error wrapping multiple validation errors
// returned by GetSessionResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionResponseMultiError) AllErrors() []error { return m }

// GetSessionResponseValidationError is the validation error returned by
// GetSessionResponse.Validate if the designated constraints aren't met.
type GetSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionResponseValidationError) ErrorName() string {
	return "GetSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionResponseValidationError{}

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Session) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SessionMultiError, or nil if none found.
func (m *Session) ValidateAll() error {
	return m.validate(true)
}

func (m *Session) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for GrantId

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.EndedAt != nil {

		if all {
			switch v := interface{}(m.GetEndedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "EndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "EndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SessionMultiError(errors)
	}

	return nil
}

// SessionMultiError is an error wrapping multiple validation errors returned
// by Session.ValidateAll() if the designated constraints aren't met.
type SessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionMultiError) AllErrors() []error { return m }

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on StartShellSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartShellSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartShellSessionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartShellSessionRequestMultiError, or nil if none found.
func (m *StartShellSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartShellSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantId

	// no validation rules for SessionId

	if len(errors) > 0 {
		return StartShellSessionRequestMultiError(errors)
	}

	return nil
}

// StartShellSessionRequestMultiError is an error wrapping multiple validation
// errors returned by StartShellSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartShellSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartShellSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartShellSessionRequestMultiError) AllErrors() []error { return m }

// StartShellSessionRequestValidationError is the validation error returned by
// StartShellSessionRequest.Validate if the designated constraints aren't met.
type StartShellSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartShellSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartShellSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartShellSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartShellSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartShellSessionRequestValidationError) ErrorName() string {
	return "StartShellSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartShellSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartShellSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartShellSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartShellSessionRequestValidationError{}

// Validate checks the field values on StartShellSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartShellSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartShellSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartShellSessionResponseMultiError, or nil if none found.
func (m *StartShellSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartShellSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShellSessionId

	if len(errors) > 0 {
		return StartShellSessionResponseMultiError(errors)
	}

	return nil
}

// StartShellSessionResponseMultiError is an error wrapping multiple validation
// errors returned by StartShellSessionResponse.ValidateAll() if the
// designated constraints aren't met.
type StartShellSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartShellSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartShellSessionResponseMultiError) AllErrors() []error { return m }

// StartShellSessionResponseValidationError is the validation error returned by
// StartShellSessionResponse.Validate if the designated constraints aren't met.
type StartShellSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartShellSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartShellSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartShellSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartShellSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartShellSessionResponseValidationError) ErrorName() string {
	return "StartShellSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartShellSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartShellSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartShellSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartShellSessionResponseValidationError{}

// Validate checks the field values on EndShellSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndShellSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndShellSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndShellSessionRequestMultiError, or nil if none found.
func (m *EndShellSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EndShellSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShellSessionId

	if len(errors) > 0 {
		return EndShellSessionRequestMultiError(errors)
	}

	return nil
}

// EndShellSessionRequestMultiError is an error wrapping multiple validation
// errors returned by EndShellSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type EndShellSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndShellSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndShellSessionRequestMultiError) AllErrors() []error { return m }

// EndShellSessionRequestValidationError is the validation error returned by
// EndShellSessionRequest.Validate if the designated constraints aren't met.
type EndShellSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndShellSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndShellSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndShellSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndShellSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndShellSessionRequestValidationError) ErrorName() string {
	return "EndShellSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EndShellSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndShellSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndShellSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndShellSessionRequestValidationError{}

// Validate checks the field values on EndShellSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndShellSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndShellSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndShellSessionResponseMultiError, or nil if none found.
func (m *EndShellSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EndShellSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EndShellSessionResponseMultiError(errors)
	}

	return nil
}

// EndShellSessionResponseMultiError is an error wrapping multiple validation
// errors returned by EndShellSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type EndShellSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndShellSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndShellSessionResponseMultiError) AllErrors() []error { return m }

// EndShellSessionResponseValidationError is the validation error returned by
// EndShellSessionResponse.Validate if the designated constraints aren't met.
type EndShellSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndShellSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndShellSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndShellSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndShellSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndShellSessionResponseValidationError) ErrorName() string {
	return "EndShellSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EndShellSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndShellSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndShellSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndShellSessionResponseValidationError{}

// Validate checks the field values on PutShellSessionChunkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutShellSessionChunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutShellSessionChunkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutShellSessionChunkRequestMultiError, or nil if none found.
func (m *PutShellSessionChunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutShellSessionChunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantId

	// no validation rules for ShellSessionId

	// no validation rules for Index

	// no validation rules for Chunk

	if len(errors) > 0 {
		return PutShellSessionChunkRequestMultiError(errors)
	}

	return nil
}

// PutShellSessionChunkRequestMultiError is an error wrapping multiple
// validation errors returned by PutShellSessionChunkRequest.ValidateAll() if
// the designated constraints aren't met.
type PutShellSessionChunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutShellSessionChunkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutShellSessionChunkRequestMultiError) AllErrors() []error { return m }

// PutShellSessionChunkRequestValidationError is the validation error returned
// by PutShellSessionChunkRequest.Validate if the designated constraints
// aren't met.
type PutShellSessionChunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutShellSessionChunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutShellSessionChunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutShellSessionChunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutShellSessionChunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutShellSessionChunkRequestValidationError) ErrorName() string {
	return "PutShellSessionChunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutShellSessionChunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutShellSessionChunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutShellSessionChunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutShellSessionChunkRequestValidationError{}

// Validate checks the field values on PutShellSessionChunkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutShellSessionChunkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutShellSessionChunkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutShellSessionChunkResponseMultiError, or nil if none found.
func (m *PutShellSessionChunkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutShellSessionChunkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutShellSessionChunkResponseMultiError(errors)
	}

	return nil
}

// PutShellSessionChunkResponseMultiError is an error wrapping multiple
// validation errors returned by PutShellSessionChunkResponse.ValidateAll() if
// the designated constraints aren't met.
type PutShellSessionChunkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutShellSessionChunkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutShellSessionChunkResponseMultiError) AllErrors() []error { return m }

// PutShellSessionChunkResponseValidationError is the validation error returned
// by PutShellSessionChunkResponse.Validate if the designated constraints
// aren't met.
type PutShellSessionChunkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutShellSessionChunkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutShellSessionChunkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutShellSessionChunkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutShellSessionChunkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutShellSessionChunkResponseValidationError) ErrorName() string {
	return "PutShellSessionChunkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutShellSessionChunkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutShellSessionChunkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutShellSessionChunkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutShellSessionChunkResponseValidationError{}

// Validate checks the field values on GetShellSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShellSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShellSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShellSessionRequestMultiError, or nil if none found.
func (m *GetShellSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShellSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShellSessionId

	if len(errors) > 0 {
		return GetShellSessionRequestMultiError(errors)
	}

	return nil
}

// GetShellSessionRequestMultiError is an error wrapping multiple validation
// errors returned by GetShellSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShellSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShellSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShellSessionRequestMultiError) AllErrors() []error { return m }

// GetShellSessionRequestValidationError is the validation error returned by
// GetShellSessionRequest.Validate if the designated constraints aren't met.
type GetShellSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShellSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShellSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShellSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShellSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShellSessionRequestValidationError) ErrorName() string {
	return "GetShellSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShellSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShellSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShellSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShellSessionRequestValidationError{}

// Validate checks the field values on GetShellSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShellSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShellSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShellSessionResponseMultiError, or nil if none found.
func (m *GetShellSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShellSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShellSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShellSessionResponseValidationError{
					field:  "ShellSession",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShellSessionResponseValidationError{
					field:  "ShellSession",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShellSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShellSessionResponseValidationError{
				field:  "ShellSession",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShellSessionResponseMultiError(errors)
	}

	return nil
}

// GetShellSessionResponseMultiError is an error wrapping multiple validation
// errors returned by GetShellSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShellSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShellSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShellSessionResponseMultiError) AllErrors() []error { return m }

// GetShellSessionResponseValidationError is the validation error returned by
// GetShellSessionResponse.Validate if the designated constraints aren't met.
type GetShellSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShellSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShellSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShellSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShellSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShellSessionResponseValidationError) ErrorName() string {
	return "GetShellSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShellSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShellSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShellSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShellSessionResponseValidationError{}

// Validate checks the field values on ShellSession with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShellSession) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShellSession with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShellSessionMultiError, or
// nil if none found.
func (m *ShellSession) ValidateAll() error {
	return m.validate(true)
}

func (m *ShellSession) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for GrantId

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShellSessionValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShellSessionValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShellSessionValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SessionLogDataUrl

	if m.EndedAt != nil {

		if all {
			switch v := interface{}(m.GetEndedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShellSessionValidationError{
						field:  "EndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShellSessionValidationError{
						field:  "EndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShellSessionValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShellSessionMultiError(errors)
	}

	return nil
}

// ShellSessionMultiError is an error wrapping multiple validation errors
// returned by ShellSession.ValidateAll() if the designated constraints aren't met.
type ShellSessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShellSessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShellSessionMultiError) AllErrors() []error { return m }

// ShellSessionValidationError is the validation error returned by
// ShellSession.Validate if the designated constraints aren't met.
type ShellSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShellSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShellSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShellSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShellSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShellSessionValidationError) ErrorName() string { return "ShellSessionValidationError" }

// Error satisfies the builtin error interface
func (e ShellSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShellSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShellSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShellSessionValidationError{}
