// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/access/v1alpha1/proxy_session.proto

package accessv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StartSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartSessionRequestMultiError, or nil if none found.
func (m *StartSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantId

	if len(errors) > 0 {
		return StartSessionRequestMultiError(errors)
	}

	return nil
}

// StartSessionRequestMultiError is an error wrapping multiple validation
// errors returned by StartSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartSessionRequestMultiError) AllErrors() []error { return m }

// StartSessionRequestValidationError is the validation error returned by
// StartSessionRequest.Validate if the designated constraints aren't met.
type StartSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartSessionRequestValidationError) ErrorName() string {
	return "StartSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartSessionRequestValidationError{}

// Validate checks the field values on StartSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartSessionResponseMultiError, or nil if none found.
func (m *StartSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return StartSessionResponseMultiError(errors)
	}

	return nil
}

// StartSessionResponseMultiError is an error wrapping multiple validation
// errors returned by StartSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type StartSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartSessionResponseMultiError) AllErrors() []error { return m }

// StartSessionResponseValidationError is the validation error returned by
// StartSessionResponse.Validate if the designated constraints aren't met.
type StartSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartSessionResponseValidationError) ErrorName() string {
	return "StartSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartSessionResponseValidationError{}

// Validate checks the field values on EndSessionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EndSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndSessionRequestMultiError, or nil if none found.
func (m *EndSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EndSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantId

	if len(errors) > 0 {
		return EndSessionRequestMultiError(errors)
	}

	return nil
}

// EndSessionRequestMultiError is an error wrapping multiple validation errors
// returned by EndSessionRequest.ValidateAll() if the designated constraints
// aren't met.
type EndSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndSessionRequestMultiError) AllErrors() []error { return m }

// EndSessionRequestValidationError is the validation error returned by
// EndSessionRequest.Validate if the designated constraints aren't met.
type EndSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndSessionRequestValidationError) ErrorName() string {
	return "EndSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EndSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndSessionRequestValidationError{}

// Validate checks the field values on EndSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndSessionResponseMultiError, or nil if none found.
func (m *EndSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EndSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EndSessionResponseMultiError(errors)
	}

	return nil
}

// EndSessionResponseMultiError is an error wrapping multiple validation errors
// returned by EndSessionResponse.ValidateAll() if the designated constraints
// aren't met.
type EndSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndSessionResponseMultiError) AllErrors() []error { return m }

// EndSessionResponseValidationError is the validation error returned by
// EndSessionResponse.Validate if the designated constraints aren't met.
type EndSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndSessionResponseValidationError) ErrorName() string {
	return "EndSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EndSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndSessionResponseValidationError{}

// Validate checks the field values on PutSessionLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutSessionLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutSessionLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutSessionLogRequestMultiError, or nil if none found.
func (m *PutSessionLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutSessionLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantId

	// no validation rules for SessionId

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetOccurredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutSessionLogRequestValidationError{
					field:  "OccurredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutSessionLogRequestValidationError{
					field:  "OccurredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOccurredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutSessionLogRequestValidationError{
				field:  "OccurredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutSessionLogRequestMultiError(errors)
	}

	return nil
}

// PutSessionLogRequestMultiError is an error wrapping multiple validation
// errors returned by PutSessionLogRequest.ValidateAll() if the designated
// constraints aren't met.
type PutSessionLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutSessionLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutSessionLogRequestMultiError) AllErrors() []error { return m }

// PutSessionLogRequestValidationError is the validation error returned by
// PutSessionLogRequest.Validate if the designated constraints aren't met.
type PutSessionLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutSessionLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutSessionLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutSessionLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutSessionLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutSessionLogRequestValidationError) ErrorName() string {
	return "PutSessionLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutSessionLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutSessionLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutSessionLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutSessionLogRequestValidationError{}

// Validate checks the field values on PutSessionLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutSessionLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutSessionLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutSessionLogResponseMultiError, or nil if none found.
func (m *PutSessionLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutSessionLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutSessionLogResponseMultiError(errors)
	}

	return nil
}

// PutSessionLogResponseMultiError is an error wrapping multiple validation
// errors returned by PutSessionLogResponse.ValidateAll() if the designated
// constraints aren't met.
type PutSessionLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutSessionLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutSessionLogResponseMultiError) AllErrors() []error { return m }

// PutSessionLogResponseValidationError is the validation error returned by
// PutSessionLogResponse.Validate if the designated constraints aren't met.
type PutSessionLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutSessionLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutSessionLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutSessionLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutSessionLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutSessionLogResponseValidationError) ErrorName() string {
	return "PutSessionLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutSessionLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutSessionLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutSessionLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutSessionLogResponseValidationError{}
