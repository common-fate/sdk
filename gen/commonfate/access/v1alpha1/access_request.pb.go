// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: commonfate/access/v1alpha1/access_request.proto

package accessv1alpha1

import (
	_ "github.com/common-fate/sdk/gen/buf/validate"
	_ "github.com/common-fate/sdk/gen/commonfate/authz/v1alpha1"
	v1alpha11 "github.com/common-fate/sdk/gen/commonfate/entity/v1alpha1"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/filters/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestStatus int32

const (
	RequestStatus_REQUEST_STATUS_UNSPECIFIED RequestStatus = 0
	RequestStatus_REQUEST_STATUS_PENDING     RequestStatus = 1
	RequestStatus_REQUEST_STATUS_ACTIVE      RequestStatus = 2
	RequestStatus_REQUEST_STATUS_CLOSED      RequestStatus = 3
)

// Enum value maps for RequestStatus.
var (
	RequestStatus_name = map[int32]string{
		0: "REQUEST_STATUS_UNSPECIFIED",
		1: "REQUEST_STATUS_PENDING",
		2: "REQUEST_STATUS_ACTIVE",
		3: "REQUEST_STATUS_CLOSED",
	}
	RequestStatus_value = map[string]int32{
		"REQUEST_STATUS_UNSPECIFIED": 0,
		"REQUEST_STATUS_PENDING":     1,
		"REQUEST_STATUS_ACTIVE":      2,
		"REQUEST_STATUS_CLOSED":      3,
	}
)

func (x RequestStatus) Enum() *RequestStatus {
	p := new(RequestStatus)
	*p = x
	return p
}

func (x RequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_commonfate_access_v1alpha1_access_request_proto_enumTypes[0].Descriptor()
}

func (RequestStatus) Type() protoreflect.EnumType {
	return &file_commonfate_access_v1alpha1_access_request_proto_enumTypes[0]
}

func (x RequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatus.Descriptor instead.
func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{0}
}

type ClosingReason int32

const (
	ClosingReason_ACCESS_REQUEST_CLOSING_REASON_EXPIRED                         ClosingReason = 0
	ClosingReason_ACCESS_REQUEST_CLOSING_REASON_APPROVED_TO_ACTIVATION_EXPIRED  ClosingReason = 1
	ClosingReason_ACCESS_REQUEST_CLOSING_REASON_MANUAL                          ClosingReason = 2
	ClosingReason_ACCESS_REQUEST_CLOSING_REASON_REQUESTED_TO_APPROVED_EXPIRED   ClosingReason = 3
	ClosingReason_ACCESS_REQUEST_CLOSING_REASON_REQUESTED_TO_ACTIVATION_EXPIRED ClosingReason = 4
)

// Enum value maps for ClosingReason.
var (
	ClosingReason_name = map[int32]string{
		0: "ACCESS_REQUEST_CLOSING_REASON_EXPIRED",
		1: "ACCESS_REQUEST_CLOSING_REASON_APPROVED_TO_ACTIVATION_EXPIRED",
		2: "ACCESS_REQUEST_CLOSING_REASON_MANUAL",
		3: "ACCESS_REQUEST_CLOSING_REASON_REQUESTED_TO_APPROVED_EXPIRED",
		4: "ACCESS_REQUEST_CLOSING_REASON_REQUESTED_TO_ACTIVATION_EXPIRED",
	}
	ClosingReason_value = map[string]int32{
		"ACCESS_REQUEST_CLOSING_REASON_EXPIRED":                         0,
		"ACCESS_REQUEST_CLOSING_REASON_APPROVED_TO_ACTIVATION_EXPIRED":  1,
		"ACCESS_REQUEST_CLOSING_REASON_MANUAL":                          2,
		"ACCESS_REQUEST_CLOSING_REASON_REQUESTED_TO_APPROVED_EXPIRED":   3,
		"ACCESS_REQUEST_CLOSING_REASON_REQUESTED_TO_ACTIVATION_EXPIRED": 4,
	}
)

func (x ClosingReason) Enum() *ClosingReason {
	p := new(ClosingReason)
	*p = x
	return p
}

func (x ClosingReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClosingReason) Descriptor() protoreflect.EnumDescriptor {
	return file_commonfate_access_v1alpha1_access_request_proto_enumTypes[1].Descriptor()
}

func (ClosingReason) Type() protoreflect.EnumType {
	return &file_commonfate_access_v1alpha1_access_request_proto_enumTypes[1]
}

func (x ClosingReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClosingReason.Descriptor instead.
func (ClosingReason) EnumDescriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{1}
}

type AttachmentType int32

const (
	AttachmentType_ATTACHMENT_TYPE_UNSPECIFIED AttachmentType = 0
	AttachmentType_ATTACHMENT_TYPE_JIRA_TICKET AttachmentType = 1
)

// Enum value maps for AttachmentType.
var (
	AttachmentType_name = map[int32]string{
		0: "ATTACHMENT_TYPE_UNSPECIFIED",
		1: "ATTACHMENT_TYPE_JIRA_TICKET",
	}
	AttachmentType_value = map[string]int32{
		"ATTACHMENT_TYPE_UNSPECIFIED": 0,
		"ATTACHMENT_TYPE_JIRA_TICKET": 1,
	}
)

func (x AttachmentType) Enum() *AttachmentType {
	p := new(AttachmentType)
	*p = x
	return p
}

func (x AttachmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_commonfate_access_v1alpha1_access_request_proto_enumTypes[2].Descriptor()
}

func (AttachmentType) Type() protoreflect.EnumType {
	return &file_commonfate_access_v1alpha1_access_request_proto_enumTypes[2]
}

func (x AttachmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttachmentType.Descriptor instead.
func (AttachmentType) EnumDescriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{2}
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*Filter_RequestedBy
	//	*Filter_ClosedBy
	//	*Filter_ApprovedBy
	//	*Filter_ManuallyApproved
	//	*Filter_AutoApproved
	//	*Filter_GrantCount
	//	*Filter_RequestedAt
	//	*Filter_ApprovedAt
	//	*Filter_ClosedAt
	//	*Filter_ActivatedAt
	Filter isFilter_Filter `protobuf_oneof:"filter"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{0}
}

func (m *Filter) GetFilter() isFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *Filter) GetRequestedBy() *v1alpha1.EntityFilter {
	if x, ok := x.GetFilter().(*Filter_RequestedBy); ok {
		return x.RequestedBy
	}
	return nil
}

func (x *Filter) GetClosedBy() *v1alpha1.EntityFilter {
	if x, ok := x.GetFilter().(*Filter_ClosedBy); ok {
		return x.ClosedBy
	}
	return nil
}

func (x *Filter) GetApprovedBy() *v1alpha1.EntityFilter {
	if x, ok := x.GetFilter().(*Filter_ApprovedBy); ok {
		return x.ApprovedBy
	}
	return nil
}

func (x *Filter) GetManuallyApproved() *v1alpha1.BoolFilter {
	if x, ok := x.GetFilter().(*Filter_ManuallyApproved); ok {
		return x.ManuallyApproved
	}
	return nil
}

func (x *Filter) GetAutoApproved() *v1alpha1.BoolFilter {
	if x, ok := x.GetFilter().(*Filter_AutoApproved); ok {
		return x.AutoApproved
	}
	return nil
}

func (x *Filter) GetGrantCount() *v1alpha1.IntegerFilter {
	if x, ok := x.GetFilter().(*Filter_GrantCount); ok {
		return x.GrantCount
	}
	return nil
}

func (x *Filter) GetRequestedAt() *v1alpha1.TimeRangeFilter {
	if x, ok := x.GetFilter().(*Filter_RequestedAt); ok {
		return x.RequestedAt
	}
	return nil
}

func (x *Filter) GetApprovedAt() *v1alpha1.TimeRangeFilter {
	if x, ok := x.GetFilter().(*Filter_ApprovedAt); ok {
		return x.ApprovedAt
	}
	return nil
}

func (x *Filter) GetClosedAt() *v1alpha1.TimeRangeFilter {
	if x, ok := x.GetFilter().(*Filter_ClosedAt); ok {
		return x.ClosedAt
	}
	return nil
}

func (x *Filter) GetActivatedAt() *v1alpha1.TimeRangeFilter {
	if x, ok := x.GetFilter().(*Filter_ActivatedAt); ok {
		return x.ActivatedAt
	}
	return nil
}

type isFilter_Filter interface {
	isFilter_Filter()
}

type Filter_RequestedBy struct {
	RequestedBy *v1alpha1.EntityFilter `protobuf:"bytes,2,opt,name=requested_by,json=requestedBy,proto3,oneof"`
}

type Filter_ClosedBy struct {
	ClosedBy *v1alpha1.EntityFilter `protobuf:"bytes,3,opt,name=closed_by,json=closedBy,proto3,oneof"`
}

type Filter_ApprovedBy struct {
	ApprovedBy *v1alpha1.EntityFilter `protobuf:"bytes,4,opt,name=approved_by,json=approvedBy,proto3,oneof"`
}

type Filter_ManuallyApproved struct {
	// Whether or not the request received an approval
	ManuallyApproved *v1alpha1.BoolFilter `protobuf:"bytes,5,opt,name=manually_approved,json=manuallyApproved,proto3,oneof"`
}

type Filter_AutoApproved struct {
	// Whether or not the request was automatically approved
	AutoApproved *v1alpha1.BoolFilter `protobuf:"bytes,6,opt,name=auto_approved,json=autoApproved,proto3,oneof"`
}

type Filter_GrantCount struct {
	GrantCount *v1alpha1.IntegerFilter `protobuf:"bytes,7,opt,name=grant_count,json=grantCount,proto3,oneof"`
}

type Filter_RequestedAt struct {
	RequestedAt *v1alpha1.TimeRangeFilter `protobuf:"bytes,8,opt,name=requested_at,json=requestedAt,proto3,oneof"`
}

type Filter_ApprovedAt struct {
	ApprovedAt *v1alpha1.TimeRangeFilter `protobuf:"bytes,9,opt,name=approved_at,json=approvedAt,proto3,oneof"`
}

type Filter_ClosedAt struct {
	ClosedAt *v1alpha1.TimeRangeFilter `protobuf:"bytes,10,opt,name=closed_at,json=closedAt,proto3,oneof"`
}

type Filter_ActivatedAt struct {
	ActivatedAt *v1alpha1.TimeRangeFilter `protobuf:"bytes,11,opt,name=activated_at,json=activatedAt,proto3,oneof"`
}

func (*Filter_RequestedBy) isFilter_Filter() {}

func (*Filter_ClosedBy) isFilter_Filter() {}

func (*Filter_ApprovedBy) isFilter_Filter() {}

func (*Filter_ManuallyApproved) isFilter_Filter() {}

func (*Filter_AutoApproved) isFilter_Filter() {}

func (*Filter_GrantCount) isFilter_Filter() {}

func (*Filter_RequestedAt) isFilter_Filter() {}

func (*Filter_ApprovedAt) isFilter_Filter() {}

func (*Filter_ClosedAt) isFilter_Filter() {}

func (*Filter_ActivatedAt) isFilter_Filter() {}

type QueryAccessRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token for the next page.
	PageToken     string           `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Archived      bool             `protobuf:"varint,2,opt,name=archived,proto3" json:"archived,omitempty"`
	Order         *v1alpha11.Order `protobuf:"varint,3,opt,name=order,proto3,enum=commonfate.entity.v1alpha1.Order,oneof" json:"order,omitempty"`
	RequestStatus RequestStatus    `protobuf:"varint,7,opt,name=request_status,json=requestStatus,proto3,enum=commonfate.access.v1alpha1.RequestStatus" json:"request_status,omitempty"`
	Filters       []*Filter        `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit         int32            `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryAccessRequestsRequest) Reset() {
	*x = QueryAccessRequestsRequest{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAccessRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccessRequestsRequest) ProtoMessage() {}

func (x *QueryAccessRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccessRequestsRequest.ProtoReflect.Descriptor instead.
func (*QueryAccessRequestsRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{1}
}

func (x *QueryAccessRequestsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *QueryAccessRequestsRequest) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *QueryAccessRequestsRequest) GetOrder() v1alpha11.Order {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return v1alpha11.Order(0)
}

func (x *QueryAccessRequestsRequest) GetRequestStatus() RequestStatus {
	if x != nil {
		return x.RequestStatus
	}
	return RequestStatus_REQUEST_STATUS_UNSPECIFIED
}

func (x *QueryAccessRequestsRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *QueryAccessRequestsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueryMyAccessRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessRequests []*AccessRequest `protobuf:"bytes,1,rep,name=access_requests,json=accessRequests,proto3" json:"access_requests,omitempty"`
	NextPageToken  string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *QueryMyAccessRequestsResponse) Reset() {
	*x = QueryMyAccessRequestsResponse{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMyAccessRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMyAccessRequestsResponse) ProtoMessage() {}

func (x *QueryMyAccessRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMyAccessRequestsResponse.ProtoReflect.Descriptor instead.
func (*QueryMyAccessRequestsResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{2}
}

func (x *QueryMyAccessRequestsResponse) GetAccessRequests() []*AccessRequest {
	if x != nil {
		return x.AccessRequests
	}
	return nil
}

func (x *QueryMyAccessRequestsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type QueryMyAccessRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token for the next page.
	PageToken     string           `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Order         *v1alpha11.Order `protobuf:"varint,2,opt,name=order,proto3,enum=commonfate.entity.v1alpha1.Order,oneof" json:"order,omitempty"`
	RequestStatus RequestStatus    `protobuf:"varint,3,opt,name=request_status,json=requestStatus,proto3,enum=commonfate.access.v1alpha1.RequestStatus" json:"request_status,omitempty"`
	Filters       []*Filter        `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit         int32            `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryMyAccessRequestsRequest) Reset() {
	*x = QueryMyAccessRequestsRequest{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMyAccessRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMyAccessRequestsRequest) ProtoMessage() {}

func (x *QueryMyAccessRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMyAccessRequestsRequest.ProtoReflect.Descriptor instead.
func (*QueryMyAccessRequestsRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{3}
}

func (x *QueryMyAccessRequestsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *QueryMyAccessRequestsRequest) GetOrder() v1alpha11.Order {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return v1alpha11.Order(0)
}

func (x *QueryMyAccessRequestsRequest) GetRequestStatus() RequestStatus {
	if x != nil {
		return x.RequestStatus
	}
	return RequestStatus_REQUEST_STATUS_UNSPECIFIED
}

func (x *QueryMyAccessRequestsRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *QueryMyAccessRequestsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueryAccessRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessRequests []*AccessRequest `protobuf:"bytes,1,rep,name=access_requests,json=accessRequests,proto3" json:"access_requests,omitempty"`
	NextPageToken  string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *QueryAccessRequestsResponse) Reset() {
	*x = QueryAccessRequestsResponse{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAccessRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccessRequestsResponse) ProtoMessage() {}

func (x *QueryAccessRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccessRequestsResponse.ProtoReflect.Descriptor instead.
func (*QueryAccessRequestsResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{4}
}

func (x *QueryAccessRequestsResponse) GetAccessRequests() []*AccessRequest {
	if x != nil {
		return x.AccessRequests
	}
	return nil
}

func (x *QueryAccessRequestsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetAccessRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Access Request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAccessRequestRequest) Reset() {
	*x = GetAccessRequestRequest{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccessRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessRequestRequest) ProtoMessage() {}

func (x *GetAccessRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessRequestRequest.ProtoReflect.Descriptor instead.
func (*GetAccessRequestRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{5}
}

func (x *GetAccessRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAccessRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessRequest *AccessRequest `protobuf:"bytes,1,opt,name=access_request,json=accessRequest,proto3" json:"access_request,omitempty"`
}

func (x *GetAccessRequestResponse) Reset() {
	*x = GetAccessRequestResponse{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccessRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessRequestResponse) ProtoMessage() {}

func (x *GetAccessRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessRequestResponse.ProtoReflect.Descriptor instead.
func (*GetAccessRequestResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{6}
}

func (x *GetAccessRequestResponse) GetAccessRequest() *AccessRequest {
	if x != nil {
		return x.AccessRequest
	}
	return nil
}

type GetAccessRequestActionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessRequestId string `protobuf:"bytes,1,opt,name=access_request_id,json=accessRequestId,proto3" json:"access_request_id,omitempty"`
}

func (x *GetAccessRequestActionsRequest) Reset() {
	*x = GetAccessRequestActionsRequest{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccessRequestActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessRequestActionsRequest) ProtoMessage() {}

func (x *GetAccessRequestActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessRequestActionsRequest.ProtoReflect.Descriptor instead.
func (*GetAccessRequestActionsRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{7}
}

func (x *GetAccessRequestActionsRequest) GetAccessRequestId() string {
	if x != nil {
		return x.AccessRequestId
	}
	return ""
}

type GetAccessRequestActionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessRequestActions *AccessRequestActions `protobuf:"bytes,1,opt,name=access_request_actions,json=accessRequestActions,proto3" json:"access_request_actions,omitempty"`
}

func (x *GetAccessRequestActionsResponse) Reset() {
	*x = GetAccessRequestActionsResponse{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccessRequestActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessRequestActionsResponse) ProtoMessage() {}

func (x *GetAccessRequestActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessRequestActionsResponse.ProtoReflect.Descriptor instead.
func (*GetAccessRequestActionsResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{8}
}

func (x *GetAccessRequestActionsResponse) GetAccessRequestActions() *AccessRequestActions {
	if x != nil {
		return x.AccessRequestActions
	}
	return nil
}

// A request to be given entitlements allowing <Action> to be performed on <Resource>.
//
// For example, if the action is 'Admin', and the resource is AWS::Account::123456789012,
// This request is for entitlements allowing Admin access to the account 123456789012.
type AccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Access Request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Batch ID of the Access Request. Access Requests created in the same
	// API call have the same Batch ID.
	BatchId string `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The grants under consideration for access.
	Grants []*Grant `protobuf:"bytes,3,rep,name=grants,proto3" json:"grants,omitempty"`
	// An access request is reviewable if one or more Grants in the request
	// requires a manual review.
	Reviewable bool `protobuf:"varint,4,opt,name=reviewable,proto3" json:"reviewable,omitempty"`
	// True if the Access Request already existed and wasn't created by the API call.
	Existing bool `protobuf:"varint,5,opt,name=existing,proto3" json:"existing,omitempty"`
	// The timestamp that the request was created at.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The justification supplied when the request was created
	Justification *Justification `protobuf:"bytes,9,opt,name=justification,proto3" json:"justification,omitempty"`
	// The user or service account that requested the access.
	//
	// If a service account requested access, the 'name' and 'email' may be empty.
	Principal    *User   `protobuf:"bytes,10,opt,name=principal,proto3" json:"principal,omitempty"`
	WorkflowId   string  `protobuf:"bytes,11,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowName string  `protobuf:"bytes,12,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	Reviewers    []*User `protobuf:"bytes,13,rep,name=reviewers,proto3" json:"reviewers,omitempty"`
}

func (x *AccessRequest) Reset() {
	*x = AccessRequest{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequest) ProtoMessage() {}

func (x *AccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequest.ProtoReflect.Descriptor instead.
func (*AccessRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{9}
}

func (x *AccessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccessRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *AccessRequest) GetGrants() []*Grant {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *AccessRequest) GetReviewable() bool {
	if x != nil {
		return x.Reviewable
	}
	return false
}

func (x *AccessRequest) GetExisting() bool {
	if x != nil {
		return x.Existing
	}
	return false
}

func (x *AccessRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AccessRequest) GetJustification() *Justification {
	if x != nil {
		return x.Justification
	}
	return nil
}

func (x *AccessRequest) GetPrincipal() *User {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *AccessRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *AccessRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *AccessRequest) GetReviewers() []*User {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

type AccessRequestActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the current user is allowed to approve the access request
	ApproveAllowed bool `protobuf:"varint,1,opt,name=approve_allowed,json=approveAllowed,proto3" json:"approve_allowed,omitempty"`
	// True if the current user is allowed to activate the access request
	ActivateAllowed bool `protobuf:"varint,2,opt,name=activate_allowed,json=activateAllowed,proto3" json:"activate_allowed,omitempty"`
	// True if the current user is allowed to perform a breakglass activate on the access request
	// potentially bypassing approval requirements
	BreakglassActivateAllowed bool `protobuf:"varint,3,opt,name=breakglass_activate_allowed,json=breakglassActivateAllowed,proto3" json:"breakglass_activate_allowed,omitempty"`
	// True if the current user is allowed to extend the access request
	ExtendAllowed bool `protobuf:"varint,4,opt,name=extend_allowed,json=extendAllowed,proto3" json:"extend_allowed,omitempty"`
	// True if the user is allowed to forcibly close an access request.
	// When a request is force closed, the request is closed regardless
	// if a deprovisioning error occurs.
	ForceCloseAllowed bool `protobuf:"varint,5,opt,name=force_close_allowed,json=forceCloseAllowed,proto3" json:"force_close_allowed,omitempty"`
}

func (x *AccessRequestActions) Reset() {
	*x = AccessRequestActions{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRequestActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequestActions) ProtoMessage() {}

func (x *AccessRequestActions) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequestActions.ProtoReflect.Descriptor instead.
func (*AccessRequestActions) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{10}
}

func (x *AccessRequestActions) GetApproveAllowed() bool {
	if x != nil {
		return x.ApproveAllowed
	}
	return false
}

func (x *AccessRequestActions) GetActivateAllowed() bool {
	if x != nil {
		return x.ActivateAllowed
	}
	return false
}

func (x *AccessRequestActions) GetBreakglassActivateAllowed() bool {
	if x != nil {
		return x.BreakglassActivateAllowed
	}
	return false
}

func (x *AccessRequestActions) GetExtendAllowed() bool {
	if x != nil {
		return x.ExtendAllowed
	}
	return false
}

func (x *AccessRequestActions) GetForceCloseAllowed() bool {
	if x != nil {
		return x.ForceCloseAllowed
	}
	return false
}

type ApproveAccessRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Access Request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If provided, will only approve the grants with the specified IDs
	ApproveGrants []string `protobuf:"bytes,2,rep,name=approve_grants,json=approveGrants,proto3" json:"approve_grants,omitempty"`
}

func (x *ApproveAccessRequestRequest) Reset() {
	*x = ApproveAccessRequestRequest{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveAccessRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveAccessRequestRequest) ProtoMessage() {}

func (x *ApproveAccessRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveAccessRequestRequest.ProtoReflect.Descriptor instead.
func (*ApproveAccessRequestRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{11}
}

func (x *ApproveAccessRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApproveAccessRequestRequest) GetApproveGrants() []string {
	if x != nil {
		return x.ApproveGrants
	}
	return nil
}

type ApproveAccessRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *ApproveAccessRequestResponse) Reset() {
	*x = ApproveAccessRequestResponse{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveAccessRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveAccessRequestResponse) ProtoMessage() {}

func (x *ApproveAccessRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveAccessRequestResponse.ProtoReflect.Descriptor instead.
func (*ApproveAccessRequestResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{12}
}

func (x *ApproveAccessRequestResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type CloseAccessRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Access Request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If provided, will only close the grants with the specified IDs
	CloseGrants []string `protobuf:"bytes,2,rep,name=close_grants,json=closeGrants,proto3" json:"close_grants,omitempty"`
	// Forcibly close the Access Request. When a request is force closed,
	// the request is closed regardless if a deprovisioning error occurs.
	ForceClose    bool           `protobuf:"varint,3,opt,name=force_close,json=forceClose,proto3" json:"force_close,omitempty"`
	ClosingReason *ClosingReason `protobuf:"varint,4,opt,name=closing_reason,json=closingReason,proto3,enum=commonfate.access.v1alpha1.ClosingReason,oneof" json:"closing_reason,omitempty"`
}

func (x *CloseAccessRequestRequest) Reset() {
	*x = CloseAccessRequestRequest{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseAccessRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAccessRequestRequest) ProtoMessage() {}

func (x *CloseAccessRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAccessRequestRequest.ProtoReflect.Descriptor instead.
func (*CloseAccessRequestRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{13}
}

func (x *CloseAccessRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloseAccessRequestRequest) GetCloseGrants() []string {
	if x != nil {
		return x.CloseGrants
	}
	return nil
}

func (x *CloseAccessRequestRequest) GetForceClose() bool {
	if x != nil {
		return x.ForceClose
	}
	return false
}

func (x *CloseAccessRequestRequest) GetClosingReason() ClosingReason {
	if x != nil && x.ClosingReason != nil {
		return *x.ClosingReason
	}
	return ClosingReason_ACCESS_REQUEST_CLOSING_REASON_EXPIRED
}

type CloseAccessRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *CloseAccessRequestResponse) Reset() {
	*x = CloseAccessRequestResponse{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseAccessRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAccessRequestResponse) ProtoMessage() {}

func (x *CloseAccessRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAccessRequestResponse.ProtoReflect.Descriptor instead.
func (*CloseAccessRequestResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{14}
}

func (x *CloseAccessRequestResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type ActivateAccessRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Access Request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If provided, will only activate the grants with the specified IDs
	ActivateGrants []string `protobuf:"bytes,2,rep,name=activate_grants,json=activateGrants,proto3" json:"activate_grants,omitempty"`
	// If true, will attempt to activate if Access::Action::"BreakglassActivate" action is permitted for the user.
	// When configured, using this action will trigger notifications.
	Breakglass       bool   `protobuf:"varint,3,opt,name=breakglass,proto3" json:"breakglass,omitempty"`
	BreakglassReason string `protobuf:"bytes,4,opt,name=breakglass_reason,json=breakglassReason,proto3" json:"breakglass_reason,omitempty"`
}

func (x *ActivateAccessRequestRequest) Reset() {
	*x = ActivateAccessRequestRequest{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateAccessRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAccessRequestRequest) ProtoMessage() {}

func (x *ActivateAccessRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAccessRequestRequest.ProtoReflect.Descriptor instead.
func (*ActivateAccessRequestRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{15}
}

func (x *ActivateAccessRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActivateAccessRequestRequest) GetActivateGrants() []string {
	if x != nil {
		return x.ActivateGrants
	}
	return nil
}

func (x *ActivateAccessRequestRequest) GetBreakglass() bool {
	if x != nil {
		return x.Breakglass
	}
	return false
}

func (x *ActivateAccessRequestRequest) GetBreakglassReason() string {
	if x != nil {
		return x.BreakglassReason
	}
	return ""
}

type ActivateAccessRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *ActivateAccessRequestResponse) Reset() {
	*x = ActivateAccessRequestResponse{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateAccessRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAccessRequestResponse) ProtoMessage() {}

func (x *ActivateAccessRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAccessRequestResponse.ProtoReflect.Descriptor instead.
func (*ActivateAccessRequestResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{16}
}

func (x *ActivateAccessRequestResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type Justification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason      *string            `protobuf:"bytes,1,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Attachments []*AttachmentInput `protobuf:"bytes,2,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *Justification) Reset() {
	*x = Justification{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Justification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Justification) ProtoMessage() {}

func (x *Justification) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Justification.ProtoReflect.Descriptor instead.
func (*Justification) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{17}
}

func (x *Justification) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *Justification) GetAttachments() []*AttachmentInput {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type AttachmentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type AttachmentType `protobuf:"varint,1,opt,name=type,proto3,enum=commonfate.access.v1alpha1.AttachmentType" json:"type,omitempty"`
	// ID of the integration the attachment is associated with.
	IntegrationId string `protobuf:"bytes,2,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	// ID of the attachment, such as the Jira ticket ID.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AttachmentInput) Reset() {
	*x = AttachmentInput{}
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachmentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentInput) ProtoMessage() {}

func (x *AttachmentInput) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_request_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentInput.ProtoReflect.Descriptor instead.
func (*AttachmentInput) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP(), []int{18}
}

func (x *AttachmentInput) GetType() AttachmentType {
	if x != nil {
		return x.Type
	}
	return AttachmentType_ATTACHMENT_TYPE_UNSPECIFIED
}

func (x *AttachmentInput) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *AttachmentInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_commonfate_access_v1alpha1_access_request_proto protoreflect.FileDescriptor

var file_commonfate_access_v1alpha1_access_request_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5,
	0x06, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c,
	0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4b, 0x0a, 0x09,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc5, 0x02, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x50,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x9b,
	0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xab, 0x02, 0x0a,
	0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x32, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x83, 0x04, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x14, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x67, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x1b,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x22, 0x68, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xd9, 0x01, 0x0a,
	0x19, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0xb8, 0x02, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x67, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x91, 0x01, 0xba, 0x48, 0x8d, 0x01, 0x1a, 0x8a,
	0x01, 0x0a, 0x1a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x1a, 0x47, 0x21, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x67, 0x6c, 0x61, 0x73, 0x73, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27, 0x29, 0x22, 0x69, 0x0a, 0x1d, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x4a, 0x75, 0x73, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x88, 0x01, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x81, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xaa,
	0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x25, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x40, 0x0a, 0x3c, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a,
	0x24, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x3f, 0x0a, 0x3b, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x41, 0x0a, 0x3d, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x52, 0x0a, 0x0e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4a, 0x49, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x32,
	0x82, 0x08, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x83, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5,
	0x18, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x8b, 0x01,
	0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x15,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a,
	0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x88, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x12, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2d, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x41, 0x58, 0xaa, 0x02, 0x1a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x26, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x5c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commonfate_access_v1alpha1_access_request_proto_rawDescOnce sync.Once
	file_commonfate_access_v1alpha1_access_request_proto_rawDescData = file_commonfate_access_v1alpha1_access_request_proto_rawDesc
)

func file_commonfate_access_v1alpha1_access_request_proto_rawDescGZIP() []byte {
	file_commonfate_access_v1alpha1_access_request_proto_rawDescOnce.Do(func() {
		file_commonfate_access_v1alpha1_access_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonfate_access_v1alpha1_access_request_proto_rawDescData)
	})
	return file_commonfate_access_v1alpha1_access_request_proto_rawDescData
}

var file_commonfate_access_v1alpha1_access_request_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_commonfate_access_v1alpha1_access_request_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_commonfate_access_v1alpha1_access_request_proto_goTypes = []any{
	(RequestStatus)(0),                      // 0: commonfate.access.v1alpha1.RequestStatus
	(ClosingReason)(0),                      // 1: commonfate.access.v1alpha1.ClosingReason
	(AttachmentType)(0),                     // 2: commonfate.access.v1alpha1.AttachmentType
	(*Filter)(nil),                          // 3: commonfate.access.v1alpha1.Filter
	(*QueryAccessRequestsRequest)(nil),      // 4: commonfate.access.v1alpha1.QueryAccessRequestsRequest
	(*QueryMyAccessRequestsResponse)(nil),   // 5: commonfate.access.v1alpha1.QueryMyAccessRequestsResponse
	(*QueryMyAccessRequestsRequest)(nil),    // 6: commonfate.access.v1alpha1.QueryMyAccessRequestsRequest
	(*QueryAccessRequestsResponse)(nil),     // 7: commonfate.access.v1alpha1.QueryAccessRequestsResponse
	(*GetAccessRequestRequest)(nil),         // 8: commonfate.access.v1alpha1.GetAccessRequestRequest
	(*GetAccessRequestResponse)(nil),        // 9: commonfate.access.v1alpha1.GetAccessRequestResponse
	(*GetAccessRequestActionsRequest)(nil),  // 10: commonfate.access.v1alpha1.GetAccessRequestActionsRequest
	(*GetAccessRequestActionsResponse)(nil), // 11: commonfate.access.v1alpha1.GetAccessRequestActionsResponse
	(*AccessRequest)(nil),                   // 12: commonfate.access.v1alpha1.AccessRequest
	(*AccessRequestActions)(nil),            // 13: commonfate.access.v1alpha1.AccessRequestActions
	(*ApproveAccessRequestRequest)(nil),     // 14: commonfate.access.v1alpha1.ApproveAccessRequestRequest
	(*ApproveAccessRequestResponse)(nil),    // 15: commonfate.access.v1alpha1.ApproveAccessRequestResponse
	(*CloseAccessRequestRequest)(nil),       // 16: commonfate.access.v1alpha1.CloseAccessRequestRequest
	(*CloseAccessRequestResponse)(nil),      // 17: commonfate.access.v1alpha1.CloseAccessRequestResponse
	(*ActivateAccessRequestRequest)(nil),    // 18: commonfate.access.v1alpha1.ActivateAccessRequestRequest
	(*ActivateAccessRequestResponse)(nil),   // 19: commonfate.access.v1alpha1.ActivateAccessRequestResponse
	(*Justification)(nil),                   // 20: commonfate.access.v1alpha1.Justification
	(*AttachmentInput)(nil),                 // 21: commonfate.access.v1alpha1.AttachmentInput
	(*v1alpha1.EntityFilter)(nil),           // 22: commonfate.filters.v1alpha1.EntityFilter
	(*v1alpha1.BoolFilter)(nil),             // 23: commonfate.filters.v1alpha1.BoolFilter
	(*v1alpha1.IntegerFilter)(nil),          // 24: commonfate.filters.v1alpha1.IntegerFilter
	(*v1alpha1.TimeRangeFilter)(nil),        // 25: commonfate.filters.v1alpha1.TimeRangeFilter
	(v1alpha11.Order)(0),                    // 26: commonfate.entity.v1alpha1.Order
	(*Grant)(nil),                           // 27: commonfate.access.v1alpha1.Grant
	(*timestamppb.Timestamp)(nil),           // 28: google.protobuf.Timestamp
	(*User)(nil),                            // 29: commonfate.access.v1alpha1.User
	(*Diagnostic)(nil),                      // 30: commonfate.access.v1alpha1.Diagnostic
}
var file_commonfate_access_v1alpha1_access_request_proto_depIdxs = []int32{
	22, // 0: commonfate.access.v1alpha1.Filter.requested_by:type_name -> commonfate.filters.v1alpha1.EntityFilter
	22, // 1: commonfate.access.v1alpha1.Filter.closed_by:type_name -> commonfate.filters.v1alpha1.EntityFilter
	22, // 2: commonfate.access.v1alpha1.Filter.approved_by:type_name -> commonfate.filters.v1alpha1.EntityFilter
	23, // 3: commonfate.access.v1alpha1.Filter.manually_approved:type_name -> commonfate.filters.v1alpha1.BoolFilter
	23, // 4: commonfate.access.v1alpha1.Filter.auto_approved:type_name -> commonfate.filters.v1alpha1.BoolFilter
	24, // 5: commonfate.access.v1alpha1.Filter.grant_count:type_name -> commonfate.filters.v1alpha1.IntegerFilter
	25, // 6: commonfate.access.v1alpha1.Filter.requested_at:type_name -> commonfate.filters.v1alpha1.TimeRangeFilter
	25, // 7: commonfate.access.v1alpha1.Filter.approved_at:type_name -> commonfate.filters.v1alpha1.TimeRangeFilter
	25, // 8: commonfate.access.v1alpha1.Filter.closed_at:type_name -> commonfate.filters.v1alpha1.TimeRangeFilter
	25, // 9: commonfate.access.v1alpha1.Filter.activated_at:type_name -> commonfate.filters.v1alpha1.TimeRangeFilter
	26, // 10: commonfate.access.v1alpha1.QueryAccessRequestsRequest.order:type_name -> commonfate.entity.v1alpha1.Order
	0,  // 11: commonfate.access.v1alpha1.QueryAccessRequestsRequest.request_status:type_name -> commonfate.access.v1alpha1.RequestStatus
	3,  // 12: commonfate.access.v1alpha1.QueryAccessRequestsRequest.filters:type_name -> commonfate.access.v1alpha1.Filter
	12, // 13: commonfate.access.v1alpha1.QueryMyAccessRequestsResponse.access_requests:type_name -> commonfate.access.v1alpha1.AccessRequest
	26, // 14: commonfate.access.v1alpha1.QueryMyAccessRequestsRequest.order:type_name -> commonfate.entity.v1alpha1.Order
	0,  // 15: commonfate.access.v1alpha1.QueryMyAccessRequestsRequest.request_status:type_name -> commonfate.access.v1alpha1.RequestStatus
	3,  // 16: commonfate.access.v1alpha1.QueryMyAccessRequestsRequest.filters:type_name -> commonfate.access.v1alpha1.Filter
	12, // 17: commonfate.access.v1alpha1.QueryAccessRequestsResponse.access_requests:type_name -> commonfate.access.v1alpha1.AccessRequest
	12, // 18: commonfate.access.v1alpha1.GetAccessRequestResponse.access_request:type_name -> commonfate.access.v1alpha1.AccessRequest
	13, // 19: commonfate.access.v1alpha1.GetAccessRequestActionsResponse.access_request_actions:type_name -> commonfate.access.v1alpha1.AccessRequestActions
	27, // 20: commonfate.access.v1alpha1.AccessRequest.grants:type_name -> commonfate.access.v1alpha1.Grant
	28, // 21: commonfate.access.v1alpha1.AccessRequest.created_at:type_name -> google.protobuf.Timestamp
	20, // 22: commonfate.access.v1alpha1.AccessRequest.justification:type_name -> commonfate.access.v1alpha1.Justification
	29, // 23: commonfate.access.v1alpha1.AccessRequest.principal:type_name -> commonfate.access.v1alpha1.User
	29, // 24: commonfate.access.v1alpha1.AccessRequest.reviewers:type_name -> commonfate.access.v1alpha1.User
	30, // 25: commonfate.access.v1alpha1.ApproveAccessRequestResponse.diagnostics:type_name -> commonfate.access.v1alpha1.Diagnostic
	1,  // 26: commonfate.access.v1alpha1.CloseAccessRequestRequest.closing_reason:type_name -> commonfate.access.v1alpha1.ClosingReason
	30, // 27: commonfate.access.v1alpha1.CloseAccessRequestResponse.diagnostics:type_name -> commonfate.access.v1alpha1.Diagnostic
	30, // 28: commonfate.access.v1alpha1.ActivateAccessRequestResponse.diagnostics:type_name -> commonfate.access.v1alpha1.Diagnostic
	21, // 29: commonfate.access.v1alpha1.Justification.attachments:type_name -> commonfate.access.v1alpha1.AttachmentInput
	2,  // 30: commonfate.access.v1alpha1.AttachmentInput.type:type_name -> commonfate.access.v1alpha1.AttachmentType
	4,  // 31: commonfate.access.v1alpha1.AccessRequestService.QueryAccessRequests:input_type -> commonfate.access.v1alpha1.QueryAccessRequestsRequest
	6,  // 32: commonfate.access.v1alpha1.AccessRequestService.QueryMyAccessRequests:input_type -> commonfate.access.v1alpha1.QueryMyAccessRequestsRequest
	8,  // 33: commonfate.access.v1alpha1.AccessRequestService.GetAccessRequest:input_type -> commonfate.access.v1alpha1.GetAccessRequestRequest
	10, // 34: commonfate.access.v1alpha1.AccessRequestService.GetAccessRequestActions:input_type -> commonfate.access.v1alpha1.GetAccessRequestActionsRequest
	14, // 35: commonfate.access.v1alpha1.AccessRequestService.ApproveAccessRequest:input_type -> commonfate.access.v1alpha1.ApproveAccessRequestRequest
	18, // 36: commonfate.access.v1alpha1.AccessRequestService.ActivateAccessRequest:input_type -> commonfate.access.v1alpha1.ActivateAccessRequestRequest
	16, // 37: commonfate.access.v1alpha1.AccessRequestService.CloseAccessRequest:input_type -> commonfate.access.v1alpha1.CloseAccessRequestRequest
	7,  // 38: commonfate.access.v1alpha1.AccessRequestService.QueryAccessRequests:output_type -> commonfate.access.v1alpha1.QueryAccessRequestsResponse
	5,  // 39: commonfate.access.v1alpha1.AccessRequestService.QueryMyAccessRequests:output_type -> commonfate.access.v1alpha1.QueryMyAccessRequestsResponse
	9,  // 40: commonfate.access.v1alpha1.AccessRequestService.GetAccessRequest:output_type -> commonfate.access.v1alpha1.GetAccessRequestResponse
	11, // 41: commonfate.access.v1alpha1.AccessRequestService.GetAccessRequestActions:output_type -> commonfate.access.v1alpha1.GetAccessRequestActionsResponse
	15, // 42: commonfate.access.v1alpha1.AccessRequestService.ApproveAccessRequest:output_type -> commonfate.access.v1alpha1.ApproveAccessRequestResponse
	19, // 43: commonfate.access.v1alpha1.AccessRequestService.ActivateAccessRequest:output_type -> commonfate.access.v1alpha1.ActivateAccessRequestResponse
	17, // 44: commonfate.access.v1alpha1.AccessRequestService.CloseAccessRequest:output_type -> commonfate.access.v1alpha1.CloseAccessRequestResponse
	38, // [38:45] is the sub-list for method output_type
	31, // [31:38] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_commonfate_access_v1alpha1_access_request_proto_init() }
func file_commonfate_access_v1alpha1_access_request_proto_init() {
	if File_commonfate_access_v1alpha1_access_request_proto != nil {
		return
	}
	file_commonfate_access_v1alpha1_diagnostic_proto_init()
	file_commonfate_access_v1alpha1_grant_proto_init()
	file_commonfate_access_v1alpha1_user_proto_init()
	file_commonfate_access_v1alpha1_access_request_proto_msgTypes[0].OneofWrappers = []any{
		(*Filter_RequestedBy)(nil),
		(*Filter_ClosedBy)(nil),
		(*Filter_ApprovedBy)(nil),
		(*Filter_ManuallyApproved)(nil),
		(*Filter_AutoApproved)(nil),
		(*Filter_GrantCount)(nil),
		(*Filter_RequestedAt)(nil),
		(*Filter_ApprovedAt)(nil),
		(*Filter_ClosedAt)(nil),
		(*Filter_ActivatedAt)(nil),
	}
	file_commonfate_access_v1alpha1_access_request_proto_msgTypes[1].OneofWrappers = []any{}
	file_commonfate_access_v1alpha1_access_request_proto_msgTypes[3].OneofWrappers = []any{}
	file_commonfate_access_v1alpha1_access_request_proto_msgTypes[13].OneofWrappers = []any{}
	file_commonfate_access_v1alpha1_access_request_proto_msgTypes[17].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonfate_access_v1alpha1_access_request_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commonfate_access_v1alpha1_access_request_proto_goTypes,
		DependencyIndexes: file_commonfate_access_v1alpha1_access_request_proto_depIdxs,
		EnumInfos:         file_commonfate_access_v1alpha1_access_request_proto_enumTypes,
		MessageInfos:      file_commonfate_access_v1alpha1_access_request_proto_msgTypes,
	}.Build()
	File_commonfate_access_v1alpha1_access_request_proto = out.File
	file_commonfate_access_v1alpha1_access_request_proto_rawDesc = nil
	file_commonfate_access_v1alpha1_access_request_proto_goTypes = nil
	file_commonfate_access_v1alpha1_access_request_proto_depIdxs = nil
}
