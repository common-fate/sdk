// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/access/v1alpha1/grants.proto

package accessv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on QueryGrantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGrantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGrantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGrantsRequestMultiError, or nil if none found.
func (m *QueryGrantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGrantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryGrantsRequestValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryGrantsRequestValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryGrantsRequestValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryGrantsRequestValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryGrantsRequestValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryGrantsRequestValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryGrantsRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryGrantsRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryGrantsRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return QueryGrantsRequestMultiError(errors)
	}

	return nil
}

// QueryGrantsRequestMultiError is an error wrapping multiple validation errors
// returned by QueryGrantsRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryGrantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGrantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGrantsRequestMultiError) AllErrors() []error { return m }

// QueryGrantsRequestValidationError is the validation error returned by
// QueryGrantsRequest.Validate if the designated constraints aren't met.
type QueryGrantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGrantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGrantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGrantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGrantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGrantsRequestValidationError) ErrorName() string {
	return "QueryGrantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGrantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGrantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGrantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGrantsRequestValidationError{}

// Validate checks the field values on GetGrantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGrantRequestMultiError, or nil if none found.
func (m *GetGrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGrantRequestMultiError(errors)
	}

	return nil
}

// GetGrantRequestMultiError is an error wrapping multiple validation errors
// returned by GetGrantRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGrantRequestMultiError) AllErrors() []error { return m }

// GetGrantRequestValidationError is the validation error returned by
// GetGrantRequest.Validate if the designated constraints aren't met.
type GetGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGrantRequestValidationError) ErrorName() string { return "GetGrantRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGrantRequestValidationError{}

// Validate checks the field values on GetGrantResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGrantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGrantResponseMultiError, or nil if none found.
func (m *GetGrantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGrantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGrant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGrantResponseValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGrantResponseValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGrantResponseValidationError{
				field:  "Grant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGrantResponseMultiError(errors)
	}

	return nil
}

// GetGrantResponseMultiError is an error wrapping multiple validation errors
// returned by GetGrantResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGrantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGrantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGrantResponseMultiError) AllErrors() []error { return m }

// GetGrantResponseValidationError is the validation error returned by
// GetGrantResponse.Validate if the designated constraints aren't met.
type GetGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGrantResponseValidationError) ErrorName() string { return "GetGrantResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGrantResponseValidationError{}

// Validate checks the field values on QueryGrantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGrantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGrantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGrantsResponseMultiError, or nil if none found.
func (m *QueryGrantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGrantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGrants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryGrantsResponseValidationError{
						field:  fmt.Sprintf("Grants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryGrantsResponseValidationError{
						field:  fmt.Sprintf("Grants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryGrantsResponseValidationError{
					field:  fmt.Sprintf("Grants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return QueryGrantsResponseMultiError(errors)
	}

	return nil
}

// QueryGrantsResponseMultiError is an error wrapping multiple validation
// errors returned by QueryGrantsResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryGrantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGrantsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGrantsResponseMultiError) AllErrors() []error { return m }

// QueryGrantsResponseValidationError is the validation error returned by
// QueryGrantsResponse.Validate if the designated constraints aren't met.
type QueryGrantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGrantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGrantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGrantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGrantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGrantsResponseValidationError) ErrorName() string {
	return "QueryGrantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGrantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGrantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGrantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGrantsResponseValidationError{}

// Validate checks the field values on QueryGrantChildrenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGrantChildrenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGrantChildrenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGrantChildrenRequestMultiError, or nil if none found.
func (m *QueryGrantChildrenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGrantChildrenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PageToken

	if len(errors) > 0 {
		return QueryGrantChildrenRequestMultiError(errors)
	}

	return nil
}

// QueryGrantChildrenRequestMultiError is an error wrapping multiple validation
// errors returned by QueryGrantChildrenRequest.ValidateAll() if the
// designated constraints aren't met.
type QueryGrantChildrenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGrantChildrenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGrantChildrenRequestMultiError) AllErrors() []error { return m }

// QueryGrantChildrenRequestValidationError is the validation error returned by
// QueryGrantChildrenRequest.Validate if the designated constraints aren't met.
type QueryGrantChildrenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGrantChildrenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGrantChildrenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGrantChildrenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGrantChildrenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGrantChildrenRequestValidationError) ErrorName() string {
	return "QueryGrantChildrenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGrantChildrenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGrantChildrenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGrantChildrenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGrantChildrenRequestValidationError{}

// Validate checks the field values on QueryGrantChildrenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGrantChildrenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGrantChildrenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGrantChildrenResponseMultiError, or nil if none found.
func (m *QueryGrantChildrenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGrantChildrenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryGrantChildrenResponseValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryGrantChildrenResponseValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryGrantChildrenResponseValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return QueryGrantChildrenResponseMultiError(errors)
	}

	return nil
}

// QueryGrantChildrenResponseMultiError is an error wrapping multiple
// validation errors returned by QueryGrantChildrenResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryGrantChildrenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGrantChildrenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGrantChildrenResponseMultiError) AllErrors() []error { return m }

// QueryGrantChildrenResponseValidationError is the validation error returned
// by QueryGrantChildrenResponse.Validate if the designated constraints aren't met.
type QueryGrantChildrenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGrantChildrenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGrantChildrenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGrantChildrenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGrantChildrenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGrantChildrenResponseValidationError) ErrorName() string {
	return "QueryGrantChildrenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGrantChildrenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGrantChildrenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGrantChildrenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGrantChildrenResponseValidationError{}
