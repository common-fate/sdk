// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: commonfate/access/v1alpha1/access.proto

package accessv1alpha1

import (
	_ "github.com/common-fate/sdk/gen/commonfate/control/attest/v1alpha1"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/entity/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GrantChange int32

const (
	GrantChange_GRANT_CHANGE_UNSPECIFIED GrantChange = 0
	// The Grant has been newly requested
	GrantChange_GRANT_CHANGE_REQUESTED GrantChange = 1
	// The Grant has been activated
	GrantChange_GRANT_CHANGE_ACTIVATED GrantChange = 2
	// The Grant has been extended
	GrantChange_GRANT_CHANGE_EXTENDED GrantChange = 3
	// The provisioning process failed for the Grant
	GrantChange_GRANT_CHANGE_PROVISIONING_FAILED GrantChange = 4
)

// Enum value maps for GrantChange.
var (
	GrantChange_name = map[int32]string{
		0: "GRANT_CHANGE_UNSPECIFIED",
		1: "GRANT_CHANGE_REQUESTED",
		2: "GRANT_CHANGE_ACTIVATED",
		3: "GRANT_CHANGE_EXTENDED",
		4: "GRANT_CHANGE_PROVISIONING_FAILED",
	}
	GrantChange_value = map[string]int32{
		"GRANT_CHANGE_UNSPECIFIED":         0,
		"GRANT_CHANGE_REQUESTED":           1,
		"GRANT_CHANGE_ACTIVATED":           2,
		"GRANT_CHANGE_EXTENDED":            3,
		"GRANT_CHANGE_PROVISIONING_FAILED": 4,
	}
)

func (x GrantChange) Enum() *GrantChange {
	p := new(GrantChange)
	*p = x
	return p
}

func (x GrantChange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantChange) Descriptor() protoreflect.EnumDescriptor {
	return file_commonfate_access_v1alpha1_access_proto_enumTypes[0].Descriptor()
}

func (GrantChange) Type() protoreflect.EnumType {
	return &file_commonfate_access_v1alpha1_access_proto_enumTypes[0]
}

func (x GrantChange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantChange.Descriptor instead.
func (GrantChange) EnumDescriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{0}
}

type QueryAvailabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token for the next page.
	PageToken string `protobuf:"bytes,10,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *QueryAvailabilitiesRequest) Reset() {
	*x = QueryAvailabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAvailabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAvailabilitiesRequest) ProtoMessage() {}

func (x *QueryAvailabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAvailabilitiesRequest.ProtoReflect.Descriptor instead.
func (*QueryAvailabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{0}
}

func (x *QueryAvailabilitiesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QueryAvailabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Availabilities []*Availability `protobuf:"bytes,1,rep,name=availabilities,proto3" json:"availabilities,omitempty"`
	NextPageToken  string          `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *QueryAvailabilitiesResponse) Reset() {
	*x = QueryAvailabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAvailabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAvailabilitiesResponse) ProtoMessage() {}

func (x *QueryAvailabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAvailabilitiesResponse.ProtoReflect.Descriptor instead.
func (*QueryAvailabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{1}
}

func (x *QueryAvailabilitiesResponse) GetAvailabilities() []*Availability {
	if x != nil {
		return x.Availabilities
	}
	return nil
}

func (x *QueryAvailabilitiesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type Availability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is just used internally and isn't really shown to users except for debugging purposes.
	// users refer to entitlements by the target and role, rather than the internal ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The particular resource which this entitlement gives access to
	Target *NamedEID `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// The particular role this entitlement gives access to
	Role *NamedEID `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// the JIT workflow associated with the entitlement.
	WorkflowId string `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// The permitted access duration.
	Duration  *durationpb.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Priority  uint32               `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	Reviewers *v1alpha1.EID        `protobuf:"bytes,7,opt,name=reviewers,proto3" json:"reviewers,omitempty"`
	// the ID of the selector which was used to match the targets
	TargetSelector *v1alpha1.EID `protobuf:"bytes,8,opt,name=target_selector,json=targetSelector,proto3" json:"target_selector,omitempty"`
}

func (x *Availability) Reset() {
	*x = Availability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Availability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availability) ProtoMessage() {}

func (x *Availability) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availability.ProtoReflect.Descriptor instead.
func (*Availability) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{2}
}

func (x *Availability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Availability) GetTarget() *NamedEID {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Availability) GetRole() *NamedEID {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Availability) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *Availability) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Availability) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Availability) GetReviewers() *v1alpha1.EID {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

func (x *Availability) GetTargetSelector() *v1alpha1.EID {
	if x != nil {
		return x.TargetSelector
	}
	return nil
}

type Specifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Specify:
	//
	//	*Specifier_Eid
	//	*Specifier_Lookup
	Specify isSpecifier_Specify `protobuf_oneof:"specify"`
}

func (x *Specifier) Reset() {
	*x = Specifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specifier) ProtoMessage() {}

func (x *Specifier) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specifier.ProtoReflect.Descriptor instead.
func (*Specifier) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{3}
}

func (m *Specifier) GetSpecify() isSpecifier_Specify {
	if m != nil {
		return m.Specify
	}
	return nil
}

func (x *Specifier) GetEid() *v1alpha1.EID {
	if x, ok := x.GetSpecify().(*Specifier_Eid); ok {
		return x.Eid
	}
	return nil
}

func (x *Specifier) GetLookup() string {
	if x, ok := x.GetSpecify().(*Specifier_Lookup); ok {
		return x.Lookup
	}
	return ""
}

type isSpecifier_Specify interface {
	isSpecifier_Specify()
}

type Specifier_Eid struct {
	// Specify a resource using a EID. If you're using Common Fate programatically
	// and you know the resource you want to specify, you should use this field.
	Eid *v1alpha1.EID `protobuf:"bytes,1,opt,name=eid,proto3,oneof"`
}

type Specifier_Lookup struct {
	// Specify a resource using a string lookup. This is used in our CLI
	// to allow end users to look up resources by name, ID and/or EID.
	//
	// The order of matching is:
	// 1. the 'lookup' field will be parsed as a EID - if it's valid it will be a EID lookup
	// 2. the 'lookup' field will be matched against all resource IDs
	// 3. the 'lookup' field will be matched against all resource names.
	//
	// If the lookup is a valid EID but it is not found, the API will return a Not Found error.
	// The API will return an Invalid Arguments error if the lookup is ambiguous and could match
	// multiple resources.
	Lookup string `protobuf:"bytes,2,opt,name=lookup,proto3,oneof"`
}

func (*Specifier_Eid) isSpecifier_Specify() {}

func (*Specifier_Lookup) isSpecifier_Specify() {}

type EntitlementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The principal to grant access to.
	// If empty, the current caller will be used as the principal.
	Principal *Specifier `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// The resource to grant the principal access to.
	Target *Specifier `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// The role to grant the principal access to the resource with.
	Role *Specifier `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *EntitlementInput) Reset() {
	*x = EntitlementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitlementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementInput) ProtoMessage() {}

func (x *EntitlementInput) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementInput.ProtoReflect.Descriptor instead.
func (*EntitlementInput) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{4}
}

func (x *EntitlementInput) GetPrincipal() *Specifier {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *EntitlementInput) GetTarget() *Specifier {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *EntitlementInput) GetRole() *Specifier {
	if x != nil {
		return x.Role
	}
	return nil
}

type BatchEnsureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entitlements to request access to.
	Entitlements []*EntitlementInput `protobuf:"bytes,1,rep,name=entitlements,proto3" json:"entitlements,omitempty"`
	// Optional justification as to why access is required.
	Justification *Justification `protobuf:"bytes,2,opt,name=justification,proto3" json:"justification,omitempty"`
	// If true, will return a preview of changes rather than actually provisioning access.
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *BatchEnsureRequest) Reset() {
	*x = BatchEnsureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEnsureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEnsureRequest) ProtoMessage() {}

func (x *BatchEnsureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEnsureRequest.ProtoReflect.Descriptor instead.
func (*BatchEnsureRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{5}
}

func (x *BatchEnsureRequest) GetEntitlements() []*EntitlementInput {
	if x != nil {
		return x.Entitlements
	}
	return nil
}

func (x *BatchEnsureRequest) GetJustification() *Justification {
	if x != nil {
		return x.Justification
	}
	return nil
}

func (x *BatchEnsureRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type BatchEnsureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID which can be used to debug the evaluation of the access policies
	// associated with the request.
	TraceId string        `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Grants  []*GrantState `protobuf:"bytes,2,rep,name=grants,proto3" json:"grants,omitempty"`
	// User-facing diagnostic warnings, for messages such as the user not having permissions
	// to request some of the entitlements they asked for.
	//
	// Rather than failing the entire operation the Access Handler returns warnings.
	Diagnostics []*Diagnostic `protobuf:"bytes,6,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	RequestId   string        `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BatchEnsureResponse) Reset() {
	*x = BatchEnsureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEnsureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEnsureResponse) ProtoMessage() {}

func (x *BatchEnsureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEnsureResponse.ProtoReflect.Descriptor instead.
func (*BatchEnsureResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{6}
}

func (x *BatchEnsureResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *BatchEnsureResponse) GetGrants() []*GrantState {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *BatchEnsureResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *BatchEnsureResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GrantState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grant *Grant `protobuf:"bytes,1,opt,name=grant,proto3" json:"grant,omitempty"`
	// The change to the grant.
	// Will be unspecified if the grant has not been changed.
	Change GrantChange `protobuf:"varint,2,opt,name=change,proto3,enum=commonfate.access.v1alpha1.GrantChange" json:"change,omitempty"`
}

func (x *GrantState) Reset() {
	*x = GrantState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantState) ProtoMessage() {}

func (x *GrantState) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantState.ProtoReflect.Descriptor instead.
func (*GrantState) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{7}
}

func (x *GrantState) GetGrant() *Grant {
	if x != nil {
		return x.Grant
	}
	return nil
}

func (x *GrantState) GetChange() GrantChange {
	if x != nil {
		return x.Change
	}
	return GrantChange_GRANT_CHANGE_UNSPECIFIED
}

var File_commonfate_access_v1alpha1_access_proto protoreflect.FileDescriptor

var file_commonfate_access_v1alpha1_access_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x65, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x97, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x93, 0x03, 0x0a, 0x0c,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45,
	0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x49, 0x44, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x49,
	0x44, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x65, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x49, 0x44, 0x48, 0x00, 0x52, 0x03,
	0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x09, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x43, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xd0, 0x01, 0x0a,
	0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22,
	0xd9, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0a,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2a, 0xa4, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0x8c, 0x02, 0x0a, 0x0d,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a,
	0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x88, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x81, 0x02, 0x0a, 0x1e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d,
	0x66, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x41, 0x58, 0xaa, 0x02, 0x1a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x26, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x5c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commonfate_access_v1alpha1_access_proto_rawDescOnce sync.Once
	file_commonfate_access_v1alpha1_access_proto_rawDescData = file_commonfate_access_v1alpha1_access_proto_rawDesc
)

func file_commonfate_access_v1alpha1_access_proto_rawDescGZIP() []byte {
	file_commonfate_access_v1alpha1_access_proto_rawDescOnce.Do(func() {
		file_commonfate_access_v1alpha1_access_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonfate_access_v1alpha1_access_proto_rawDescData)
	})
	return file_commonfate_access_v1alpha1_access_proto_rawDescData
}

var file_commonfate_access_v1alpha1_access_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_commonfate_access_v1alpha1_access_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_commonfate_access_v1alpha1_access_proto_goTypes = []interface{}{
	(GrantChange)(0),                    // 0: commonfate.access.v1alpha1.GrantChange
	(*QueryAvailabilitiesRequest)(nil),  // 1: commonfate.access.v1alpha1.QueryAvailabilitiesRequest
	(*QueryAvailabilitiesResponse)(nil), // 2: commonfate.access.v1alpha1.QueryAvailabilitiesResponse
	(*Availability)(nil),                // 3: commonfate.access.v1alpha1.Availability
	(*Specifier)(nil),                   // 4: commonfate.access.v1alpha1.Specifier
	(*EntitlementInput)(nil),            // 5: commonfate.access.v1alpha1.EntitlementInput
	(*BatchEnsureRequest)(nil),          // 6: commonfate.access.v1alpha1.BatchEnsureRequest
	(*BatchEnsureResponse)(nil),         // 7: commonfate.access.v1alpha1.BatchEnsureResponse
	(*GrantState)(nil),                  // 8: commonfate.access.v1alpha1.GrantState
	(*NamedEID)(nil),                    // 9: commonfate.access.v1alpha1.NamedEID
	(*durationpb.Duration)(nil),         // 10: google.protobuf.Duration
	(*v1alpha1.EID)(nil),                // 11: commonfate.entity.v1alpha1.EID
	(*Justification)(nil),               // 12: commonfate.access.v1alpha1.Justification
	(*Diagnostic)(nil),                  // 13: commonfate.access.v1alpha1.Diagnostic
	(*Grant)(nil),                       // 14: commonfate.access.v1alpha1.Grant
}
var file_commonfate_access_v1alpha1_access_proto_depIdxs = []int32{
	3,  // 0: commonfate.access.v1alpha1.QueryAvailabilitiesResponse.availabilities:type_name -> commonfate.access.v1alpha1.Availability
	9,  // 1: commonfate.access.v1alpha1.Availability.target:type_name -> commonfate.access.v1alpha1.NamedEID
	9,  // 2: commonfate.access.v1alpha1.Availability.role:type_name -> commonfate.access.v1alpha1.NamedEID
	10, // 3: commonfate.access.v1alpha1.Availability.duration:type_name -> google.protobuf.Duration
	11, // 4: commonfate.access.v1alpha1.Availability.reviewers:type_name -> commonfate.entity.v1alpha1.EID
	11, // 5: commonfate.access.v1alpha1.Availability.target_selector:type_name -> commonfate.entity.v1alpha1.EID
	11, // 6: commonfate.access.v1alpha1.Specifier.eid:type_name -> commonfate.entity.v1alpha1.EID
	4,  // 7: commonfate.access.v1alpha1.EntitlementInput.principal:type_name -> commonfate.access.v1alpha1.Specifier
	4,  // 8: commonfate.access.v1alpha1.EntitlementInput.target:type_name -> commonfate.access.v1alpha1.Specifier
	4,  // 9: commonfate.access.v1alpha1.EntitlementInput.role:type_name -> commonfate.access.v1alpha1.Specifier
	5,  // 10: commonfate.access.v1alpha1.BatchEnsureRequest.entitlements:type_name -> commonfate.access.v1alpha1.EntitlementInput
	12, // 11: commonfate.access.v1alpha1.BatchEnsureRequest.justification:type_name -> commonfate.access.v1alpha1.Justification
	8,  // 12: commonfate.access.v1alpha1.BatchEnsureResponse.grants:type_name -> commonfate.access.v1alpha1.GrantState
	13, // 13: commonfate.access.v1alpha1.BatchEnsureResponse.diagnostics:type_name -> commonfate.access.v1alpha1.Diagnostic
	14, // 14: commonfate.access.v1alpha1.GrantState.grant:type_name -> commonfate.access.v1alpha1.Grant
	0,  // 15: commonfate.access.v1alpha1.GrantState.change:type_name -> commonfate.access.v1alpha1.GrantChange
	6,  // 16: commonfate.access.v1alpha1.AccessService.BatchEnsure:input_type -> commonfate.access.v1alpha1.BatchEnsureRequest
	1,  // 17: commonfate.access.v1alpha1.AccessService.QueryAvailabilities:input_type -> commonfate.access.v1alpha1.QueryAvailabilitiesRequest
	7,  // 18: commonfate.access.v1alpha1.AccessService.BatchEnsure:output_type -> commonfate.access.v1alpha1.BatchEnsureResponse
	2,  // 19: commonfate.access.v1alpha1.AccessService.QueryAvailabilities:output_type -> commonfate.access.v1alpha1.QueryAvailabilitiesResponse
	18, // [18:20] is the sub-list for method output_type
	16, // [16:18] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_commonfate_access_v1alpha1_access_proto_init() }
func file_commonfate_access_v1alpha1_access_proto_init() {
	if File_commonfate_access_v1alpha1_access_proto != nil {
		return
	}
	file_commonfate_access_v1alpha1_access_request_proto_init()
	file_commonfate_access_v1alpha1_grant_proto_init()
	file_commonfate_access_v1alpha1_diagnostic_proto_init()
	file_commonfate_access_v1alpha1_named_eid_proto_init()
	file_commonfate_access_v1alpha1_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_commonfate_access_v1alpha1_access_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAvailabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAvailabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Availability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitlementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEnsureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEnsureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_commonfate_access_v1alpha1_access_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Specifier_Eid)(nil),
		(*Specifier_Lookup)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonfate_access_v1alpha1_access_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commonfate_access_v1alpha1_access_proto_goTypes,
		DependencyIndexes: file_commonfate_access_v1alpha1_access_proto_depIdxs,
		EnumInfos:         file_commonfate_access_v1alpha1_access_proto_enumTypes,
		MessageInfos:      file_commonfate_access_v1alpha1_access_proto_msgTypes,
	}.Build()
	File_commonfate_access_v1alpha1_access_proto = out.File
	file_commonfate_access_v1alpha1_access_proto_rawDesc = nil
	file_commonfate_access_v1alpha1_access_proto_goTypes = nil
	file_commonfate_access_v1alpha1_access_proto_depIdxs = nil
}
