// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: commonfate/access/v1alpha1/access.proto

package accessv1alpha1

import (
	v1alpha11 "github.com/common-fate/sdk/gen/commonfate/authz/v1alpha1"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/entity/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GrantChange int32

const (
	GrantChange_GRANT_CHANGE_UNSPECIFIED GrantChange = 0
	// The Grant has been newly requested
	GrantChange_GRANT_CHANGE_REQUESTED GrantChange = 1
	// The Grant has been activated
	GrantChange_GRANT_CHANGE_ACTIVATED GrantChange = 2
	// The Grant has been extended
	GrantChange_GRANT_CHANGE_EXTENDED GrantChange = 3
	// The provisioning process failed for the Grant
	GrantChange_GRANT_CHANGE_PROVISIONING_FAILED GrantChange = 4
)

// Enum value maps for GrantChange.
var (
	GrantChange_name = map[int32]string{
		0: "GRANT_CHANGE_UNSPECIFIED",
		1: "GRANT_CHANGE_REQUESTED",
		2: "GRANT_CHANGE_ACTIVATED",
		3: "GRANT_CHANGE_EXTENDED",
		4: "GRANT_CHANGE_PROVISIONING_FAILED",
	}
	GrantChange_value = map[string]int32{
		"GRANT_CHANGE_UNSPECIFIED":         0,
		"GRANT_CHANGE_REQUESTED":           1,
		"GRANT_CHANGE_ACTIVATED":           2,
		"GRANT_CHANGE_EXTENDED":            3,
		"GRANT_CHANGE_PROVISIONING_FAILED": 4,
	}
)

func (x GrantChange) Enum() *GrantChange {
	p := new(GrantChange)
	*p = x
	return p
}

func (x GrantChange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantChange) Descriptor() protoreflect.EnumDescriptor {
	return file_commonfate_access_v1alpha1_access_proto_enumTypes[0].Descriptor()
}

func (GrantChange) Type() protoreflect.EnumType {
	return &file_commonfate_access_v1alpha1_access_proto_enumTypes[0]
}

func (x GrantChange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantChange.Descriptor instead.
func (GrantChange) EnumDescriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{0}
}

type QueryApproversRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*QueryApproversRequest_TargetRole
	//	*QueryApproversRequest_Grant
	Query isQueryApproversRequest_Query `protobuf_oneof:"query"`
}

func (x *QueryApproversRequest) Reset() {
	*x = QueryApproversRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryApproversRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryApproversRequest) ProtoMessage() {}

func (x *QueryApproversRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryApproversRequest.ProtoReflect.Descriptor instead.
func (*QueryApproversRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{0}
}

func (m *QueryApproversRequest) GetQuery() isQueryApproversRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *QueryApproversRequest) GetTargetRole() *TargetRole {
	if x, ok := x.GetQuery().(*QueryApproversRequest_TargetRole); ok {
		return x.TargetRole
	}
	return nil
}

func (x *QueryApproversRequest) GetGrant() *v1alpha1.EID {
	if x, ok := x.GetQuery().(*QueryApproversRequest_Grant); ok {
		return x.Grant
	}
	return nil
}

type isQueryApproversRequest_Query interface {
	isQueryApproversRequest_Query()
}

type QueryApproversRequest_TargetRole struct {
	TargetRole *TargetRole `protobuf:"bytes,1,opt,name=target_role,json=targetRole,proto3,oneof"`
}

type QueryApproversRequest_Grant struct {
	Grant *v1alpha1.EID `protobuf:"bytes,2,opt,name=grant,proto3,oneof"`
}

func (*QueryApproversRequest_TargetRole) isQueryApproversRequest_Query() {}

func (*QueryApproversRequest_Grant) isQueryApproversRequest_Query() {}

type TargetRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *Specifier `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Role   *Specifier `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *TargetRole) Reset() {
	*x = TargetRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetRole) ProtoMessage() {}

func (x *TargetRole) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetRole.ProtoReflect.Descriptor instead.
func (*TargetRole) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{1}
}

func (x *TargetRole) GetTarget() *Specifier {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *TargetRole) GetRole() *Specifier {
	if x != nil {
		return x.Role
	}
	return nil
}

type QueryApproversResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approvers []*User `protobuf:"bytes,1,rep,name=approvers,proto3" json:"approvers,omitempty"`
}

func (x *QueryApproversResponse) Reset() {
	*x = QueryApproversResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryApproversResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryApproversResponse) ProtoMessage() {}

func (x *QueryApproversResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryApproversResponse.ProtoReflect.Descriptor instead.
func (*QueryApproversResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{2}
}

func (x *QueryApproversResponse) GetApprovers() []*User {
	if x != nil {
		return x.Approvers
	}
	return nil
}

type QueryAvailabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token for the next page.
	PageToken string `protobuf:"bytes,10,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *QueryAvailabilitiesRequest) Reset() {
	*x = QueryAvailabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAvailabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAvailabilitiesRequest) ProtoMessage() {}

func (x *QueryAvailabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAvailabilitiesRequest.ProtoReflect.Descriptor instead.
func (*QueryAvailabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{3}
}

func (x *QueryAvailabilitiesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QueryAvailabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Availabilities []*Availability `protobuf:"bytes,1,rep,name=availabilities,proto3" json:"availabilities,omitempty"`
	NextPageToken  string          `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *QueryAvailabilitiesResponse) Reset() {
	*x = QueryAvailabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAvailabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAvailabilitiesResponse) ProtoMessage() {}

func (x *QueryAvailabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAvailabilitiesResponse.ProtoReflect.Descriptor instead.
func (*QueryAvailabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{4}
}

func (x *QueryAvailabilitiesResponse) GetAvailabilities() []*Availability {
	if x != nil {
		return x.Availabilities
	}
	return nil
}

func (x *QueryAvailabilitiesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type QueryEntitlementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetType *string `protobuf:"bytes,1,opt,name=target_type,json=targetType,proto3,oneof" json:"target_type,omitempty"`
	// The token for the next page.
	PageToken string `protobuf:"bytes,10,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *QueryEntitlementsRequest) Reset() {
	*x = QueryEntitlementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEntitlementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEntitlementsRequest) ProtoMessage() {}

func (x *QueryEntitlementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEntitlementsRequest.ProtoReflect.Descriptor instead.
func (*QueryEntitlementsRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{5}
}

func (x *QueryEntitlementsRequest) GetTargetType() string {
	if x != nil && x.TargetType != nil {
		return *x.TargetType
	}
	return ""
}

func (x *QueryEntitlementsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QueryEntitlementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entitlements  []*Entitlement `protobuf:"bytes,1,rep,name=entitlements,proto3" json:"entitlements,omitempty"`
	NextPageToken string         `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *QueryEntitlementsResponse) Reset() {
	*x = QueryEntitlementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEntitlementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEntitlementsResponse) ProtoMessage() {}

func (x *QueryEntitlementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEntitlementsResponse.ProtoReflect.Descriptor instead.
func (*QueryEntitlementsResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{6}
}

func (x *QueryEntitlementsResponse) GetEntitlements() []*Entitlement {
	if x != nil {
		return x.Entitlements
	}
	return nil
}

func (x *QueryEntitlementsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type PreviewUserAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal  *Specifier `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	TargetType *string    `protobuf:"bytes,2,opt,name=target_type,json=targetType,proto3,oneof" json:"target_type,omitempty"`
}

func (x *PreviewUserAccessRequest) Reset() {
	*x = PreviewUserAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewUserAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewUserAccessRequest) ProtoMessage() {}

func (x *PreviewUserAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewUserAccessRequest.ProtoReflect.Descriptor instead.
func (*PreviewUserAccessRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{7}
}

func (x *PreviewUserAccessRequest) GetPrincipal() *Specifier {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *PreviewUserAccessRequest) GetTargetType() string {
	if x != nil && x.TargetType != nil {
		return *x.TargetType
	}
	return ""
}

type PreviewUserAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entitlements []*Entitlement `protobuf:"bytes,1,rep,name=entitlements,proto3" json:"entitlements,omitempty"`
}

func (x *PreviewUserAccessResponse) Reset() {
	*x = PreviewUserAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewUserAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewUserAccessResponse) ProtoMessage() {}

func (x *PreviewUserAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewUserAccessResponse.ProtoReflect.Descriptor instead.
func (*PreviewUserAccessResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{8}
}

func (x *PreviewUserAccessResponse) GetEntitlements() []*Entitlement {
	if x != nil {
		return x.Entitlements
	}
	return nil
}

type PreviewEntitlementAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *Specifier `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Role   *Specifier `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *PreviewEntitlementAccessRequest) Reset() {
	*x = PreviewEntitlementAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewEntitlementAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewEntitlementAccessRequest) ProtoMessage() {}

func (x *PreviewEntitlementAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewEntitlementAccessRequest.ProtoReflect.Descriptor instead.
func (*PreviewEntitlementAccessRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{9}
}

func (x *PreviewEntitlementAccessRequest) GetTarget() *Specifier {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *PreviewEntitlementAccessRequest) GetRole() *Specifier {
	if x != nil {
		return x.Role
	}
	return nil
}

type PreviewEntitlementAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The principals which have access to request access and whether that access will be auto approved
	Access []*PrincipalAccess `protobuf:"bytes,1,rep,name=access,proto3" json:"access,omitempty"`
}

func (x *PreviewEntitlementAccessResponse) Reset() {
	*x = PreviewEntitlementAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewEntitlementAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewEntitlementAccessResponse) ProtoMessage() {}

func (x *PreviewEntitlementAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewEntitlementAccessResponse.ProtoReflect.Descriptor instead.
func (*PreviewEntitlementAccessResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{10}
}

func (x *PreviewEntitlementAccessResponse) GetAccess() []*PrincipalAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

type DebugEntitlementAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal *Specifier `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	Target    *Specifier `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Role      *Specifier `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *DebugEntitlementAccessRequest) Reset() {
	*x = DebugEntitlementAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugEntitlementAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugEntitlementAccessRequest) ProtoMessage() {}

func (x *DebugEntitlementAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugEntitlementAccessRequest.ProtoReflect.Descriptor instead.
func (*DebugEntitlementAccessRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{11}
}

func (x *DebugEntitlementAccessRequest) GetPrincipal() *Specifier {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *DebugEntitlementAccessRequest) GetTarget() *Specifier {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DebugEntitlementAccessRequest) GetRole() *Specifier {
	if x != nil {
		return x.Role
	}
	return nil
}

type DebugEntitlementAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the principal can request access to this entitlement
	CanRequest bool `protobuf:"varint,1,opt,name=can_request,json=canRequest,proto3" json:"can_request,omitempty"`
	// Whether or not it is auto approved
	AutoApproved bool `protobuf:"varint,2,opt,name=auto_approved,json=autoApproved,proto3" json:"auto_approved,omitempty"`
	// The Cedar Policys which contributed to the authorizations decisions
	Reason *EntitlementAccessReason `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Cedar PolicySets which contributed to the authorization decisions.
	PolicySets []*v1alpha11.PolicySet `protobuf:"bytes,4,rep,name=policy_sets,json=policySets,proto3" json:"policy_sets,omitempty"`
	// Entities which contributed to the authorization decisions.
	Entities []*v1alpha1.Entity `protobuf:"bytes,5,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *DebugEntitlementAccessResponse) Reset() {
	*x = DebugEntitlementAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugEntitlementAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugEntitlementAccessResponse) ProtoMessage() {}

func (x *DebugEntitlementAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugEntitlementAccessResponse.ProtoReflect.Descriptor instead.
func (*DebugEntitlementAccessResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{12}
}

func (x *DebugEntitlementAccessResponse) GetCanRequest() bool {
	if x != nil {
		return x.CanRequest
	}
	return false
}

func (x *DebugEntitlementAccessResponse) GetAutoApproved() bool {
	if x != nil {
		return x.AutoApproved
	}
	return false
}

func (x *DebugEntitlementAccessResponse) GetReason() *EntitlementAccessReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *DebugEntitlementAccessResponse) GetPolicySets() []*v1alpha11.PolicySet {
	if x != nil {
		return x.PolicySets
	}
	return nil
}

func (x *DebugEntitlementAccessResponse) GetEntities() []*v1alpha1.Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type EntitlementAccessReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cedar Policy IDs which contributed to the can_request authorization decision.
	CanRequestReason []string `protobuf:"bytes,1,rep,name=can_request_reason,json=canRequestReason,proto3" json:"can_request_reason,omitempty"`
	// Cedar Policy IDs which contributed to the auto_approval authorization decision.
	AutoApprovalReason []string `protobuf:"bytes,2,rep,name=auto_approval_reason,json=autoApprovalReason,proto3" json:"auto_approval_reason,omitempty"`
}

func (x *EntitlementAccessReason) Reset() {
	*x = EntitlementAccessReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitlementAccessReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementAccessReason) ProtoMessage() {}

func (x *EntitlementAccessReason) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementAccessReason.ProtoReflect.Descriptor instead.
func (*EntitlementAccessReason) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{13}
}

func (x *EntitlementAccessReason) GetCanRequestReason() []string {
	if x != nil {
		return x.CanRequestReason
	}
	return nil
}

func (x *EntitlementAccessReason) GetAutoApprovalReason() []string {
	if x != nil {
		return x.AutoApprovalReason
	}
	return nil
}

type PrincipalAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal *User `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// Whether or not it is auto approved
	AutoApproved bool `protobuf:"varint,2,opt,name=auto_approved,json=autoApproved,proto3" json:"auto_approved,omitempty"`
	// The Cedar Policys which contributed to the authorizations decisions
	Reason *EntitlementAccessReason `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *PrincipalAccess) Reset() {
	*x = PrincipalAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrincipalAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalAccess) ProtoMessage() {}

func (x *PrincipalAccess) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalAccess.ProtoReflect.Descriptor instead.
func (*PrincipalAccess) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{14}
}

func (x *PrincipalAccess) GetPrincipal() *User {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *PrincipalAccess) GetAutoApproved() bool {
	if x != nil {
		return x.AutoApproved
	}
	return false
}

func (x *PrincipalAccess) GetReason() *EntitlementAccessReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

type Entitlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The particular resource which this entitlement gives access to
	Target *NamedEID `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The particular role this entitlement gives access to
	Role *NamedEID `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// Whether or not it is auto approved
	AutoApproved bool `protobuf:"varint,3,opt,name=auto_approved,json=autoApproved,proto3" json:"auto_approved,omitempty"`
	// target_path is the hierarchical path to the particular entitlement target.
	// It is used in the Common Fate web console to display entitlements in a hierarchy view.
	// For example, an AWS account entitlement will have a path of
	// `Root OU -> Parent OU -> Child OU.`
	//
	// target_path is in sorted order, from the root path node to the immediate parent of the target.
	//
	// The target_path does not include the target itself.
	TargetPath []*NamedEID `protobuf:"bytes,4,rep,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	// The Cedar Policys which contributed to the authorizations decisions
	Reason *EntitlementAccessReason `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Entitlement) Reset() {
	*x = Entitlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entitlement) ProtoMessage() {}

func (x *Entitlement) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entitlement.ProtoReflect.Descriptor instead.
func (*Entitlement) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{15}
}

func (x *Entitlement) GetTarget() *NamedEID {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Entitlement) GetRole() *NamedEID {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Entitlement) GetAutoApproved() bool {
	if x != nil {
		return x.AutoApproved
	}
	return false
}

func (x *Entitlement) GetTargetPath() []*NamedEID {
	if x != nil {
		return x.TargetPath
	}
	return nil
}

func (x *Entitlement) GetReason() *EntitlementAccessReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

type Availability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is just used internally and isn't really shown to users except for debugging purposes.
	// users refer to entitlements by the target and role, rather than the internal ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The particular resource which this entitlement gives access to
	Target *NamedEID `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// The particular role this entitlement gives access to
	Role *NamedEID `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	// the JIT workflow associated with the entitlement.
	WorkflowId string `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// The permitted access duration.
	Duration  *durationpb.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Priority  uint32               `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	Reviewers *v1alpha1.EID        `protobuf:"bytes,7,opt,name=reviewers,proto3" json:"reviewers,omitempty"`
	// the ID of the selector which was used to match the targets
	TargetSelector *v1alpha1.EID `protobuf:"bytes,8,opt,name=target_selector,json=targetSelector,proto3" json:"target_selector,omitempty"`
	// The default duration of the access.
	DefaultDuration *durationpb.Duration `protobuf:"bytes,9,opt,name=default_duration,json=defaultDuration,proto3" json:"default_duration,omitempty"`
}

func (x *Availability) Reset() {
	*x = Availability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Availability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availability) ProtoMessage() {}

func (x *Availability) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availability.ProtoReflect.Descriptor instead.
func (*Availability) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{16}
}

func (x *Availability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Availability) GetTarget() *NamedEID {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Availability) GetRole() *NamedEID {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Availability) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *Availability) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Availability) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Availability) GetReviewers() *v1alpha1.EID {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

func (x *Availability) GetTargetSelector() *v1alpha1.EID {
	if x != nil {
		return x.TargetSelector
	}
	return nil
}

func (x *Availability) GetDefaultDuration() *durationpb.Duration {
	if x != nil {
		return x.DefaultDuration
	}
	return nil
}

type Specifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Specify:
	//
	//	*Specifier_Eid
	//	*Specifier_Lookup
	Specify isSpecifier_Specify `protobuf_oneof:"specify"`
}

func (x *Specifier) Reset() {
	*x = Specifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specifier) ProtoMessage() {}

func (x *Specifier) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specifier.ProtoReflect.Descriptor instead.
func (*Specifier) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{17}
}

func (m *Specifier) GetSpecify() isSpecifier_Specify {
	if m != nil {
		return m.Specify
	}
	return nil
}

func (x *Specifier) GetEid() *v1alpha1.EID {
	if x, ok := x.GetSpecify().(*Specifier_Eid); ok {
		return x.Eid
	}
	return nil
}

func (x *Specifier) GetLookup() string {
	if x, ok := x.GetSpecify().(*Specifier_Lookup); ok {
		return x.Lookup
	}
	return ""
}

type isSpecifier_Specify interface {
	isSpecifier_Specify()
}

type Specifier_Eid struct {
	// Specify a resource using a EID. If you're using Common Fate programatically
	// and you know the resource you want to specify, you should use this field.
	Eid *v1alpha1.EID `protobuf:"bytes,1,opt,name=eid,proto3,oneof"`
}

type Specifier_Lookup struct {
	// Specify a resource using a string lookup. This is used in our CLI
	// to allow end users to look up resources by name, ID and/or EID.
	//
	// The order of matching is:
	// 1. the 'lookup' field will be parsed as a EID - if it's valid it will be a EID lookup
	// 2. the 'lookup' field will be matched against all resource IDs
	// 3. the 'lookup' field will be matched against all resource names.
	//
	// If the lookup is a valid EID but it is not found, the API will return a Not Found error.
	// The API will return an Invalid Arguments error if the lookup is ambiguous and could match
	// multiple resources.
	Lookup string `protobuf:"bytes,2,opt,name=lookup,proto3,oneof"`
}

func (*Specifier_Eid) isSpecifier_Specify() {}

func (*Specifier_Lookup) isSpecifier_Specify() {}

type EntitlementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The principal to grant access to.
	// If empty, the current caller will be used as the principal.
	Principal *Specifier `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// The resource to grant the principal access to.
	Target *Specifier `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// The role to grant the principal access to the resource with.
	Role     *Specifier           `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,4,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
}

func (x *EntitlementInput) Reset() {
	*x = EntitlementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitlementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementInput) ProtoMessage() {}

func (x *EntitlementInput) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementInput.ProtoReflect.Descriptor instead.
func (*EntitlementInput) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{18}
}

func (x *EntitlementInput) GetPrincipal() *Specifier {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *EntitlementInput) GetTarget() *Specifier {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *EntitlementInput) GetRole() *Specifier {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *EntitlementInput) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type BatchEnsureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entitlements to request access to.
	Entitlements []*EntitlementInput `protobuf:"bytes,1,rep,name=entitlements,proto3" json:"entitlements,omitempty"`
	// Optional justification as to why access is required.
	Justification *Justification `protobuf:"bytes,2,opt,name=justification,proto3" json:"justification,omitempty"`
	// If true, will return a preview of changes rather than actually provisioning access.
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *BatchEnsureRequest) Reset() {
	*x = BatchEnsureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEnsureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEnsureRequest) ProtoMessage() {}

func (x *BatchEnsureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEnsureRequest.ProtoReflect.Descriptor instead.
func (*BatchEnsureRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{19}
}

func (x *BatchEnsureRequest) GetEntitlements() []*EntitlementInput {
	if x != nil {
		return x.Entitlements
	}
	return nil
}

func (x *BatchEnsureRequest) GetJustification() *Justification {
	if x != nil {
		return x.Justification
	}
	return nil
}

func (x *BatchEnsureRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type BatchEnsureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID which can be used to debug the evaluation of the access policies
	// associated with the request.
	TraceId string        `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Grants  []*GrantState `protobuf:"bytes,2,rep,name=grants,proto3" json:"grants,omitempty"`
	// User-facing diagnostic warnings, for messages such as the user not having permissions
	// to request some of the entitlements they asked for.
	//
	// Rather than failing the entire operation the Access Handler returns warnings.
	Diagnostics []*Diagnostic `protobuf:"bytes,6,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *BatchEnsureResponse) Reset() {
	*x = BatchEnsureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEnsureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEnsureResponse) ProtoMessage() {}

func (x *BatchEnsureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEnsureResponse.ProtoReflect.Descriptor instead.
func (*BatchEnsureResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{20}
}

func (x *BatchEnsureResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *BatchEnsureResponse) GetGrants() []*GrantState {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *BatchEnsureResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type GrantState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grant *Grant `protobuf:"bytes,1,opt,name=grant,proto3" json:"grant,omitempty"`
	// The change to the grant.
	// Will be unspecified if the grant has not been changed.
	Change GrantChange `protobuf:"varint,2,opt,name=change,proto3,enum=commonfate.access.v1alpha1.GrantChange" json:"change,omitempty"`
	// A hint to the client as to the required justification
	// for access.
	//
	// Will be nil if no justification is needed.
	NeedsJustification *NeedsJustification `protobuf:"bytes,3,opt,name=needs_justification,json=needsJustification,proto3" json:"needs_justification,omitempty"`
}

func (x *GrantState) Reset() {
	*x = GrantState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantState) ProtoMessage() {}

func (x *GrantState) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantState.ProtoReflect.Descriptor instead.
func (*GrantState) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{21}
}

func (x *GrantState) GetGrant() *Grant {
	if x != nil {
		return x.Grant
	}
	return nil
}

func (x *GrantState) GetChange() GrantChange {
	if x != nil {
		return x.Change
	}
	return GrantChange_GRANT_CHANGE_UNSPECIFIED
}

func (x *GrantState) GetNeedsJustification() *NeedsJustification {
	if x != nil {
		return x.NeedsJustification
	}
	return nil
}

type NeedsJustification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if a reason is required for access.
	RequiresReason bool `protobuf:"varint,1,opt,name=requires_reason,json=requiresReason,proto3" json:"requires_reason,omitempty"`
}

func (x *NeedsJustification) Reset() {
	*x = NeedsJustification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeedsJustification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeedsJustification) ProtoMessage() {}

func (x *NeedsJustification) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_access_v1alpha1_access_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeedsJustification.ProtoReflect.Descriptor instead.
func (*NeedsJustification) Descriptor() ([]byte, []int) {
	return file_commonfate_access_v1alpha1_access_proto_rawDescGZIP(), []int{22}
}

func (x *NeedsJustification) GetRequiresReason() bool {
	if x != nil {
		return x.RequiresReason
	}
	return false
}

var File_commonfate_access_v1alpha1_access_proto protoreflect.FileDescriptor

var file_commonfate_access_v1alpha1_access_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa4, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x49, 0x44, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0x58, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x1a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x6f, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a,
	0x19, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x67, 0x0a, 0x20, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xde,
	0x01, 0x0a, 0x1d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0xba, 0x02, 0x0a, 0x1e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x17,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xbe, 0x02,
	0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x45, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x49, 0x44, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75,
	0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x45, 0x49, 0x44, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd9,
	0x03, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x45, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x49,
	0x44, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x49, 0x44, 0x52,
	0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x49, 0x44, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x09, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x49, 0x44, 0x48, 0x00, 0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x06,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x79, 0x22, 0x9a, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd0,
	0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x75, 0x73, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x22, 0xba, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xe7,
	0x01, 0x0a, 0x0a, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x5f, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x4a, 0x75, 0x73, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x12, 0x4e, 0x65, 0x65, 0x64,
	0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0xa4, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x41, 0x4e, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0xd7,
	0x07, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x70, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x12,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18,
	0x01, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x7d, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5,
	0x18, 0x01, 0x12, 0x9b, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01,
	0x12, 0x95, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x42, 0x81, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0b, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x66, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x41, 0x58, 0xaa, 0x02, 0x1a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x5c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x26, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x5c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commonfate_access_v1alpha1_access_proto_rawDescOnce sync.Once
	file_commonfate_access_v1alpha1_access_proto_rawDescData = file_commonfate_access_v1alpha1_access_proto_rawDesc
)

func file_commonfate_access_v1alpha1_access_proto_rawDescGZIP() []byte {
	file_commonfate_access_v1alpha1_access_proto_rawDescOnce.Do(func() {
		file_commonfate_access_v1alpha1_access_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonfate_access_v1alpha1_access_proto_rawDescData)
	})
	return file_commonfate_access_v1alpha1_access_proto_rawDescData
}

var file_commonfate_access_v1alpha1_access_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_commonfate_access_v1alpha1_access_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_commonfate_access_v1alpha1_access_proto_goTypes = []interface{}{
	(GrantChange)(0),                         // 0: commonfate.access.v1alpha1.GrantChange
	(*QueryApproversRequest)(nil),            // 1: commonfate.access.v1alpha1.QueryApproversRequest
	(*TargetRole)(nil),                       // 2: commonfate.access.v1alpha1.TargetRole
	(*QueryApproversResponse)(nil),           // 3: commonfate.access.v1alpha1.QueryApproversResponse
	(*QueryAvailabilitiesRequest)(nil),       // 4: commonfate.access.v1alpha1.QueryAvailabilitiesRequest
	(*QueryAvailabilitiesResponse)(nil),      // 5: commonfate.access.v1alpha1.QueryAvailabilitiesResponse
	(*QueryEntitlementsRequest)(nil),         // 6: commonfate.access.v1alpha1.QueryEntitlementsRequest
	(*QueryEntitlementsResponse)(nil),        // 7: commonfate.access.v1alpha1.QueryEntitlementsResponse
	(*PreviewUserAccessRequest)(nil),         // 8: commonfate.access.v1alpha1.PreviewUserAccessRequest
	(*PreviewUserAccessResponse)(nil),        // 9: commonfate.access.v1alpha1.PreviewUserAccessResponse
	(*PreviewEntitlementAccessRequest)(nil),  // 10: commonfate.access.v1alpha1.PreviewEntitlementAccessRequest
	(*PreviewEntitlementAccessResponse)(nil), // 11: commonfate.access.v1alpha1.PreviewEntitlementAccessResponse
	(*DebugEntitlementAccessRequest)(nil),    // 12: commonfate.access.v1alpha1.DebugEntitlementAccessRequest
	(*DebugEntitlementAccessResponse)(nil),   // 13: commonfate.access.v1alpha1.DebugEntitlementAccessResponse
	(*EntitlementAccessReason)(nil),          // 14: commonfate.access.v1alpha1.EntitlementAccessReason
	(*PrincipalAccess)(nil),                  // 15: commonfate.access.v1alpha1.PrincipalAccess
	(*Entitlement)(nil),                      // 16: commonfate.access.v1alpha1.Entitlement
	(*Availability)(nil),                     // 17: commonfate.access.v1alpha1.Availability
	(*Specifier)(nil),                        // 18: commonfate.access.v1alpha1.Specifier
	(*EntitlementInput)(nil),                 // 19: commonfate.access.v1alpha1.EntitlementInput
	(*BatchEnsureRequest)(nil),               // 20: commonfate.access.v1alpha1.BatchEnsureRequest
	(*BatchEnsureResponse)(nil),              // 21: commonfate.access.v1alpha1.BatchEnsureResponse
	(*GrantState)(nil),                       // 22: commonfate.access.v1alpha1.GrantState
	(*NeedsJustification)(nil),               // 23: commonfate.access.v1alpha1.NeedsJustification
	(*v1alpha1.EID)(nil),                     // 24: commonfate.entity.v1alpha1.EID
	(*User)(nil),                             // 25: commonfate.access.v1alpha1.User
	(*v1alpha11.PolicySet)(nil),              // 26: commonfate.authz.v1alpha1.PolicySet
	(*v1alpha1.Entity)(nil),                  // 27: commonfate.entity.v1alpha1.Entity
	(*NamedEID)(nil),                         // 28: commonfate.access.v1alpha1.NamedEID
	(*durationpb.Duration)(nil),              // 29: google.protobuf.Duration
	(*Justification)(nil),                    // 30: commonfate.access.v1alpha1.Justification
	(*Diagnostic)(nil),                       // 31: commonfate.access.v1alpha1.Diagnostic
	(*Grant)(nil),                            // 32: commonfate.access.v1alpha1.Grant
}
var file_commonfate_access_v1alpha1_access_proto_depIdxs = []int32{
	2,  // 0: commonfate.access.v1alpha1.QueryApproversRequest.target_role:type_name -> commonfate.access.v1alpha1.TargetRole
	24, // 1: commonfate.access.v1alpha1.QueryApproversRequest.grant:type_name -> commonfate.entity.v1alpha1.EID
	18, // 2: commonfate.access.v1alpha1.TargetRole.target:type_name -> commonfate.access.v1alpha1.Specifier
	18, // 3: commonfate.access.v1alpha1.TargetRole.role:type_name -> commonfate.access.v1alpha1.Specifier
	25, // 4: commonfate.access.v1alpha1.QueryApproversResponse.approvers:type_name -> commonfate.access.v1alpha1.User
	17, // 5: commonfate.access.v1alpha1.QueryAvailabilitiesResponse.availabilities:type_name -> commonfate.access.v1alpha1.Availability
	16, // 6: commonfate.access.v1alpha1.QueryEntitlementsResponse.entitlements:type_name -> commonfate.access.v1alpha1.Entitlement
	18, // 7: commonfate.access.v1alpha1.PreviewUserAccessRequest.principal:type_name -> commonfate.access.v1alpha1.Specifier
	16, // 8: commonfate.access.v1alpha1.PreviewUserAccessResponse.entitlements:type_name -> commonfate.access.v1alpha1.Entitlement
	18, // 9: commonfate.access.v1alpha1.PreviewEntitlementAccessRequest.target:type_name -> commonfate.access.v1alpha1.Specifier
	18, // 10: commonfate.access.v1alpha1.PreviewEntitlementAccessRequest.role:type_name -> commonfate.access.v1alpha1.Specifier
	15, // 11: commonfate.access.v1alpha1.PreviewEntitlementAccessResponse.access:type_name -> commonfate.access.v1alpha1.PrincipalAccess
	18, // 12: commonfate.access.v1alpha1.DebugEntitlementAccessRequest.principal:type_name -> commonfate.access.v1alpha1.Specifier
	18, // 13: commonfate.access.v1alpha1.DebugEntitlementAccessRequest.target:type_name -> commonfate.access.v1alpha1.Specifier
	18, // 14: commonfate.access.v1alpha1.DebugEntitlementAccessRequest.role:type_name -> commonfate.access.v1alpha1.Specifier
	14, // 15: commonfate.access.v1alpha1.DebugEntitlementAccessResponse.reason:type_name -> commonfate.access.v1alpha1.EntitlementAccessReason
	26, // 16: commonfate.access.v1alpha1.DebugEntitlementAccessResponse.policy_sets:type_name -> commonfate.authz.v1alpha1.PolicySet
	27, // 17: commonfate.access.v1alpha1.DebugEntitlementAccessResponse.entities:type_name -> commonfate.entity.v1alpha1.Entity
	25, // 18: commonfate.access.v1alpha1.PrincipalAccess.principal:type_name -> commonfate.access.v1alpha1.User
	14, // 19: commonfate.access.v1alpha1.PrincipalAccess.reason:type_name -> commonfate.access.v1alpha1.EntitlementAccessReason
	28, // 20: commonfate.access.v1alpha1.Entitlement.target:type_name -> commonfate.access.v1alpha1.NamedEID
	28, // 21: commonfate.access.v1alpha1.Entitlement.role:type_name -> commonfate.access.v1alpha1.NamedEID
	28, // 22: commonfate.access.v1alpha1.Entitlement.target_path:type_name -> commonfate.access.v1alpha1.NamedEID
	14, // 23: commonfate.access.v1alpha1.Entitlement.reason:type_name -> commonfate.access.v1alpha1.EntitlementAccessReason
	28, // 24: commonfate.access.v1alpha1.Availability.target:type_name -> commonfate.access.v1alpha1.NamedEID
	28, // 25: commonfate.access.v1alpha1.Availability.role:type_name -> commonfate.access.v1alpha1.NamedEID
	29, // 26: commonfate.access.v1alpha1.Availability.duration:type_name -> google.protobuf.Duration
	24, // 27: commonfate.access.v1alpha1.Availability.reviewers:type_name -> commonfate.entity.v1alpha1.EID
	24, // 28: commonfate.access.v1alpha1.Availability.target_selector:type_name -> commonfate.entity.v1alpha1.EID
	29, // 29: commonfate.access.v1alpha1.Availability.default_duration:type_name -> google.protobuf.Duration
	24, // 30: commonfate.access.v1alpha1.Specifier.eid:type_name -> commonfate.entity.v1alpha1.EID
	18, // 31: commonfate.access.v1alpha1.EntitlementInput.principal:type_name -> commonfate.access.v1alpha1.Specifier
	18, // 32: commonfate.access.v1alpha1.EntitlementInput.target:type_name -> commonfate.access.v1alpha1.Specifier
	18, // 33: commonfate.access.v1alpha1.EntitlementInput.role:type_name -> commonfate.access.v1alpha1.Specifier
	29, // 34: commonfate.access.v1alpha1.EntitlementInput.duration:type_name -> google.protobuf.Duration
	19, // 35: commonfate.access.v1alpha1.BatchEnsureRequest.entitlements:type_name -> commonfate.access.v1alpha1.EntitlementInput
	30, // 36: commonfate.access.v1alpha1.BatchEnsureRequest.justification:type_name -> commonfate.access.v1alpha1.Justification
	22, // 37: commonfate.access.v1alpha1.BatchEnsureResponse.grants:type_name -> commonfate.access.v1alpha1.GrantState
	31, // 38: commonfate.access.v1alpha1.BatchEnsureResponse.diagnostics:type_name -> commonfate.access.v1alpha1.Diagnostic
	32, // 39: commonfate.access.v1alpha1.GrantState.grant:type_name -> commonfate.access.v1alpha1.Grant
	0,  // 40: commonfate.access.v1alpha1.GrantState.change:type_name -> commonfate.access.v1alpha1.GrantChange
	23, // 41: commonfate.access.v1alpha1.GrantState.needs_justification:type_name -> commonfate.access.v1alpha1.NeedsJustification
	20, // 42: commonfate.access.v1alpha1.AccessService.BatchEnsure:input_type -> commonfate.access.v1alpha1.BatchEnsureRequest
	4,  // 43: commonfate.access.v1alpha1.AccessService.QueryAvailabilities:input_type -> commonfate.access.v1alpha1.QueryAvailabilitiesRequest
	6,  // 44: commonfate.access.v1alpha1.AccessService.QueryEntitlements:input_type -> commonfate.access.v1alpha1.QueryEntitlementsRequest
	1,  // 45: commonfate.access.v1alpha1.AccessService.QueryApprovers:input_type -> commonfate.access.v1alpha1.QueryApproversRequest
	8,  // 46: commonfate.access.v1alpha1.AccessService.PreviewUserAccess:input_type -> commonfate.access.v1alpha1.PreviewUserAccessRequest
	10, // 47: commonfate.access.v1alpha1.AccessService.PreviewEntitlementAccess:input_type -> commonfate.access.v1alpha1.PreviewEntitlementAccessRequest
	12, // 48: commonfate.access.v1alpha1.AccessService.DebugEntitlementAccess:input_type -> commonfate.access.v1alpha1.DebugEntitlementAccessRequest
	21, // 49: commonfate.access.v1alpha1.AccessService.BatchEnsure:output_type -> commonfate.access.v1alpha1.BatchEnsureResponse
	5,  // 50: commonfate.access.v1alpha1.AccessService.QueryAvailabilities:output_type -> commonfate.access.v1alpha1.QueryAvailabilitiesResponse
	7,  // 51: commonfate.access.v1alpha1.AccessService.QueryEntitlements:output_type -> commonfate.access.v1alpha1.QueryEntitlementsResponse
	3,  // 52: commonfate.access.v1alpha1.AccessService.QueryApprovers:output_type -> commonfate.access.v1alpha1.QueryApproversResponse
	9,  // 53: commonfate.access.v1alpha1.AccessService.PreviewUserAccess:output_type -> commonfate.access.v1alpha1.PreviewUserAccessResponse
	11, // 54: commonfate.access.v1alpha1.AccessService.PreviewEntitlementAccess:output_type -> commonfate.access.v1alpha1.PreviewEntitlementAccessResponse
	13, // 55: commonfate.access.v1alpha1.AccessService.DebugEntitlementAccess:output_type -> commonfate.access.v1alpha1.DebugEntitlementAccessResponse
	49, // [49:56] is the sub-list for method output_type
	42, // [42:49] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_commonfate_access_v1alpha1_access_proto_init() }
func file_commonfate_access_v1alpha1_access_proto_init() {
	if File_commonfate_access_v1alpha1_access_proto != nil {
		return
	}
	file_commonfate_access_v1alpha1_access_request_proto_init()
	file_commonfate_access_v1alpha1_diagnostic_proto_init()
	file_commonfate_access_v1alpha1_grant_proto_init()
	file_commonfate_access_v1alpha1_named_eid_proto_init()
	file_commonfate_access_v1alpha1_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_commonfate_access_v1alpha1_access_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryApproversRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryApproversResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAvailabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAvailabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEntitlementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEntitlementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewUserAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewUserAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewEntitlementAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewEntitlementAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugEntitlementAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugEntitlementAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitlementAccessReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrincipalAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entitlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Availability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitlementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEnsureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEnsureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_access_v1alpha1_access_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeedsJustification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_commonfate_access_v1alpha1_access_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*QueryApproversRequest_TargetRole)(nil),
		(*QueryApproversRequest_Grant)(nil),
	}
	file_commonfate_access_v1alpha1_access_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_commonfate_access_v1alpha1_access_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_commonfate_access_v1alpha1_access_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Specifier_Eid)(nil),
		(*Specifier_Lookup)(nil),
	}
	file_commonfate_access_v1alpha1_access_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonfate_access_v1alpha1_access_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commonfate_access_v1alpha1_access_proto_goTypes,
		DependencyIndexes: file_commonfate_access_v1alpha1_access_proto_depIdxs,
		EnumInfos:         file_commonfate_access_v1alpha1_access_proto_enumTypes,
		MessageInfos:      file_commonfate_access_v1alpha1_access_proto_msgTypes,
	}.Build()
	File_commonfate_access_v1alpha1_access_proto = out.File
	file_commonfate_access_v1alpha1_access_proto_rawDesc = nil
	file_commonfate_access_v1alpha1_access_proto_goTypes = nil
	file_commonfate_access_v1alpha1_access_proto_depIdxs = nil
}
