// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/databaseproxy/v1alpha1/proxy.proto

package databaseproxyv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/databaseproxy/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DatabaseProxyServiceName is the fully-qualified name of the DatabaseProxyService service.
	DatabaseProxyServiceName = "commonfate.access.databaseproxy.v1alpha1.DatabaseProxyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatabaseProxyServiceExchangeProcedure is the fully-qualified name of the DatabaseProxyService's
	// Exchange RPC.
	DatabaseProxyServiceExchangeProcedure = "/commonfate.access.databaseproxy.v1alpha1.DatabaseProxyService/Exchange"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	databaseProxyServiceServiceDescriptor        = v1alpha1.File_commonfate_access_databaseproxy_v1alpha1_proxy_proto.Services().ByName("DatabaseProxyService")
	databaseProxyServiceExchangeMethodDescriptor = databaseProxyServiceServiceDescriptor.Methods().ByName("Exchange")
)

// DatabaseProxyServiceClient is a client for the
// commonfate.access.databaseproxy.v1alpha1.DatabaseProxyService service.
type DatabaseProxyServiceClient interface {
	// The Exchange service is used for exchanging a users token for temporary database connection credentials for the proxy
	Exchange(context.Context, *connect.Request[v1alpha1.ExchangeRequest]) (*connect.Response[v1alpha1.ExchangeResponse], error)
}

// NewDatabaseProxyServiceClient constructs a client for the
// commonfate.access.databaseproxy.v1alpha1.DatabaseProxyService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatabaseProxyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DatabaseProxyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &databaseProxyServiceClient{
		exchange: connect.NewClient[v1alpha1.ExchangeRequest, v1alpha1.ExchangeResponse](
			httpClient,
			baseURL+DatabaseProxyServiceExchangeProcedure,
			connect.WithSchema(databaseProxyServiceExchangeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// databaseProxyServiceClient implements DatabaseProxyServiceClient.
type databaseProxyServiceClient struct {
	exchange *connect.Client[v1alpha1.ExchangeRequest, v1alpha1.ExchangeResponse]
}

// Exchange calls commonfate.access.databaseproxy.v1alpha1.DatabaseProxyService.Exchange.
func (c *databaseProxyServiceClient) Exchange(ctx context.Context, req *connect.Request[v1alpha1.ExchangeRequest]) (*connect.Response[v1alpha1.ExchangeResponse], error) {
	return c.exchange.CallUnary(ctx, req)
}

// DatabaseProxyServiceHandler is an implementation of the
// commonfate.access.databaseproxy.v1alpha1.DatabaseProxyService service.
type DatabaseProxyServiceHandler interface {
	// The Exchange service is used for exchanging a users token for temporary database connection credentials for the proxy
	Exchange(context.Context, *connect.Request[v1alpha1.ExchangeRequest]) (*connect.Response[v1alpha1.ExchangeResponse], error)
}

// NewDatabaseProxyServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatabaseProxyServiceHandler(svc DatabaseProxyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	databaseProxyServiceExchangeHandler := connect.NewUnaryHandler(
		DatabaseProxyServiceExchangeProcedure,
		svc.Exchange,
		connect.WithSchema(databaseProxyServiceExchangeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.access.databaseproxy.v1alpha1.DatabaseProxyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatabaseProxyServiceExchangeProcedure:
			databaseProxyServiceExchangeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatabaseProxyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatabaseProxyServiceHandler struct{}

func (UnimplementedDatabaseProxyServiceHandler) Exchange(context.Context, *connect.Request[v1alpha1.ExchangeRequest]) (*connect.Response[v1alpha1.ExchangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.databaseproxy.v1alpha1.DatabaseProxyService.Exchange is not implemented"))
}
