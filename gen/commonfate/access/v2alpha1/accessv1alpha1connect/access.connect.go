// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/access/v2alpha1/access.proto

package accessv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v2alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccessV2ServiceName is the fully-qualified name of the AccessV2Service service.
	AccessV2ServiceName = "commonfate.access.v1alpha1.AccessV2Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccessV2ServiceQueryAvailabilitiesProcedure is the fully-qualified name of the AccessV2Service's
	// QueryAvailabilities RPC.
	AccessV2ServiceQueryAvailabilitiesProcedure = "/commonfate.access.v1alpha1.AccessV2Service/QueryAvailabilities"
	// AccessV2ServiceQueryEntitlementsProcedure is the fully-qualified name of the AccessV2Service's
	// QueryEntitlements RPC.
	AccessV2ServiceQueryEntitlementsProcedure = "/commonfate.access.v1alpha1.AccessV2Service/QueryEntitlements"
	// AccessV2ServiceQueryApproversProcedure is the fully-qualified name of the AccessV2Service's
	// QueryApprovers RPC.
	AccessV2ServiceQueryApproversProcedure = "/commonfate.access.v1alpha1.AccessV2Service/QueryApprovers"
	// AccessV2ServicePreviewUserAccessProcedure is the fully-qualified name of the AccessV2Service's
	// PreviewUserAccess RPC.
	AccessV2ServicePreviewUserAccessProcedure = "/commonfate.access.v1alpha1.AccessV2Service/PreviewUserAccess"
	// AccessV2ServicePreviewEntitlementAccessProcedure is the fully-qualified name of the
	// AccessV2Service's PreviewEntitlementAccess RPC.
	AccessV2ServicePreviewEntitlementAccessProcedure = "/commonfate.access.v1alpha1.AccessV2Service/PreviewEntitlementAccess"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accessV2ServiceServiceDescriptor                        = v2alpha1.File_commonfate_access_v2alpha1_access_proto.Services().ByName("AccessV2Service")
	accessV2ServiceQueryAvailabilitiesMethodDescriptor      = accessV2ServiceServiceDescriptor.Methods().ByName("QueryAvailabilities")
	accessV2ServiceQueryEntitlementsMethodDescriptor        = accessV2ServiceServiceDescriptor.Methods().ByName("QueryEntitlements")
	accessV2ServiceQueryApproversMethodDescriptor           = accessV2ServiceServiceDescriptor.Methods().ByName("QueryApprovers")
	accessV2ServicePreviewUserAccessMethodDescriptor        = accessV2ServiceServiceDescriptor.Methods().ByName("PreviewUserAccess")
	accessV2ServicePreviewEntitlementAccessMethodDescriptor = accessV2ServiceServiceDescriptor.Methods().ByName("PreviewEntitlementAccess")
)

// AccessV2ServiceClient is a client for the commonfate.access.v1alpha1.AccessV2Service service.
type AccessV2ServiceClient interface {
	QueryAvailabilities(context.Context, *connect.Request[v2alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v2alpha1.QueryAvailabilitiesResponse], error)
	QueryEntitlements(context.Context, *connect.Request[v2alpha1.QueryEntitlementsRequest]) (*connect.Response[v2alpha1.QueryEntitlementsResponse], error)
	QueryApprovers(context.Context, *connect.Request[v2alpha1.QueryApproversRequest]) (*connect.Response[v2alpha1.QueryApproversResponse], error)
	PreviewUserAccess(context.Context, *connect.Request[v2alpha1.PreviewUserAccessRequest]) (*connect.Response[v2alpha1.PreviewUserAccessResponse], error)
	PreviewEntitlementAccess(context.Context, *connect.Request[v2alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v2alpha1.PreviewEntitlementAccessResponse], error)
}

// NewAccessV2ServiceClient constructs a client for the commonfate.access.v1alpha1.AccessV2Service
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccessV2ServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccessV2ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accessV2ServiceClient{
		queryAvailabilities: connect.NewClient[v2alpha1.QueryAvailabilitiesRequest, v2alpha1.QueryAvailabilitiesResponse](
			httpClient,
			baseURL+AccessV2ServiceQueryAvailabilitiesProcedure,
			connect.WithSchema(accessV2ServiceQueryAvailabilitiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryEntitlements: connect.NewClient[v2alpha1.QueryEntitlementsRequest, v2alpha1.QueryEntitlementsResponse](
			httpClient,
			baseURL+AccessV2ServiceQueryEntitlementsProcedure,
			connect.WithSchema(accessV2ServiceQueryEntitlementsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryApprovers: connect.NewClient[v2alpha1.QueryApproversRequest, v2alpha1.QueryApproversResponse](
			httpClient,
			baseURL+AccessV2ServiceQueryApproversProcedure,
			connect.WithSchema(accessV2ServiceQueryApproversMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		previewUserAccess: connect.NewClient[v2alpha1.PreviewUserAccessRequest, v2alpha1.PreviewUserAccessResponse](
			httpClient,
			baseURL+AccessV2ServicePreviewUserAccessProcedure,
			connect.WithSchema(accessV2ServicePreviewUserAccessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		previewEntitlementAccess: connect.NewClient[v2alpha1.PreviewEntitlementAccessRequest, v2alpha1.PreviewEntitlementAccessResponse](
			httpClient,
			baseURL+AccessV2ServicePreviewEntitlementAccessProcedure,
			connect.WithSchema(accessV2ServicePreviewEntitlementAccessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accessV2ServiceClient implements AccessV2ServiceClient.
type accessV2ServiceClient struct {
	queryAvailabilities      *connect.Client[v2alpha1.QueryAvailabilitiesRequest, v2alpha1.QueryAvailabilitiesResponse]
	queryEntitlements        *connect.Client[v2alpha1.QueryEntitlementsRequest, v2alpha1.QueryEntitlementsResponse]
	queryApprovers           *connect.Client[v2alpha1.QueryApproversRequest, v2alpha1.QueryApproversResponse]
	previewUserAccess        *connect.Client[v2alpha1.PreviewUserAccessRequest, v2alpha1.PreviewUserAccessResponse]
	previewEntitlementAccess *connect.Client[v2alpha1.PreviewEntitlementAccessRequest, v2alpha1.PreviewEntitlementAccessResponse]
}

// QueryAvailabilities calls commonfate.access.v1alpha1.AccessV2Service.QueryAvailabilities.
func (c *accessV2ServiceClient) QueryAvailabilities(ctx context.Context, req *connect.Request[v2alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v2alpha1.QueryAvailabilitiesResponse], error) {
	return c.queryAvailabilities.CallUnary(ctx, req)
}

// QueryEntitlements calls commonfate.access.v1alpha1.AccessV2Service.QueryEntitlements.
func (c *accessV2ServiceClient) QueryEntitlements(ctx context.Context, req *connect.Request[v2alpha1.QueryEntitlementsRequest]) (*connect.Response[v2alpha1.QueryEntitlementsResponse], error) {
	return c.queryEntitlements.CallUnary(ctx, req)
}

// QueryApprovers calls commonfate.access.v1alpha1.AccessV2Service.QueryApprovers.
func (c *accessV2ServiceClient) QueryApprovers(ctx context.Context, req *connect.Request[v2alpha1.QueryApproversRequest]) (*connect.Response[v2alpha1.QueryApproversResponse], error) {
	return c.queryApprovers.CallUnary(ctx, req)
}

// PreviewUserAccess calls commonfate.access.v1alpha1.AccessV2Service.PreviewUserAccess.
func (c *accessV2ServiceClient) PreviewUserAccess(ctx context.Context, req *connect.Request[v2alpha1.PreviewUserAccessRequest]) (*connect.Response[v2alpha1.PreviewUserAccessResponse], error) {
	return c.previewUserAccess.CallUnary(ctx, req)
}

// PreviewEntitlementAccess calls
// commonfate.access.v1alpha1.AccessV2Service.PreviewEntitlementAccess.
func (c *accessV2ServiceClient) PreviewEntitlementAccess(ctx context.Context, req *connect.Request[v2alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v2alpha1.PreviewEntitlementAccessResponse], error) {
	return c.previewEntitlementAccess.CallUnary(ctx, req)
}

// AccessV2ServiceHandler is an implementation of the commonfate.access.v1alpha1.AccessV2Service
// service.
type AccessV2ServiceHandler interface {
	QueryAvailabilities(context.Context, *connect.Request[v2alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v2alpha1.QueryAvailabilitiesResponse], error)
	QueryEntitlements(context.Context, *connect.Request[v2alpha1.QueryEntitlementsRequest]) (*connect.Response[v2alpha1.QueryEntitlementsResponse], error)
	QueryApprovers(context.Context, *connect.Request[v2alpha1.QueryApproversRequest]) (*connect.Response[v2alpha1.QueryApproversResponse], error)
	PreviewUserAccess(context.Context, *connect.Request[v2alpha1.PreviewUserAccessRequest]) (*connect.Response[v2alpha1.PreviewUserAccessResponse], error)
	PreviewEntitlementAccess(context.Context, *connect.Request[v2alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v2alpha1.PreviewEntitlementAccessResponse], error)
}

// NewAccessV2ServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccessV2ServiceHandler(svc AccessV2ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accessV2ServiceQueryAvailabilitiesHandler := connect.NewUnaryHandler(
		AccessV2ServiceQueryAvailabilitiesProcedure,
		svc.QueryAvailabilities,
		connect.WithSchema(accessV2ServiceQueryAvailabilitiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessV2ServiceQueryEntitlementsHandler := connect.NewUnaryHandler(
		AccessV2ServiceQueryEntitlementsProcedure,
		svc.QueryEntitlements,
		connect.WithSchema(accessV2ServiceQueryEntitlementsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessV2ServiceQueryApproversHandler := connect.NewUnaryHandler(
		AccessV2ServiceQueryApproversProcedure,
		svc.QueryApprovers,
		connect.WithSchema(accessV2ServiceQueryApproversMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessV2ServicePreviewUserAccessHandler := connect.NewUnaryHandler(
		AccessV2ServicePreviewUserAccessProcedure,
		svc.PreviewUserAccess,
		connect.WithSchema(accessV2ServicePreviewUserAccessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessV2ServicePreviewEntitlementAccessHandler := connect.NewUnaryHandler(
		AccessV2ServicePreviewEntitlementAccessProcedure,
		svc.PreviewEntitlementAccess,
		connect.WithSchema(accessV2ServicePreviewEntitlementAccessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.access.v1alpha1.AccessV2Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccessV2ServiceQueryAvailabilitiesProcedure:
			accessV2ServiceQueryAvailabilitiesHandler.ServeHTTP(w, r)
		case AccessV2ServiceQueryEntitlementsProcedure:
			accessV2ServiceQueryEntitlementsHandler.ServeHTTP(w, r)
		case AccessV2ServiceQueryApproversProcedure:
			accessV2ServiceQueryApproversHandler.ServeHTTP(w, r)
		case AccessV2ServicePreviewUserAccessProcedure:
			accessV2ServicePreviewUserAccessHandler.ServeHTTP(w, r)
		case AccessV2ServicePreviewEntitlementAccessProcedure:
			accessV2ServicePreviewEntitlementAccessHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccessV2ServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccessV2ServiceHandler struct{}

func (UnimplementedAccessV2ServiceHandler) QueryAvailabilities(context.Context, *connect.Request[v2alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v2alpha1.QueryAvailabilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.QueryAvailabilities is not implemented"))
}

func (UnimplementedAccessV2ServiceHandler) QueryEntitlements(context.Context, *connect.Request[v2alpha1.QueryEntitlementsRequest]) (*connect.Response[v2alpha1.QueryEntitlementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.QueryEntitlements is not implemented"))
}

func (UnimplementedAccessV2ServiceHandler) QueryApprovers(context.Context, *connect.Request[v2alpha1.QueryApproversRequest]) (*connect.Response[v2alpha1.QueryApproversResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.QueryApprovers is not implemented"))
}

func (UnimplementedAccessV2ServiceHandler) PreviewUserAccess(context.Context, *connect.Request[v2alpha1.PreviewUserAccessRequest]) (*connect.Response[v2alpha1.PreviewUserAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.PreviewUserAccess is not implemented"))
}

func (UnimplementedAccessV2ServiceHandler) PreviewEntitlementAccess(context.Context, *connect.Request[v2alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v2alpha1.PreviewEntitlementAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.PreviewEntitlementAccess is not implemented"))
}
