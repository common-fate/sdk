// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/support/v1alpha1/support.proto

package supportv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Ticket with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ticket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ticket with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TicketMultiError, or nil if none found.
func (m *Ticket) ValidateAll() error {
	return m.validate(true)
}

func (m *Ticket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Type

	// no validation rules for PreventingUse

	if len(errors) > 0 {
		return TicketMultiError(errors)
	}

	return nil
}

// TicketMultiError is an error wrapping multiple validation errors returned by
// Ticket.ValidateAll() if the designated constraints aren't met.
type TicketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketMultiError) AllErrors() []error { return m }

// TicketValidationError is the validation error returned by Ticket.Validate if
// the designated constraints aren't met.
type TicketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketValidationError) ErrorName() string { return "TicketValidationError" }

// Error satisfies the builtin error interface
func (e TicketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketValidationError{}

// Validate checks the field values on ContactRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContactRequestMultiError,
// or nil if none found.
func (m *ContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTicket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContactRequestValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContactRequestValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTicket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContactRequestValidationError{
				field:  "Ticket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContactRequestMultiError(errors)
	}

	return nil
}

// ContactRequestMultiError is an error wrapping multiple validation errors
// returned by ContactRequest.ValidateAll() if the designated constraints
// aren't met.
type ContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactRequestMultiError) AllErrors() []error { return m }

// ContactRequestValidationError is the validation error returned by
// ContactRequest.Validate if the designated constraints aren't met.
type ContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactRequestValidationError) ErrorName() string { return "ContactRequestValidationError" }

// Error satisfies the builtin error interface
func (e ContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactRequestValidationError{}

// Validate checks the field values on ContactResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactResponseMultiError, or nil if none found.
func (m *ContactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ContactResponseMultiError(errors)
	}

	return nil
}

// ContactResponseMultiError is an error wrapping multiple validation errors
// returned by ContactResponse.ValidateAll() if the designated constraints
// aren't met.
type ContactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactResponseMultiError) AllErrors() []error { return m }

// ContactResponseValidationError is the validation error returned by
// ContactResponse.Validate if the designated constraints aren't met.
type ContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactResponseValidationError) ErrorName() string { return "ContactResponseValidationError" }

// Error satisfies the builtin error interface
func (e ContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactResponseValidationError{}

// Validate checks the field values on AttachmentInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttachmentInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachmentInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttachmentInputMultiError, or nil if none found.
func (m *AttachmentInput) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachmentInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for SizeBytes

	if len(errors) > 0 {
		return AttachmentInputMultiError(errors)
	}

	return nil
}

// AttachmentInputMultiError is an error wrapping multiple validation errors
// returned by AttachmentInput.ValidateAll() if the designated constraints
// aren't met.
type AttachmentInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentInputMultiError) AllErrors() []error { return m }

// AttachmentInputValidationError is the validation error returned by
// AttachmentInput.Validate if the designated constraints aren't met.
type AttachmentInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentInputValidationError) ErrorName() string { return "AttachmentInputValidationError" }

// Error satisfies the builtin error interface
func (e AttachmentInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachmentInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentInputValidationError{}

// Validate checks the field values on CreateAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttachmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttachmentRequestMultiError, or nil if none found.
func (m *CreateAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttachmentInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAttachmentRequestValidationError{
					field:  "AttachmentInput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAttachmentRequestValidationError{
					field:  "AttachmentInput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachmentInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAttachmentRequestValidationError{
				field:  "AttachmentInput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAttachmentRequestMultiError(errors)
	}

	return nil
}

// CreateAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttachmentRequestMultiError) AllErrors() []error { return m }

// CreateAttachmentRequestValidationError is the validation error returned by
// CreateAttachmentRequest.Validate if the designated constraints aren't met.
type CreateAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttachmentRequestValidationError) ErrorName() string {
	return "CreateAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttachmentRequestValidationError{}

// Validate checks the field values on Attachment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attachment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttachmentMultiError, or
// nil if none found.
func (m *Attachment) ValidateAll() error {
	return m.validate(true)
}

func (m *Attachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for FileName

	for idx, item := range m.GetFormData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttachmentValidationError{
						field:  fmt.Sprintf("FormData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttachmentValidationError{
						field:  fmt.Sprintf("FormData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttachmentValidationError{
					field:  fmt.Sprintf("FormData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AttachmentMultiError(errors)
	}

	return nil
}

// AttachmentMultiError is an error wrapping multiple validation errors
// returned by Attachment.ValidateAll() if the designated constraints aren't met.
type AttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentMultiError) AllErrors() []error { return m }

// AttachmentValidationError is the validation error returned by
// Attachment.Validate if the designated constraints aren't met.
type AttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentValidationError) ErrorName() string { return "AttachmentValidationError" }

// Error satisfies the builtin error interface
func (e AttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentValidationError{}

// Validate checks the field values on CreateAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttachmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttachmentResponseMultiError, or nil if none found.
func (m *CreateAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttachment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAttachmentResponseValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAttachmentResponseValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAttachmentResponseValidationError{
				field:  "Attachment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAttachmentResponseMultiError(errors)
	}

	return nil
}

// CreateAttachmentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttachmentResponseMultiError) AllErrors() []error { return m }

// CreateAttachmentResponseValidationError is the validation error returned by
// CreateAttachmentResponse.Validate if the designated constraints aren't met.
type CreateAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttachmentResponseValidationError) ErrorName() string {
	return "CreateAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttachmentResponseValidationError{}

// Validate checks the field values on FormData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FormData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FormDataMultiError, or nil
// if none found.
func (m *FormData) ValidateAll() error {
	return m.validate(true)
}

func (m *FormData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return FormDataMultiError(errors)
	}

	return nil
}

// FormDataMultiError is an error wrapping multiple validation errors returned
// by FormData.ValidateAll() if the designated constraints aren't met.
type FormDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormDataMultiError) AllErrors() []error { return m }

// FormDataValidationError is the validation error returned by
// FormData.Validate if the designated constraints aren't met.
type FormDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormDataValidationError) ErrorName() string { return "FormDataValidationError" }

// Error satisfies the builtin error interface
func (e FormDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormDataValidationError{}
