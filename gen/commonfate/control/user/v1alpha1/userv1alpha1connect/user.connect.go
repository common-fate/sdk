// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/user/v1alpha1/user.proto

package userv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/user/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "commonfate.control.user.v1alpha1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceQueryUsersProcedure is the fully-qualified name of the UserService's QueryUsers RPC.
	UserServiceQueryUsersProcedure = "/commonfate.control.user.v1alpha1.UserService/QueryUsers"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/commonfate.control.user.v1alpha1.UserService/GetUser"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor          = v1alpha1.File_commonfate_control_user_v1alpha1_user_proto.Services().ByName("UserService")
	userServiceQueryUsersMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("QueryUsers")
	userServiceGetUserMethodDescriptor    = userServiceServiceDescriptor.Methods().ByName("GetUser")
)

// UserServiceClient is a client for the commonfate.control.user.v1alpha1.UserService service.
type UserServiceClient interface {
	QueryUsers(context.Context, *connect.Request[v1alpha1.QueryUsersRequest]) (*connect.Response[v1alpha1.QueryUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1alpha1.GetUserRequest]) (*connect.Response[v1alpha1.GetUserResponse], error)
}

// NewUserServiceClient constructs a client for the commonfate.control.user.v1alpha1.UserService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		queryUsers: connect.NewClient[v1alpha1.QueryUsersRequest, v1alpha1.QueryUsersResponse](
			httpClient,
			baseURL+UserServiceQueryUsersProcedure,
			connect.WithSchema(userServiceQueryUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1alpha1.GetUserRequest, v1alpha1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	queryUsers *connect.Client[v1alpha1.QueryUsersRequest, v1alpha1.QueryUsersResponse]
	getUser    *connect.Client[v1alpha1.GetUserRequest, v1alpha1.GetUserResponse]
}

// QueryUsers calls commonfate.control.user.v1alpha1.UserService.QueryUsers.
func (c *userServiceClient) QueryUsers(ctx context.Context, req *connect.Request[v1alpha1.QueryUsersRequest]) (*connect.Response[v1alpha1.QueryUsersResponse], error) {
	return c.queryUsers.CallUnary(ctx, req)
}

// GetUser calls commonfate.control.user.v1alpha1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[v1alpha1.GetUserRequest]) (*connect.Response[v1alpha1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the commonfate.control.user.v1alpha1.UserService
// service.
type UserServiceHandler interface {
	QueryUsers(context.Context, *connect.Request[v1alpha1.QueryUsersRequest]) (*connect.Response[v1alpha1.QueryUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1alpha1.GetUserRequest]) (*connect.Response[v1alpha1.GetUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceQueryUsersHandler := connect.NewUnaryHandler(
		UserServiceQueryUsersProcedure,
		svc.QueryUsers,
		connect.WithSchema(userServiceQueryUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.user.v1alpha1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceQueryUsersProcedure:
			userServiceQueryUsersHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) QueryUsers(context.Context, *connect.Request[v1alpha1.QueryUsersRequest]) (*connect.Response[v1alpha1.QueryUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.user.v1alpha1.UserService.QueryUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[v1alpha1.GetUserRequest]) (*connect.Response[v1alpha1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.user.v1alpha1.UserService.GetUser is not implemented"))
}
