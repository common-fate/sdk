// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/insight/v1alpha1/insight.proto

package insightv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/insight/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InsightServiceName is the fully-qualified name of the InsightService service.
	InsightServiceName = "commonfate.control.insight.v1alpha1.InsightService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InsightServiceGetInsightsProcedure is the fully-qualified name of the InsightService's
	// GetInsights RPC.
	InsightServiceGetInsightsProcedure = "/commonfate.control.insight.v1alpha1.InsightService/GetInsights"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	insightServiceServiceDescriptor           = v1alpha1.File_commonfate_control_insight_v1alpha1_insight_proto.Services().ByName("InsightService")
	insightServiceGetInsightsMethodDescriptor = insightServiceServiceDescriptor.Methods().ByName("GetInsights")
)

// InsightServiceClient is a client for the commonfate.control.insight.v1alpha1.InsightService
// service.
type InsightServiceClient interface {
	// retrieves the latest least privilege report.
	GetInsights(context.Context, *connect.Request[v1alpha1.GetInsightsRequest]) (*connect.Response[v1alpha1.GetInsightsResponse], error)
}

// NewInsightServiceClient constructs a client for the
// commonfate.control.insight.v1alpha1.InsightService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInsightServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InsightServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &insightServiceClient{
		getInsights: connect.NewClient[v1alpha1.GetInsightsRequest, v1alpha1.GetInsightsResponse](
			httpClient,
			baseURL+InsightServiceGetInsightsProcedure,
			connect.WithSchema(insightServiceGetInsightsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// insightServiceClient implements InsightServiceClient.
type insightServiceClient struct {
	getInsights *connect.Client[v1alpha1.GetInsightsRequest, v1alpha1.GetInsightsResponse]
}

// GetInsights calls commonfate.control.insight.v1alpha1.InsightService.GetInsights.
func (c *insightServiceClient) GetInsights(ctx context.Context, req *connect.Request[v1alpha1.GetInsightsRequest]) (*connect.Response[v1alpha1.GetInsightsResponse], error) {
	return c.getInsights.CallUnary(ctx, req)
}

// InsightServiceHandler is an implementation of the
// commonfate.control.insight.v1alpha1.InsightService service.
type InsightServiceHandler interface {
	// retrieves the latest least privilege report.
	GetInsights(context.Context, *connect.Request[v1alpha1.GetInsightsRequest]) (*connect.Response[v1alpha1.GetInsightsResponse], error)
}

// NewInsightServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInsightServiceHandler(svc InsightServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	insightServiceGetInsightsHandler := connect.NewUnaryHandler(
		InsightServiceGetInsightsProcedure,
		svc.GetInsights,
		connect.WithSchema(insightServiceGetInsightsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.insight.v1alpha1.InsightService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InsightServiceGetInsightsProcedure:
			insightServiceGetInsightsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInsightServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInsightServiceHandler struct{}

func (UnimplementedInsightServiceHandler) GetInsights(context.Context, *connect.Request[v1alpha1.GetInsightsRequest]) (*connect.Response[v1alpha1.GetInsightsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.insight.v1alpha1.InsightService.GetInsights is not implemented"))
}
