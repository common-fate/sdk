// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/insight/v1alpha1/insight.proto

package insightv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetInsightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInsightsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInsightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInsightsRequestMultiError, or nil if none found.
func (m *GetInsightsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInsightsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInsightsRequestMultiError(errors)
	}

	return nil
}

// GetInsightsRequestMultiError is an error wrapping multiple validation errors
// returned by GetInsightsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetInsightsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInsightsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInsightsRequestMultiError) AllErrors() []error { return m }

// GetInsightsRequestValidationError is the validation error returned by
// GetInsightsRequest.Validate if the designated constraints aren't met.
type GetInsightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInsightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInsightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInsightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInsightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInsightsRequestValidationError) ErrorName() string {
	return "GetInsightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInsightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInsightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInsightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInsightsRequestValidationError{}

// Validate checks the field values on GetInsightsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInsightsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInsightsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInsightsResponseMultiError, or nil if none found.
func (m *GetInsightsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInsightsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInsights()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetInsightsResponseValidationError{
					field:  "Insights",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetInsightsResponseValidationError{
					field:  "Insights",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInsights()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInsightsResponseValidationError{
				field:  "Insights",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetInsightsResponseMultiError(errors)
	}

	return nil
}

// GetInsightsResponseMultiError is an error wrapping multiple validation
// errors returned by GetInsightsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInsightsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInsightsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInsightsResponseMultiError) AllErrors() []error { return m }

// GetInsightsResponseValidationError is the validation error returned by
// GetInsightsResponse.Validate if the designated constraints aren't met.
type GetInsightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInsightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInsightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInsightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInsightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInsightsResponseValidationError) ErrorName() string {
	return "GetInsightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInsightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInsightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInsightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInsightsResponseValidationError{}

// Validate checks the field values on Insights with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Insights) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Insights with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InsightsMultiError, or nil
// if none found.
func (m *Insights) ValidateAll() error {
	return m.validate(true)
}

func (m *Insights) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProtectedUsers

	// no validation rules for AccessHoursReductionPercent

	// no validation rules for AccessHoursReduced

	for idx, item := range m.GetAccessRequestsLast_90Days() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsightsValidationError{
						field:  fmt.Sprintf("AccessRequestsLast_90Days[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsightsValidationError{
						field:  fmt.Sprintf("AccessRequestsLast_90Days[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsightsValidationError{
					field:  fmt.Sprintf("AccessRequestsLast_90Days[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEntitlementUsageLast_90Days() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsightsValidationError{
						field:  fmt.Sprintf("EntitlementUsageLast_90Days[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsightsValidationError{
						field:  fmt.Sprintf("EntitlementUsageLast_90Days[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsightsValidationError{
					field:  fmt.Sprintf("EntitlementUsageLast_90Days[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InsightsMultiError(errors)
	}

	return nil
}

// InsightsMultiError is an error wrapping multiple validation errors returned
// by Insights.ValidateAll() if the designated constraints aren't met.
type InsightsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsightsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsightsMultiError) AllErrors() []error { return m }

// InsightsValidationError is the validation error returned by
// Insights.Validate if the designated constraints aren't met.
type InsightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsightsValidationError) ErrorName() string { return "InsightsValidationError" }

// Error satisfies the builtin error interface
func (e InsightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsightsValidationError{}

// Validate checks the field values on AccessRequestDailyMetric with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessRequestDailyMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessRequestDailyMetric with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessRequestDailyMetricMultiError, or nil if none found.
func (m *AccessRequestDailyMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessRequestDailyMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Count

	if len(errors) > 0 {
		return AccessRequestDailyMetricMultiError(errors)
	}

	return nil
}

// AccessRequestDailyMetricMultiError is an error wrapping multiple validation
// errors returned by AccessRequestDailyMetric.ValidateAll() if the designated
// constraints aren't met.
type AccessRequestDailyMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessRequestDailyMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessRequestDailyMetricMultiError) AllErrors() []error { return m }

// AccessRequestDailyMetricValidationError is the validation error returned by
// AccessRequestDailyMetric.Validate if the designated constraints aren't met.
type AccessRequestDailyMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRequestDailyMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRequestDailyMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRequestDailyMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRequestDailyMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRequestDailyMetricValidationError) ErrorName() string {
	return "AccessRequestDailyMetricValidationError"
}

// Error satisfies the builtin error interface
func (e AccessRequestDailyMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRequestDailyMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRequestDailyMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRequestDailyMetricValidationError{}

// Validate checks the field values on EntitlementsUsageDailyMetric with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntitlementsUsageDailyMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntitlementsUsageDailyMetric with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntitlementsUsageDailyMetricMultiError, or nil if none found.
func (m *EntitlementsUsageDailyMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *EntitlementsUsageDailyMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	for idx, item := range m.GetEntitlements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementsUsageDailyMetricValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementsUsageDailyMetricValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementsUsageDailyMetricValidationError{
					field:  fmt.Sprintf("Entitlements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EntitlementsUsageDailyMetricMultiError(errors)
	}

	return nil
}

// EntitlementsUsageDailyMetricMultiError is an error wrapping multiple
// validation errors returned by EntitlementsUsageDailyMetric.ValidateAll() if
// the designated constraints aren't met.
type EntitlementsUsageDailyMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitlementsUsageDailyMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitlementsUsageDailyMetricMultiError) AllErrors() []error { return m }

// EntitlementsUsageDailyMetricValidationError is the validation error returned
// by EntitlementsUsageDailyMetric.Validate if the designated constraints
// aren't met.
type EntitlementsUsageDailyMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitlementsUsageDailyMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitlementsUsageDailyMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitlementsUsageDailyMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitlementsUsageDailyMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitlementsUsageDailyMetricValidationError) ErrorName() string {
	return "EntitlementsUsageDailyMetricValidationError"
}

// Error satisfies the builtin error interface
func (e EntitlementsUsageDailyMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitlementsUsageDailyMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitlementsUsageDailyMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitlementsUsageDailyMetricValidationError{}

// Validate checks the field values on EntitlementUsageMetric with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntitlementUsageMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntitlementUsageMetric with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntitlementUsageMetricMultiError, or nil if none found.
func (m *EntitlementUsageMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *EntitlementUsageMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntitlementUsageMetricValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntitlementUsageMetricValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntitlementUsageMetricValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntitlementUsageMetricValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntitlementUsageMetricValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntitlementUsageMetricValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return EntitlementUsageMetricMultiError(errors)
	}

	return nil
}

// EntitlementUsageMetricMultiError is an error wrapping multiple validation
// errors returned by EntitlementUsageMetric.ValidateAll() if the designated
// constraints aren't met.
type EntitlementUsageMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitlementUsageMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitlementUsageMetricMultiError) AllErrors() []error { return m }

// EntitlementUsageMetricValidationError is the validation error returned by
// EntitlementUsageMetric.Validate if the designated constraints aren't met.
type EntitlementUsageMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitlementUsageMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitlementUsageMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitlementUsageMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitlementUsageMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitlementUsageMetricValidationError) ErrorName() string {
	return "EntitlementUsageMetricValidationError"
}

// Error satisfies the builtin error interface
func (e EntitlementUsageMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitlementUsageMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitlementUsageMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitlementUsageMetricValidationError{}
