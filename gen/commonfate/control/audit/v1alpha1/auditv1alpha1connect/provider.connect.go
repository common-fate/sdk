// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/audit/v1alpha1/provider.proto

package auditv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/audit/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProviderAuditTrailServiceName is the fully-qualified name of the ProviderAuditTrailService
	// service.
	ProviderAuditTrailServiceName = "commonfate.control.audit.v1alpha1.ProviderAuditTrailService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProviderAuditTrailServiceBatchPutAuditLogProcedure is the fully-qualified name of the
	// ProviderAuditTrailService's BatchPutAuditLog RPC.
	ProviderAuditTrailServiceBatchPutAuditLogProcedure = "/commonfate.control.audit.v1alpha1.ProviderAuditTrailService/BatchPutAuditLog"
)

// ProviderAuditTrailServiceClient is a client for the
// commonfate.control.audit.v1alpha1.ProviderAuditTrailService service.
type ProviderAuditTrailServiceClient interface {
	BatchPutAuditLog(context.Context, *connect_go.Request[v1alpha1.BatchPutAuditLogRequest]) (*connect_go.Response[v1alpha1.BatchPutAuditLogResponse], error)
}

// NewProviderAuditTrailServiceClient constructs a client for the
// commonfate.control.audit.v1alpha1.ProviderAuditTrailService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProviderAuditTrailServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProviderAuditTrailServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &providerAuditTrailServiceClient{
		batchPutAuditLog: connect_go.NewClient[v1alpha1.BatchPutAuditLogRequest, v1alpha1.BatchPutAuditLogResponse](
			httpClient,
			baseURL+ProviderAuditTrailServiceBatchPutAuditLogProcedure,
			opts...,
		),
	}
}

// providerAuditTrailServiceClient implements ProviderAuditTrailServiceClient.
type providerAuditTrailServiceClient struct {
	batchPutAuditLog *connect_go.Client[v1alpha1.BatchPutAuditLogRequest, v1alpha1.BatchPutAuditLogResponse]
}

// BatchPutAuditLog calls
// commonfate.control.audit.v1alpha1.ProviderAuditTrailService.BatchPutAuditLog.
func (c *providerAuditTrailServiceClient) BatchPutAuditLog(ctx context.Context, req *connect_go.Request[v1alpha1.BatchPutAuditLogRequest]) (*connect_go.Response[v1alpha1.BatchPutAuditLogResponse], error) {
	return c.batchPutAuditLog.CallUnary(ctx, req)
}

// ProviderAuditTrailServiceHandler is an implementation of the
// commonfate.control.audit.v1alpha1.ProviderAuditTrailService service.
type ProviderAuditTrailServiceHandler interface {
	BatchPutAuditLog(context.Context, *connect_go.Request[v1alpha1.BatchPutAuditLogRequest]) (*connect_go.Response[v1alpha1.BatchPutAuditLogResponse], error)
}

// NewProviderAuditTrailServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProviderAuditTrailServiceHandler(svc ProviderAuditTrailServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	providerAuditTrailServiceBatchPutAuditLogHandler := connect_go.NewUnaryHandler(
		ProviderAuditTrailServiceBatchPutAuditLogProcedure,
		svc.BatchPutAuditLog,
		opts...,
	)
	return "/commonfate.control.audit.v1alpha1.ProviderAuditTrailService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProviderAuditTrailServiceBatchPutAuditLogProcedure:
			providerAuditTrailServiceBatchPutAuditLogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProviderAuditTrailServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProviderAuditTrailServiceHandler struct{}

func (UnimplementedProviderAuditTrailServiceHandler) BatchPutAuditLog(context.Context, *connect_go.Request[v1alpha1.BatchPutAuditLogRequest]) (*connect_go.Response[v1alpha1.BatchPutAuditLogResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.audit.v1alpha1.ProviderAuditTrailService.BatchPutAuditLog is not implemented"))
}
