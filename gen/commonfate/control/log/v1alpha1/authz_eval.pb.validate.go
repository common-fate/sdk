// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/log/v1alpha1/authz_eval.proto

package logv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	authzv1alpha1 "github.com/common-fate/sdk/gen/commonfate/authz/v1alpha1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = authzv1alpha1.Decision(0)
)

// Validate checks the field values on QueryEvaluationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryEvaluationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryEvaluationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryEvaluationsRequestMultiError, or nil if none found.
func (m *QueryEvaluationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryEvaluationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryEvaluationsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryEvaluationsRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryEvaluationsRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryEvaluationsRequestMultiError(errors)
	}

	return nil
}

// QueryEvaluationsRequestMultiError is an error wrapping multiple validation
// errors returned by QueryEvaluationsRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryEvaluationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryEvaluationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryEvaluationsRequestMultiError) AllErrors() []error { return m }

// QueryEvaluationsRequestValidationError is the validation error returned by
// QueryEvaluationsRequest.Validate if the designated constraints aren't met.
type QueryEvaluationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryEvaluationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryEvaluationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryEvaluationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryEvaluationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryEvaluationsRequestValidationError) ErrorName() string {
	return "QueryEvaluationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryEvaluationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryEvaluationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryEvaluationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryEvaluationsRequestValidationError{}

// Validate checks the field values on DecisionFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DecisionFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecisionFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DecisionFilterMultiError,
// or nil if none found.
func (m *DecisionFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *DecisionFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Decision

	if len(errors) > 0 {
		return DecisionFilterMultiError(errors)
	}

	return nil
}

// DecisionFilterMultiError is an error wrapping multiple validation errors
// returned by DecisionFilter.ValidateAll() if the designated constraints
// aren't met.
type DecisionFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecisionFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecisionFilterMultiError) AllErrors() []error { return m }

// DecisionFilterValidationError is the validation error returned by
// DecisionFilter.Validate if the designated constraints aren't met.
type DecisionFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecisionFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecisionFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecisionFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecisionFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecisionFilterValidationError) ErrorName() string { return "DecisionFilterValidationError" }

// Error satisfies the builtin error interface
func (e DecisionFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecisionFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecisionFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecisionFilterValidationError{}

// Validate checks the field values on TagFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TagFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TagFilterMultiError, or nil
// if none found.
func (m *TagFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *TagFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for Comparison

	if len(errors) > 0 {
		return TagFilterMultiError(errors)
	}

	return nil
}

// TagFilterMultiError is an error wrapping multiple validation errors returned
// by TagFilter.ValidateAll() if the designated constraints aren't met.
type TagFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagFilterMultiError) AllErrors() []error { return m }

// TagFilterValidationError is the validation error returned by
// TagFilter.Validate if the designated constraints aren't met.
type TagFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagFilterValidationError) ErrorName() string { return "TagFilterValidationError" }

// Error satisfies the builtin error interface
func (e TagFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagFilterValidationError{}

// Validate checks the field values on EntityFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EntityFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EntityFilterMultiError, or
// nil if none found.
func (m *EntityFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntityFilterValidationError{
						field:  fmt.Sprintf("Ids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntityFilterValidationError{
						field:  fmt.Sprintf("Ids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityFilterValidationError{
					field:  fmt.Sprintf("Ids[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Comparison

	if len(errors) > 0 {
		return EntityFilterMultiError(errors)
	}

	return nil
}

// EntityFilterMultiError is an error wrapping multiple validation errors
// returned by EntityFilter.ValidateAll() if the designated constraints aren't met.
type EntityFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityFilterMultiError) AllErrors() []error { return m }

// EntityFilterValidationError is the validation error returned by
// EntityFilter.Validate if the designated constraints aren't met.
type EntityFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityFilterValidationError) ErrorName() string { return "EntityFilterValidationError" }

// Error satisfies the builtin error interface
func (e EntityFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityFilterValidationError{}

// Validate checks the field values on EntityTypeFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EntityTypeFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityTypeFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityTypeFilterMultiError, or nil if none found.
func (m *EntityTypeFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityTypeFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Comparison

	if len(errors) > 0 {
		return EntityTypeFilterMultiError(errors)
	}

	return nil
}

// EntityTypeFilterMultiError is an error wrapping multiple validation errors
// returned by EntityTypeFilter.ValidateAll() if the designated constraints
// aren't met.
type EntityTypeFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityTypeFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityTypeFilterMultiError) AllErrors() []error { return m }

// EntityTypeFilterValidationError is the validation error returned by
// EntityTypeFilter.Validate if the designated constraints aren't met.
type EntityTypeFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityTypeFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityTypeFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityTypeFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityTypeFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityTypeFilterValidationError) ErrorName() string { return "EntityTypeFilterValidationError" }

// Error satisfies the builtin error interface
func (e EntityTypeFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityTypeFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityTypeFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityTypeFilterValidationError{}

// Validate checks the field values on OccurredAtFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OccurredAtFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OccurredAtFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OccurredAtFilterMultiError, or nil if none found.
func (m *OccurredAtFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *OccurredAtFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OccurredAtFilterValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OccurredAtFilterValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OccurredAtFilterValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comparison

	if len(errors) > 0 {
		return OccurredAtFilterMultiError(errors)
	}

	return nil
}

// OccurredAtFilterMultiError is an error wrapping multiple validation errors
// returned by OccurredAtFilter.ValidateAll() if the designated constraints
// aren't met.
type OccurredAtFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OccurredAtFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OccurredAtFilterMultiError) AllErrors() []error { return m }

// OccurredAtFilterValidationError is the validation error returned by
// OccurredAtFilter.Validate if the designated constraints aren't met.
type OccurredAtFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OccurredAtFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OccurredAtFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OccurredAtFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OccurredAtFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OccurredAtFilterValidationError) ErrorName() string { return "OccurredAtFilterValidationError" }

// Error satisfies the builtin error interface
func (e OccurredAtFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOccurredAtFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OccurredAtFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OccurredAtFilterValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Filter.(type) {
	case *Filter_Tag:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTag()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Tag",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Tag",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTag()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "Tag",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_OccurredAt:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOccurredAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "OccurredAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "OccurredAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOccurredAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "OccurredAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_Principal:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPrincipal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Principal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Principal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_Action:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Action",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Action",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_Resource:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResource()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Resource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_Decision:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDecision()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Decision",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Decision",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDecision()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "Decision",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_PrincipalType:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPrincipalType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "PrincipalType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "PrincipalType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrincipalType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "PrincipalType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_ActionType:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActionType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "ActionType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "ActionType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActionType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "ActionType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_ResourceType:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResourceType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "ResourceType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "ResourceType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourceType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on QueryEvaluationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryEvaluationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryEvaluationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryEvaluationsResponseMultiError, or nil if none found.
func (m *QueryEvaluationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryEvaluationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvaluations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryEvaluationsResponseValidationError{
						field:  fmt.Sprintf("Evaluations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryEvaluationsResponseValidationError{
						field:  fmt.Sprintf("Evaluations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryEvaluationsResponseValidationError{
					field:  fmt.Sprintf("Evaluations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return QueryEvaluationsResponseMultiError(errors)
	}

	return nil
}

// QueryEvaluationsResponseMultiError is an error wrapping multiple validation
// errors returned by QueryEvaluationsResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryEvaluationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryEvaluationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryEvaluationsResponseMultiError) AllErrors() []error { return m }

// QueryEvaluationsResponseValidationError is the validation error returned by
// QueryEvaluationsResponse.Validate if the designated constraints aren't met.
type QueryEvaluationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryEvaluationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryEvaluationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryEvaluationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryEvaluationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryEvaluationsResponseValidationError) ErrorName() string {
	return "QueryEvaluationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryEvaluationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryEvaluationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryEvaluationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryEvaluationsResponseValidationError{}

// Validate checks the field values on GetEvaluationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEvaluationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEvaluationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEvaluationRequestMultiError, or nil if none found.
func (m *GetEvaluationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEvaluationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetEvaluationRequestMultiError(errors)
	}

	return nil
}

// GetEvaluationRequestMultiError is an error wrapping multiple validation
// errors returned by GetEvaluationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEvaluationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEvaluationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEvaluationRequestMultiError) AllErrors() []error { return m }

// GetEvaluationRequestValidationError is the validation error returned by
// GetEvaluationRequest.Validate if the designated constraints aren't met.
type GetEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEvaluationRequestValidationError) ErrorName() string {
	return "GetEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEvaluationRequestValidationError{}

// Validate checks the field values on GetEvaluationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEvaluationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEvaluationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEvaluationResponseMultiError, or nil if none found.
func (m *GetEvaluationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEvaluationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvaluation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEvaluationResponseValidationError{
					field:  "Evaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEvaluationResponseValidationError{
					field:  "Evaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvaluation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEvaluationResponseValidationError{
				field:  "Evaluation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEvaluationResponseMultiError(errors)
	}

	return nil
}

// GetEvaluationResponseMultiError is an error wrapping multiple validation
// errors returned by GetEvaluationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEvaluationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEvaluationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEvaluationResponseMultiError) AllErrors() []error { return m }

// GetEvaluationResponseValidationError is the validation error returned by
// GetEvaluationResponse.Validate if the designated constraints aren't met.
type GetEvaluationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEvaluationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEvaluationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEvaluationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEvaluationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEvaluationResponseValidationError) ErrorName() string {
	return "GetEvaluationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEvaluationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEvaluationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEvaluationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEvaluationResponseValidationError{}

// Validate checks the field values on DebugEvaluationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DebugEvaluationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugEvaluationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebugEvaluationRequestMultiError, or nil if none found.
func (m *DebugEvaluationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugEvaluationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DebugEvaluationRequestMultiError(errors)
	}

	return nil
}

// DebugEvaluationRequestMultiError is an error wrapping multiple validation
// errors returned by DebugEvaluationRequest.ValidateAll() if the designated
// constraints aren't met.
type DebugEvaluationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugEvaluationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugEvaluationRequestMultiError) AllErrors() []error { return m }

// DebugEvaluationRequestValidationError is the validation error returned by
// DebugEvaluationRequest.Validate if the designated constraints aren't met.
type DebugEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugEvaluationRequestValidationError) ErrorName() string {
	return "DebugEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DebugEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugEvaluationRequestValidationError{}

// Validate checks the field values on DebugEvaluationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DebugEvaluationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugEvaluationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebugEvaluationResponseMultiError, or nil if none found.
func (m *DebugEvaluationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugEvaluationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDebugEvaluation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DebugEvaluationResponseValidationError{
					field:  "DebugEvaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DebugEvaluationResponseValidationError{
					field:  "DebugEvaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDebugEvaluation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebugEvaluationResponseValidationError{
				field:  "DebugEvaluation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DebugEvaluationResponseMultiError(errors)
	}

	return nil
}

// DebugEvaluationResponseMultiError is an error wrapping multiple validation
// errors returned by DebugEvaluationResponse.ValidateAll() if the designated
// constraints aren't met.
type DebugEvaluationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugEvaluationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugEvaluationResponseMultiError) AllErrors() []error { return m }

// DebugEvaluationResponseValidationError is the validation error returned by
// DebugEvaluationResponse.Validate if the designated constraints aren't met.
type DebugEvaluationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugEvaluationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugEvaluationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugEvaluationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugEvaluationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugEvaluationResponseValidationError) ErrorName() string {
	return "DebugEvaluationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DebugEvaluationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugEvaluationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugEvaluationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugEvaluationResponseValidationError{}
