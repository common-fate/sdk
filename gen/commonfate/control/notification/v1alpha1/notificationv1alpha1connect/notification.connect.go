// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/notification/v1alpha1/notification.proto

package notificationv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/notification/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "commonfate.control.notification.v1alpha1.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceGetNotificationsProcedure is the fully-qualified name of the
	// NotificationService's GetNotifications RPC.
	NotificationServiceGetNotificationsProcedure = "/commonfate.control.notification.v1alpha1.NotificationService/GetNotifications"
	// NotificationServiceUpdateNotificationProcedure is the fully-qualified name of the
	// NotificationService's UpdateNotification RPC.
	NotificationServiceUpdateNotificationProcedure = "/commonfate.control.notification.v1alpha1.NotificationService/UpdateNotification"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	notificationServiceServiceDescriptor                  = v1alpha1.File_commonfate_control_notification_v1alpha1_notification_proto.Services().ByName("NotificationService")
	notificationServiceGetNotificationsMethodDescriptor   = notificationServiceServiceDescriptor.Methods().ByName("GetNotifications")
	notificationServiceUpdateNotificationMethodDescriptor = notificationServiceServiceDescriptor.Methods().ByName("UpdateNotification")
)

// NotificationServiceClient is a client for the
// commonfate.control.notification.v1alpha1.NotificationService service.
type NotificationServiceClient interface {
	// Returns a list of enabled notifications.
	GetNotifications(context.Context, *connect.Request[v1alpha1.GetNotificationsRequest]) (*connect.Response[v1alpha1.GetNotificationsResponse], error)
	UpdateNotification(context.Context, *connect.Request[v1alpha1.UpdateNotificationRequest]) (*connect.Response[v1alpha1.UpdateNotificationResponse], error)
}

// NewNotificationServiceClient constructs a client for the
// commonfate.control.notification.v1alpha1.NotificationService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationServiceClient{
		getNotifications: connect.NewClient[v1alpha1.GetNotificationsRequest, v1alpha1.GetNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationsProcedure,
			connect.WithSchema(notificationServiceGetNotificationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNotification: connect.NewClient[v1alpha1.UpdateNotificationRequest, v1alpha1.UpdateNotificationResponse](
			httpClient,
			baseURL+NotificationServiceUpdateNotificationProcedure,
			connect.WithSchema(notificationServiceUpdateNotificationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	getNotifications   *connect.Client[v1alpha1.GetNotificationsRequest, v1alpha1.GetNotificationsResponse]
	updateNotification *connect.Client[v1alpha1.UpdateNotificationRequest, v1alpha1.UpdateNotificationResponse]
}

// GetNotifications calls
// commonfate.control.notification.v1alpha1.NotificationService.GetNotifications.
func (c *notificationServiceClient) GetNotifications(ctx context.Context, req *connect.Request[v1alpha1.GetNotificationsRequest]) (*connect.Response[v1alpha1.GetNotificationsResponse], error) {
	return c.getNotifications.CallUnary(ctx, req)
}

// UpdateNotification calls
// commonfate.control.notification.v1alpha1.NotificationService.UpdateNotification.
func (c *notificationServiceClient) UpdateNotification(ctx context.Context, req *connect.Request[v1alpha1.UpdateNotificationRequest]) (*connect.Response[v1alpha1.UpdateNotificationResponse], error) {
	return c.updateNotification.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the
// commonfate.control.notification.v1alpha1.NotificationService service.
type NotificationServiceHandler interface {
	// Returns a list of enabled notifications.
	GetNotifications(context.Context, *connect.Request[v1alpha1.GetNotificationsRequest]) (*connect.Response[v1alpha1.GetNotificationsResponse], error)
	UpdateNotification(context.Context, *connect.Request[v1alpha1.UpdateNotificationRequest]) (*connect.Response[v1alpha1.UpdateNotificationResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceGetNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationsProcedure,
		svc.GetNotifications,
		connect.WithSchema(notificationServiceGetNotificationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceUpdateNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceUpdateNotificationProcedure,
		svc.UpdateNotification,
		connect.WithSchema(notificationServiceUpdateNotificationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.notification.v1alpha1.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceGetNotificationsProcedure:
			notificationServiceGetNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceUpdateNotificationProcedure:
			notificationServiceUpdateNotificationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) GetNotifications(context.Context, *connect.Request[v1alpha1.GetNotificationsRequest]) (*connect.Response[v1alpha1.GetNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.notification.v1alpha1.NotificationService.GetNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UpdateNotification(context.Context, *connect.Request[v1alpha1.UpdateNotificationRequest]) (*connect.Response[v1alpha1.UpdateNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.notification.v1alpha1.NotificationService.UpdateNotification is not implemented"))
}
