// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/directory/v1alpha1/directory.proto

package directoryv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on QueryUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryUsersRequestMultiError, or nil if none found.
func (m *QueryUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return QueryUsersRequestMultiError(errors)
	}

	return nil
}

// QueryUsersRequestMultiError is an error wrapping multiple validation errors
// returned by QueryUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUsersRequestMultiError) AllErrors() []error { return m }

// QueryUsersRequestValidationError is the validation error returned by
// QueryUsersRequest.Validate if the designated constraints aren't met.
type QueryUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUsersRequestValidationError) ErrorName() string {
	return "QueryUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUsersRequestValidationError{}

// Validate checks the field values on QueryUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryUsersResponseMultiError, or nil if none found.
func (m *QueryUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalUserCount

	if len(errors) > 0 {
		return QueryUsersResponseMultiError(errors)
	}

	return nil
}

// QueryUsersResponseMultiError is an error wrapping multiple validation errors
// returned by QueryUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUsersResponseMultiError) AllErrors() []error { return m }

// QueryUsersResponseValidationError is the validation error returned by
// QueryUsersResponse.Validate if the designated constraints aren't met.
type QueryUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUsersResponseValidationError) ErrorName() string {
	return "QueryUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUsersResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDiagnostics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteUserResponseValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteUserResponseValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteUserResponseValidationError{
					field:  fmt.Sprintf("Diagnostics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on QueryGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGroupsRequestMultiError, or nil if none found.
func (m *QueryGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return QueryGroupsRequestMultiError(errors)
	}

	return nil
}

// QueryGroupsRequestMultiError is an error wrapping multiple validation errors
// returned by QueryGroupsRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGroupsRequestMultiError) AllErrors() []error { return m }

// QueryGroupsRequestValidationError is the validation error returned by
// QueryGroupsRequest.Validate if the designated constraints aren't met.
type QueryGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGroupsRequestValidationError) ErrorName() string {
	return "QueryGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGroupsRequestValidationError{}

// Validate checks the field values on QueryGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGroupsResponseMultiError, or nil if none found.
func (m *QueryGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalGroupCount

	if len(errors) > 0 {
		return QueryGroupsResponseMultiError(errors)
	}

	return nil
}

// QueryGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by QueryGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGroupsResponseMultiError) AllErrors() []error { return m }

// QueryGroupsResponseValidationError is the validation error returned by
// QueryGroupsResponse.Validate if the designated constraints aren't met.
type QueryGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGroupsResponseValidationError) ErrorName() string {
	return "QueryGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGroupsResponseValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestMultiError, or nil if none found.
func (m *GetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return GetGroupRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by GetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on GetGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupResponseMultiError, or nil if none found.
func (m *GetGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupResponseMultiError(errors)
	}

	return nil
}

// GetGroupResponseMultiError is an error wrapping multiple validation errors
// returned by GetGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupResponseMultiError) AllErrors() []error { return m }

// GetGroupResponseValidationError is the validation error returned by
// GetGroupResponse.Validate if the designated constraints aren't met.
type GetGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupResponseValidationError) ErrorName() string { return "GetGroupResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupResponseValidationError{}

// Validate checks the field values on QueryGroupMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGroupMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGroupMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGroupMembersRequestMultiError, or nil if none found.
func (m *QueryGroupMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGroupMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for IntegrationId

	// no validation rules for PageToken

	if len(errors) > 0 {
		return QueryGroupMembersRequestMultiError(errors)
	}

	return nil
}

// QueryGroupMembersRequestMultiError is an error wrapping multiple validation
// errors returned by QueryGroupMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryGroupMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGroupMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGroupMembersRequestMultiError) AllErrors() []error { return m }

// QueryGroupMembersRequestValidationError is the validation error returned by
// QueryGroupMembersRequest.Validate if the designated constraints aren't met.
type QueryGroupMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGroupMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGroupMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGroupMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGroupMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGroupMembersRequestValidationError) ErrorName() string {
	return "QueryGroupMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGroupMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGroupMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGroupMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGroupMembersRequestValidationError{}

// Validate checks the field values on QueryGroupMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGroupMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGroupMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGroupMembersResponseMultiError, or nil if none found.
func (m *QueryGroupMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGroupMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryGroupMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryGroupMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryGroupMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return QueryGroupMembersResponseMultiError(errors)
	}

	return nil
}

// QueryGroupMembersResponseMultiError is an error wrapping multiple validation
// errors returned by QueryGroupMembersResponse.ValidateAll() if the
// designated constraints aren't met.
type QueryGroupMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGroupMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGroupMembersResponseMultiError) AllErrors() []error { return m }

// QueryGroupMembersResponseValidationError is the validation error returned by
// QueryGroupMembersResponse.Validate if the designated constraints aren't met.
type QueryGroupMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGroupMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGroupMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGroupMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGroupMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGroupMembersResponseValidationError) ErrorName() string {
	return "QueryGroupMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGroupMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGroupMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGroupMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGroupMembersResponseValidationError{}

// Validate checks the field values on GroupMembership with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupMembership) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMembership with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMembershipMultiError, or nil if none found.
func (m *GroupMembership) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMembership) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupMembershipValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupMembershipValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupMembershipValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupMembershipMultiError(errors)
	}

	return nil
}

// GroupMembershipMultiError is an error wrapping multiple validation errors
// returned by GroupMembership.ValidateAll() if the designated constraints
// aren't met.
type GroupMembershipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMembershipMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMembershipMultiError) AllErrors() []error { return m }

// GroupMembershipValidationError is the validation error returned by
// GroupMembership.Validate if the designated constraints aren't met.
type GroupMembershipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMembershipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMembershipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMembershipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMembershipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMembershipValidationError) ErrorName() string { return "GroupMembershipValidationError" }

// Error satisfies the builtin error interface
func (e GroupMembershipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMembership.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMembershipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMembershipValidationError{}

// Validate checks the field values on QueryChildGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryChildGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryChildGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryChildGroupsRequestMultiError, or nil if none found.
func (m *QueryChildGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryChildGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for IntegrationId

	// no validation rules for PageToken

	if len(errors) > 0 {
		return QueryChildGroupsRequestMultiError(errors)
	}

	return nil
}

// QueryChildGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by QueryChildGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryChildGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryChildGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryChildGroupsRequestMultiError) AllErrors() []error { return m }

// QueryChildGroupsRequestValidationError is the validation error returned by
// QueryChildGroupsRequest.Validate if the designated constraints aren't met.
type QueryChildGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryChildGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryChildGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryChildGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryChildGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryChildGroupsRequestValidationError) ErrorName() string {
	return "QueryChildGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryChildGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryChildGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryChildGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryChildGroupsRequestValidationError{}

// Validate checks the field values on QueryChildGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryChildGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryChildGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryChildGroupsResponseMultiError, or nil if none found.
func (m *QueryChildGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryChildGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChildGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryChildGroupsResponseValidationError{
						field:  fmt.Sprintf("ChildGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryChildGroupsResponseValidationError{
						field:  fmt.Sprintf("ChildGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryChildGroupsResponseValidationError{
					field:  fmt.Sprintf("ChildGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return QueryChildGroupsResponseMultiError(errors)
	}

	return nil
}

// QueryChildGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by QueryChildGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryChildGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryChildGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryChildGroupsResponseMultiError) AllErrors() []error { return m }

// QueryChildGroupsResponseValidationError is the validation error returned by
// QueryChildGroupsResponse.Validate if the designated constraints aren't met.
type QueryChildGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryChildGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryChildGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryChildGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryChildGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryChildGroupsResponseValidationError) ErrorName() string {
	return "QueryChildGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryChildGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryChildGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryChildGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryChildGroupsResponseValidationError{}

// Validate checks the field values on ChildGroupMembership with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChildGroupMembership) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChildGroupMembership with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChildGroupMembershipMultiError, or nil if none found.
func (m *ChildGroupMembership) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildGroupMembership) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildGroupMembershipValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildGroupMembershipValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildGroupMembershipValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChildGroupMembershipMultiError(errors)
	}

	return nil
}

// ChildGroupMembershipMultiError is an error wrapping multiple validation
// errors returned by ChildGroupMembership.ValidateAll() if the designated
// constraints aren't met.
type ChildGroupMembershipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildGroupMembershipMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildGroupMembershipMultiError) AllErrors() []error { return m }

// ChildGroupMembershipValidationError is the validation error returned by
// ChildGroupMembership.Validate if the designated constraints aren't met.
type ChildGroupMembershipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildGroupMembershipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildGroupMembershipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildGroupMembershipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildGroupMembershipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildGroupMembershipValidationError) ErrorName() string {
	return "ChildGroupMembershipValidationError"
}

// Error satisfies the builtin error interface
func (e ChildGroupMembershipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildGroupMembership.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildGroupMembershipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildGroupMembershipValidationError{}

// Validate checks the field values on QueryGroupsForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGroupsForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGroupsForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGroupsForUserRequestMultiError, or nil if none found.
func (m *QueryGroupsForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGroupsForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PageToken

	if len(errors) > 0 {
		return QueryGroupsForUserRequestMultiError(errors)
	}

	return nil
}

// QueryGroupsForUserRequestMultiError is an error wrapping multiple validation
// errors returned by QueryGroupsForUserRequest.ValidateAll() if the
// designated constraints aren't met.
type QueryGroupsForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGroupsForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGroupsForUserRequestMultiError) AllErrors() []error { return m }

// QueryGroupsForUserRequestValidationError is the validation error returned by
// QueryGroupsForUserRequest.Validate if the designated constraints aren't met.
type QueryGroupsForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGroupsForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGroupsForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGroupsForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGroupsForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGroupsForUserRequestValidationError) ErrorName() string {
	return "QueryGroupsForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGroupsForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGroupsForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGroupsForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGroupsForUserRequestValidationError{}

// Validate checks the field values on QueryGroupsForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryGroupsForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryGroupsForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryGroupsForUserResponseMultiError, or nil if none found.
func (m *QueryGroupsForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryGroupsForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMemberships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryGroupsForUserResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryGroupsForUserResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryGroupsForUserResponseValidationError{
					field:  fmt.Sprintf("Memberships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return QueryGroupsForUserResponseMultiError(errors)
	}

	return nil
}

// QueryGroupsForUserResponseMultiError is an error wrapping multiple
// validation errors returned by QueryGroupsForUserResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryGroupsForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryGroupsForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryGroupsForUserResponseMultiError) AllErrors() []error { return m }

// QueryGroupsForUserResponseValidationError is the validation error returned
// by QueryGroupsForUserResponse.Validate if the designated constraints aren't met.
type QueryGroupsForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryGroupsForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryGroupsForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryGroupsForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryGroupsForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryGroupsForUserResponseValidationError) ErrorName() string {
	return "QueryGroupsForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryGroupsForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryGroupsForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryGroupsForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryGroupsForUserResponseValidationError{}

// Validate checks the field values on UserGroupMembership with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGroupMembership) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroupMembership with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGroupMembershipMultiError, or nil if none found.
func (m *UserGroupMembership) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroupMembership) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGroupMembershipValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGroupMembershipValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGroupMembershipValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGroupMembershipMultiError(errors)
	}

	return nil
}

// UserGroupMembershipMultiError is an error wrapping multiple validation
// errors returned by UserGroupMembership.ValidateAll() if the designated
// constraints aren't met.
type UserGroupMembershipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupMembershipMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupMembershipMultiError) AllErrors() []error { return m }

// UserGroupMembershipValidationError is the validation error returned by
// UserGroupMembership.Validate if the designated constraints aren't met.
type UserGroupMembershipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupMembershipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupMembershipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupMembershipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupMembershipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupMembershipValidationError) ErrorName() string {
	return "UserGroupMembershipValidationError"
}

// Error satisfies the builtin error interface
func (e UserGroupMembershipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroupMembership.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupMembershipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupMembershipValidationError{}

// Validate checks the field values on LookupUserAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookupUserAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupUserAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookupUserAccountRequestMultiError, or nil if none found.
func (m *LookupUserAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupUserAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserAccountId

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return LookupUserAccountRequestMultiError(errors)
	}

	return nil
}

// LookupUserAccountRequestMultiError is an error wrapping multiple validation
// errors returned by LookupUserAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type LookupUserAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupUserAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupUserAccountRequestMultiError) AllErrors() []error { return m }

// LookupUserAccountRequestValidationError is the validation error returned by
// LookupUserAccountRequest.Validate if the designated constraints aren't met.
type LookupUserAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupUserAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupUserAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupUserAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupUserAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupUserAccountRequestValidationError) ErrorName() string {
	return "LookupUserAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookupUserAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupUserAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupUserAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupUserAccountRequestValidationError{}

// Validate checks the field values on LookupUserAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookupUserAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupUserAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookupUserAccountResponseMultiError, or nil if none found.
func (m *LookupUserAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupUserAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LookupUserAccountResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LookupUserAccountResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LookupUserAccountResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LookupUserAccountResponseMultiError(errors)
	}

	return nil
}

// LookupUserAccountResponseMultiError is an error wrapping multiple validation
// errors returned by LookupUserAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type LookupUserAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupUserAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupUserAccountResponseMultiError) AllErrors() []error { return m }

// LookupUserAccountResponseValidationError is the validation error returned by
// LookupUserAccountResponse.Validate if the designated constraints aren't met.
type LookupUserAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupUserAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupUserAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupUserAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupUserAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupUserAccountResponseValidationError) ErrorName() string {
	return "LookupUserAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookupUserAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupUserAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupUserAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupUserAccountResponseValidationError{}
