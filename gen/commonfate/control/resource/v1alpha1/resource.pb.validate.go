// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/resource/v1alpha1/resource.proto

package resourcev1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListTypesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTypesRequestMultiError, or nil if none found.
func (m *ListTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTypesRequestMultiError(errors)
	}

	return nil
}

// ListTypesRequestMultiError is an error wrapping multiple validation errors
// returned by ListTypesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTypesRequestMultiError) AllErrors() []error { return m }

// ListTypesRequestValidationError is the validation error returned by
// ListTypesRequest.Validate if the designated constraints aren't met.
type ListTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTypesRequestValidationError) ErrorName() string { return "ListTypesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTypesRequestValidationError{}

// Validate checks the field values on ListTypesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTypesResponseMultiError, or nil if none found.
func (m *ListTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTypesResponseMultiError(errors)
	}

	return nil
}

// ListTypesResponseMultiError is an error wrapping multiple validation errors
// returned by ListTypesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTypesResponseMultiError) AllErrors() []error { return m }

// ListTypesResponseValidationError is the validation error returned by
// ListTypesResponse.Validate if the designated constraints aren't met.
type ListTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTypesResponseValidationError) ErrorName() string {
	return "ListTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTypesResponseValidationError{}

// Validate checks the field values on QueryResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryResourcesRequestMultiError, or nil if none found.
func (m *QueryResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return QueryResourcesRequestMultiError(errors)
	}

	return nil
}

// QueryResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by QueryResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResourcesRequestMultiError) AllErrors() []error { return m }

// QueryResourcesRequestValidationError is the validation error returned by
// QueryResourcesRequest.Validate if the designated constraints aren't met.
type QueryResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResourcesRequestValidationError) ErrorName() string {
	return "QueryResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResourcesRequestValidationError{}

// Validate checks the field values on QueryResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryResourcesResponseMultiError, or nil if none found.
func (m *QueryResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryResourcesResponseMultiError(errors)
	}

	return nil
}

// QueryResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by QueryResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResourcesResponseMultiError) AllErrors() []error { return m }

// QueryResourcesResponseValidationError is the validation error returned by
// QueryResourcesResponse.Validate if the designated constraints aren't met.
type QueryResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResourcesResponseValidationError) ErrorName() string {
	return "QueryResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResourcesResponseValidationError{}

// Validate checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceRequestMultiError, or nil if none found.
func (m *GetResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEid()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResourceRequestValidationError{
					field:  "Eid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResourceRequestValidationError{
					field:  "Eid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResourceRequestValidationError{
				field:  "Eid",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResourceRequestMultiError(errors)
	}

	return nil
}

// GetResourceRequestMultiError is an error wrapping multiple validation errors
// returned by GetResourceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceRequestMultiError) AllErrors() []error { return m }

// GetResourceRequestValidationError is the validation error returned by
// GetResourceRequest.Validate if the designated constraints aren't met.
type GetResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceRequestValidationError) ErrorName() string {
	return "GetResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceRequestValidationError{}

// Validate checks the field values on GetResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceResponseMultiError, or nil if none found.
func (m *GetResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return GetResourceResponseMultiError(errors)
	}

	return nil
}

// GetResourceResponseMultiError is an error wrapping multiple validation
// errors returned by GetResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceResponseMultiError) AllErrors() []error { return m }

// GetResourceResponseValidationError is the validation error returned by
// GetResourceResponse.Validate if the designated constraints aren't met.
type GetResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceResponseValidationError) ErrorName() string {
	return "GetResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceResponseValidationError{}

// Validate checks the field values on ListChildrenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChildrenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChildrenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChildrenRequestMultiError, or nil if none found.
func (m *ListChildrenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChildrenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEid()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListChildrenRequestValidationError{
					field:  "Eid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListChildrenRequestValidationError{
					field:  "Eid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChildrenRequestValidationError{
				field:  "Eid",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListChildrenRequestMultiError(errors)
	}

	return nil
}

// ListChildrenRequestMultiError is an error wrapping multiple validation
// errors returned by ListChildrenRequest.ValidateAll() if the designated
// constraints aren't met.
type ListChildrenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChildrenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChildrenRequestMultiError) AllErrors() []error { return m }

// ListChildrenRequestValidationError is the validation error returned by
// ListChildrenRequest.Validate if the designated constraints aren't met.
type ListChildrenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChildrenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChildrenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChildrenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChildrenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChildrenRequestValidationError) ErrorName() string {
	return "ListChildrenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChildrenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChildrenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChildrenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChildrenRequestValidationError{}

// Validate checks the field values on ListChildrenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChildrenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChildrenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChildrenResponseMultiError, or nil if none found.
func (m *ListChildrenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChildrenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChildrenResponseValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChildrenResponseValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChildrenResponseValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListChildrenResponseMultiError(errors)
	}

	return nil
}

// ListChildrenResponseMultiError is an error wrapping multiple validation
// errors returned by ListChildrenResponse.ValidateAll() if the designated
// constraints aren't met.
type ListChildrenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChildrenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChildrenResponseMultiError) AllErrors() []error { return m }

// ListChildrenResponseValidationError is the validation error returned by
// ListChildrenResponse.Validate if the designated constraints aren't met.
type ListChildrenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChildrenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChildrenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChildrenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChildrenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChildrenResponseValidationError) ErrorName() string {
	return "ListChildrenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListChildrenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChildrenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChildrenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChildrenResponseValidationError{}

// Validate checks the field values on ListParentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListParentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListParentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListParentsRequestMultiError, or nil if none found.
func (m *ListParentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListParentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEid()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListParentsRequestValidationError{
					field:  "Eid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListParentsRequestValidationError{
					field:  "Eid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListParentsRequestValidationError{
				field:  "Eid",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListParentsRequestMultiError(errors)
	}

	return nil
}

// ListParentsRequestMultiError is an error wrapping multiple validation errors
// returned by ListParentsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListParentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListParentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListParentsRequestMultiError) AllErrors() []error { return m }

// ListParentsRequestValidationError is the validation error returned by
// ListParentsRequest.Validate if the designated constraints aren't met.
type ListParentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListParentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListParentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListParentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListParentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListParentsRequestValidationError) ErrorName() string {
	return "ListParentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListParentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListParentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListParentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListParentsRequestValidationError{}

// Validate checks the field values on ListParentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListParentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListParentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListParentsResponseMultiError, or nil if none found.
func (m *ListParentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListParentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListParentsResponseValidationError{
						field:  fmt.Sprintf("Parents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListParentsResponseValidationError{
						field:  fmt.Sprintf("Parents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListParentsResponseValidationError{
					field:  fmt.Sprintf("Parents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListParentsResponseMultiError(errors)
	}

	return nil
}

// ListParentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListParentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListParentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListParentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListParentsResponseMultiError) AllErrors() []error { return m }

// ListParentsResponseValidationError is the validation error returned by
// ListParentsResponse.Validate if the designated constraints aren't met.
type ListParentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListParentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListParentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListParentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListParentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListParentsResponseValidationError) ErrorName() string {
	return "ListParentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListParentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListParentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListParentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListParentsResponseValidationError{}
