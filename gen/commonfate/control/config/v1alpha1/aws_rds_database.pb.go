// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: commonfate/control/config/v1alpha1/aws_rds_database.proto

package configv1alpha1

import (
	_ "github.com/common-fate/sdk/gen/commonfate/authz/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAWSRDSDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// role
	DatabaseUser         string `protobuf:"bytes,2,opt,name=database_user,json=databaseUser,proto3" json:"database_user,omitempty"`
	ProxyInstanceAccount string `protobuf:"bytes,3,opt,name=proxy_instance_account,json=proxyInstanceAccount,proto3" json:"proxy_instance_account,omitempty"`
	ProxyInstanceRegion  string `protobuf:"bytes,4,opt,name=proxy_instance_region,json=proxyInstanceRegion,proto3" json:"proxy_instance_region,omitempty"`
	// this is the actual database name that the proxy connects to
	DatabaseName     string `protobuf:"bytes,5,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	EcsClusterName   string `protobuf:"bytes,6,opt,name=ecs_cluster_name,json=ecsClusterName,proto3" json:"ecs_cluster_name,omitempty"`
	EcsServiceName   string `protobuf:"bytes,7,opt,name=ecs_service_name,json=ecsServiceName,proto3" json:"ecs_service_name,omitempty"`
	EcsContainerName string `protobuf:"bytes,8,opt,name=ecs_container_name,json=ecsContainerName,proto3" json:"ecs_container_name,omitempty"`
}

func (x *CreateAWSRDSDatabaseRequest) Reset() {
	*x = CreateAWSRDSDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAWSRDSDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAWSRDSDatabaseRequest) ProtoMessage() {}

func (x *CreateAWSRDSDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAWSRDSDatabaseRequest.ProtoReflect.Descriptor instead.
func (*CreateAWSRDSDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAWSRDSDatabaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAWSRDSDatabaseRequest) GetDatabaseUser() string {
	if x != nil {
		return x.DatabaseUser
	}
	return ""
}

func (x *CreateAWSRDSDatabaseRequest) GetProxyInstanceAccount() string {
	if x != nil {
		return x.ProxyInstanceAccount
	}
	return ""
}

func (x *CreateAWSRDSDatabaseRequest) GetProxyInstanceRegion() string {
	if x != nil {
		return x.ProxyInstanceRegion
	}
	return ""
}

func (x *CreateAWSRDSDatabaseRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *CreateAWSRDSDatabaseRequest) GetEcsClusterName() string {
	if x != nil {
		return x.EcsClusterName
	}
	return ""
}

func (x *CreateAWSRDSDatabaseRequest) GetEcsServiceName() string {
	if x != nil {
		return x.EcsServiceName
	}
	return ""
}

func (x *CreateAWSRDSDatabaseRequest) GetEcsContainerName() string {
	if x != nil {
		return x.EcsContainerName
	}
	return ""
}

type AWSRDSDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// target
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// role
	DatabaseUser         string `protobuf:"bytes,3,opt,name=database_user,json=databaseUser,proto3" json:"database_user,omitempty"`
	ProxyInstanceAccount string `protobuf:"bytes,4,opt,name=proxy_instance_account,json=proxyInstanceAccount,proto3" json:"proxy_instance_account,omitempty"`
	ProxyInstanceRegion  string `protobuf:"bytes,5,opt,name=proxy_instance_region,json=proxyInstanceRegion,proto3" json:"proxy_instance_region,omitempty"`
	// this is the actual database name that the proxy connects to
	DatabaseName     string `protobuf:"bytes,6,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	EcsClusterName   string `protobuf:"bytes,7,opt,name=ecs_cluster_name,json=ecsClusterName,proto3" json:"ecs_cluster_name,omitempty"`
	EcsServiceName   string `protobuf:"bytes,8,opt,name=ecs_service_name,json=ecsServiceName,proto3" json:"ecs_service_name,omitempty"`
	EcsContainerName string `protobuf:"bytes,9,opt,name=ecs_container_name,json=ecsContainerName,proto3" json:"ecs_container_name,omitempty"`
}

func (x *AWSRDSDatabase) Reset() {
	*x = AWSRDSDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSRDSDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRDSDatabase) ProtoMessage() {}

func (x *AWSRDSDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRDSDatabase.ProtoReflect.Descriptor instead.
func (*AWSRDSDatabase) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP(), []int{1}
}

func (x *AWSRDSDatabase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSRDSDatabase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSRDSDatabase) GetDatabaseUser() string {
	if x != nil {
		return x.DatabaseUser
	}
	return ""
}

func (x *AWSRDSDatabase) GetProxyInstanceAccount() string {
	if x != nil {
		return x.ProxyInstanceAccount
	}
	return ""
}

func (x *AWSRDSDatabase) GetProxyInstanceRegion() string {
	if x != nil {
		return x.ProxyInstanceRegion
	}
	return ""
}

func (x *AWSRDSDatabase) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *AWSRDSDatabase) GetEcsClusterName() string {
	if x != nil {
		return x.EcsClusterName
	}
	return ""
}

func (x *AWSRDSDatabase) GetEcsServiceName() string {
	if x != nil {
		return x.EcsServiceName
	}
	return ""
}

func (x *AWSRDSDatabase) GetEcsContainerName() string {
	if x != nil {
		return x.EcsContainerName
	}
	return ""
}

type CreateAWSRDSDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsRdsDatabase *AWSRDSDatabase `protobuf:"bytes,1,opt,name=aws_rds_database,json=awsRdsDatabase,proto3" json:"aws_rds_database,omitempty"`
}

func (x *CreateAWSRDSDatabaseResponse) Reset() {
	*x = CreateAWSRDSDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAWSRDSDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAWSRDSDatabaseResponse) ProtoMessage() {}

func (x *CreateAWSRDSDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAWSRDSDatabaseResponse.ProtoReflect.Descriptor instead.
func (*CreateAWSRDSDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAWSRDSDatabaseResponse) GetAwsRdsDatabase() *AWSRDSDatabase {
	if x != nil {
		return x.AwsRdsDatabase
	}
	return nil
}

type GetAWSRDSDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAWSRDSDatabaseRequest) Reset() {
	*x = GetAWSRDSDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAWSRDSDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAWSRDSDatabaseRequest) ProtoMessage() {}

func (x *GetAWSRDSDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAWSRDSDatabaseRequest.ProtoReflect.Descriptor instead.
func (*GetAWSRDSDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP(), []int{3}
}

func (x *GetAWSRDSDatabaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAWSRDSDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsRdsDatabase *AWSRDSDatabase `protobuf:"bytes,1,opt,name=aws_rds_database,json=awsRdsDatabase,proto3" json:"aws_rds_database,omitempty"`
}

func (x *GetAWSRDSDatabaseResponse) Reset() {
	*x = GetAWSRDSDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAWSRDSDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAWSRDSDatabaseResponse) ProtoMessage() {}

func (x *GetAWSRDSDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAWSRDSDatabaseResponse.ProtoReflect.Descriptor instead.
func (*GetAWSRDSDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP(), []int{4}
}

func (x *GetAWSRDSDatabaseResponse) GetAwsRdsDatabase() *AWSRDSDatabase {
	if x != nil {
		return x.AwsRdsDatabase
	}
	return nil
}

type UpdateAWSRDSDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsRdsDatabase *AWSRDSDatabase `protobuf:"bytes,1,opt,name=aws_rds_database,json=awsRdsDatabase,proto3" json:"aws_rds_database,omitempty"`
}

func (x *UpdateAWSRDSDatabaseRequest) Reset() {
	*x = UpdateAWSRDSDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAWSRDSDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAWSRDSDatabaseRequest) ProtoMessage() {}

func (x *UpdateAWSRDSDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAWSRDSDatabaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateAWSRDSDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAWSRDSDatabaseRequest) GetAwsRdsDatabase() *AWSRDSDatabase {
	if x != nil {
		return x.AwsRdsDatabase
	}
	return nil
}

type UpdateAWSRDSDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsRdsDatabase *AWSRDSDatabase `protobuf:"bytes,1,opt,name=aws_rds_database,json=awsRdsDatabase,proto3" json:"aws_rds_database,omitempty"`
}

func (x *UpdateAWSRDSDatabaseResponse) Reset() {
	*x = UpdateAWSRDSDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAWSRDSDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAWSRDSDatabaseResponse) ProtoMessage() {}

func (x *UpdateAWSRDSDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAWSRDSDatabaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateAWSRDSDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateAWSRDSDatabaseResponse) GetAwsRdsDatabase() *AWSRDSDatabase {
	if x != nil {
		return x.AwsRdsDatabase
	}
	return nil
}

type DeleteAWSRDSDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAWSRDSDatabaseRequest) Reset() {
	*x = DeleteAWSRDSDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAWSRDSDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAWSRDSDatabaseRequest) ProtoMessage() {}

func (x *DeleteAWSRDSDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAWSRDSDatabaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteAWSRDSDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteAWSRDSDatabaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteAWSRDSDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAWSRDSDatabaseResponse) Reset() {
	*x = DeleteAWSRDSDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAWSRDSDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAWSRDSDatabaseResponse) ProtoMessage() {}

func (x *DeleteAWSRDSDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAWSRDSDatabaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteAWSRDSDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAWSRDSDatabaseResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_commonfate_control_config_v1alpha1_aws_rds_database_proto protoreflect.FileDescriptor

var file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDesc = []byte{
	0x0a, 0x39, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x02, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x63, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x63,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x63, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x65, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xea, 0x02, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x65, 0x63, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x63, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x63, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x7c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44,
	0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x0e, 0x61, 0x77, 0x73, 0x52, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22,
	0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f,
	0x72, 0x64, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x52, 0x64, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x64, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x52, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x57, 0x53,
	0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x64, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x52, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44,
	0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x32, 0x8a, 0x05, 0x0a, 0x15, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18,
	0x01, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52,
	0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9b, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xba, 0x02,
	0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x13, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x43, 0xaa, 0x02, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x22, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xe2, 0x02, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x25, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x3a,
	0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescOnce sync.Once
	file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescData = file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDesc
)

func file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescGZIP() []byte {
	file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescOnce.Do(func() {
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescData)
	})
	return file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDescData
}

var file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_commonfate_control_config_v1alpha1_aws_rds_database_proto_goTypes = []any{
	(*CreateAWSRDSDatabaseRequest)(nil),  // 0: commonfate.control.config.v1alpha1.CreateAWSRDSDatabaseRequest
	(*AWSRDSDatabase)(nil),               // 1: commonfate.control.config.v1alpha1.AWSRDSDatabase
	(*CreateAWSRDSDatabaseResponse)(nil), // 2: commonfate.control.config.v1alpha1.CreateAWSRDSDatabaseResponse
	(*GetAWSRDSDatabaseRequest)(nil),     // 3: commonfate.control.config.v1alpha1.GetAWSRDSDatabaseRequest
	(*GetAWSRDSDatabaseResponse)(nil),    // 4: commonfate.control.config.v1alpha1.GetAWSRDSDatabaseResponse
	(*UpdateAWSRDSDatabaseRequest)(nil),  // 5: commonfate.control.config.v1alpha1.UpdateAWSRDSDatabaseRequest
	(*UpdateAWSRDSDatabaseResponse)(nil), // 6: commonfate.control.config.v1alpha1.UpdateAWSRDSDatabaseResponse
	(*DeleteAWSRDSDatabaseRequest)(nil),  // 7: commonfate.control.config.v1alpha1.DeleteAWSRDSDatabaseRequest
	(*DeleteAWSRDSDatabaseResponse)(nil), // 8: commonfate.control.config.v1alpha1.DeleteAWSRDSDatabaseResponse
}
var file_commonfate_control_config_v1alpha1_aws_rds_database_proto_depIdxs = []int32{
	1, // 0: commonfate.control.config.v1alpha1.CreateAWSRDSDatabaseResponse.aws_rds_database:type_name -> commonfate.control.config.v1alpha1.AWSRDSDatabase
	1, // 1: commonfate.control.config.v1alpha1.GetAWSRDSDatabaseResponse.aws_rds_database:type_name -> commonfate.control.config.v1alpha1.AWSRDSDatabase
	1, // 2: commonfate.control.config.v1alpha1.UpdateAWSRDSDatabaseRequest.aws_rds_database:type_name -> commonfate.control.config.v1alpha1.AWSRDSDatabase
	1, // 3: commonfate.control.config.v1alpha1.UpdateAWSRDSDatabaseResponse.aws_rds_database:type_name -> commonfate.control.config.v1alpha1.AWSRDSDatabase
	0, // 4: commonfate.control.config.v1alpha1.AWSRDSDatabaseService.CreateAWSRDSDatabase:input_type -> commonfate.control.config.v1alpha1.CreateAWSRDSDatabaseRequest
	3, // 5: commonfate.control.config.v1alpha1.AWSRDSDatabaseService.GetAWSRDSDatabase:input_type -> commonfate.control.config.v1alpha1.GetAWSRDSDatabaseRequest
	5, // 6: commonfate.control.config.v1alpha1.AWSRDSDatabaseService.UpdateAWSRDSDatabase:input_type -> commonfate.control.config.v1alpha1.UpdateAWSRDSDatabaseRequest
	7, // 7: commonfate.control.config.v1alpha1.AWSRDSDatabaseService.DeleteAWSRDSDatabase:input_type -> commonfate.control.config.v1alpha1.DeleteAWSRDSDatabaseRequest
	2, // 8: commonfate.control.config.v1alpha1.AWSRDSDatabaseService.CreateAWSRDSDatabase:output_type -> commonfate.control.config.v1alpha1.CreateAWSRDSDatabaseResponse
	4, // 9: commonfate.control.config.v1alpha1.AWSRDSDatabaseService.GetAWSRDSDatabase:output_type -> commonfate.control.config.v1alpha1.GetAWSRDSDatabaseResponse
	6, // 10: commonfate.control.config.v1alpha1.AWSRDSDatabaseService.UpdateAWSRDSDatabase:output_type -> commonfate.control.config.v1alpha1.UpdateAWSRDSDatabaseResponse
	8, // 11: commonfate.control.config.v1alpha1.AWSRDSDatabaseService.DeleteAWSRDSDatabase:output_type -> commonfate.control.config.v1alpha1.DeleteAWSRDSDatabaseResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_commonfate_control_config_v1alpha1_aws_rds_database_proto_init() }
func file_commonfate_control_config_v1alpha1_aws_rds_database_proto_init() {
	if File_commonfate_control_config_v1alpha1_aws_rds_database_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAWSRDSDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AWSRDSDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAWSRDSDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetAWSRDSDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetAWSRDSDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAWSRDSDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAWSRDSDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAWSRDSDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAWSRDSDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commonfate_control_config_v1alpha1_aws_rds_database_proto_goTypes,
		DependencyIndexes: file_commonfate_control_config_v1alpha1_aws_rds_database_proto_depIdxs,
		MessageInfos:      file_commonfate_control_config_v1alpha1_aws_rds_database_proto_msgTypes,
	}.Build()
	File_commonfate_control_config_v1alpha1_aws_rds_database_proto = out.File
	file_commonfate_control_config_v1alpha1_aws_rds_database_proto_rawDesc = nil
	file_commonfate_control_config_v1alpha1_aws_rds_database_proto_goTypes = nil
	file_commonfate_control_config_v1alpha1_aws_rds_database_proto_depIdxs = nil
}
