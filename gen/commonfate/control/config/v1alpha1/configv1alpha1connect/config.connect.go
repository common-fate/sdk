// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/config.proto

package configv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ConfigServiceName is the fully-qualified name of the ConfigService service.
	ConfigServiceName = "commonfate.control.config.v1alpha1.ConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigServiceCreateIDPProcedure is the fully-qualified name of the ConfigService's CreateIDP RPC.
	ConfigServiceCreateIDPProcedure = "/commonfate.control.config.v1alpha1.ConfigService/CreateIDP"
	// ConfigServiceReadIDPProcedure is the fully-qualified name of the ConfigService's ReadIDP RPC.
	ConfigServiceReadIDPProcedure = "/commonfate.control.config.v1alpha1.ConfigService/ReadIDP"
	// ConfigServiceUpdateIDPProcedure is the fully-qualified name of the ConfigService's UpdateIDP RPC.
	ConfigServiceUpdateIDPProcedure = "/commonfate.control.config.v1alpha1.ConfigService/UpdateIDP"
	// ConfigServiceDeleteIDPProcedure is the fully-qualified name of the ConfigService's DeleteIDP RPC.
	ConfigServiceDeleteIDPProcedure = "/commonfate.control.config.v1alpha1.ConfigService/DeleteIDP"
	// ConfigServiceCreatePolicyProcedure is the fully-qualified name of the ConfigService's
	// CreatePolicy RPC.
	ConfigServiceCreatePolicyProcedure = "/commonfate.control.config.v1alpha1.ConfigService/CreatePolicy"
	// ConfigServiceReadPolicyProcedure is the fully-qualified name of the ConfigService's ReadPolicy
	// RPC.
	ConfigServiceReadPolicyProcedure = "/commonfate.control.config.v1alpha1.ConfigService/ReadPolicy"
	// ConfigServiceUpdatePolicyProcedure is the fully-qualified name of the ConfigService's
	// UpdatePolicy RPC.
	ConfigServiceUpdatePolicyProcedure = "/commonfate.control.config.v1alpha1.ConfigService/UpdatePolicy"
	// ConfigServiceDeletePolicyProcedure is the fully-qualified name of the ConfigService's
	// DeletePolicy RPC.
	ConfigServiceDeletePolicyProcedure = "/commonfate.control.config.v1alpha1.ConfigService/DeletePolicy"
	// ConfigServiceCreateGCPOrganizationProcedure is the fully-qualified name of the ConfigService's
	// CreateGCPOrganization RPC.
	ConfigServiceCreateGCPOrganizationProcedure = "/commonfate.control.config.v1alpha1.ConfigService/CreateGCPOrganization"
	// ConfigServiceReadGCPOrganizationProcedure is the fully-qualified name of the ConfigService's
	// ReadGCPOrganization RPC.
	ConfigServiceReadGCPOrganizationProcedure = "/commonfate.control.config.v1alpha1.ConfigService/ReadGCPOrganization"
	// ConfigServiceUpdateGCPOrganizationProcedure is the fully-qualified name of the ConfigService's
	// UpdateGCPOrganization RPC.
	ConfigServiceUpdateGCPOrganizationProcedure = "/commonfate.control.config.v1alpha1.ConfigService/UpdateGCPOrganization"
	// ConfigServiceDeleteGCPOrganizationProcedure is the fully-qualified name of the ConfigService's
	// DeleteGCPOrganization RPC.
	ConfigServiceDeleteGCPOrganizationProcedure = "/commonfate.control.config.v1alpha1.ConfigService/DeleteGCPOrganization"
	// ConfigServiceCreateApprovalWorkflowProcedure is the fully-qualified name of the ConfigService's
	// CreateApprovalWorkflow RPC.
	ConfigServiceCreateApprovalWorkflowProcedure = "/commonfate.control.config.v1alpha1.ConfigService/CreateApprovalWorkflow"
	// ConfigServiceReadApprovalWorkflowProcedure is the fully-qualified name of the ConfigService's
	// ReadApprovalWorkflow RPC.
	ConfigServiceReadApprovalWorkflowProcedure = "/commonfate.control.config.v1alpha1.ConfigService/ReadApprovalWorkflow"
	// ConfigServiceUpdateApprovalWorkflowProcedure is the fully-qualified name of the ConfigService's
	// UpdateApprovalWorkflow RPC.
	ConfigServiceUpdateApprovalWorkflowProcedure = "/commonfate.control.config.v1alpha1.ConfigService/UpdateApprovalWorkflow"
	// ConfigServiceDeleteApprovalWorkflowProcedure is the fully-qualified name of the ConfigService's
	// DeleteApprovalWorkflow RPC.
	ConfigServiceDeleteApprovalWorkflowProcedure = "/commonfate.control.config.v1alpha1.ConfigService/DeleteApprovalWorkflow"
	// ConfigServiceCreatePermissionMappingProcedure is the fully-qualified name of the ConfigService's
	// CreatePermissionMapping RPC.
	ConfigServiceCreatePermissionMappingProcedure = "/commonfate.control.config.v1alpha1.ConfigService/CreatePermissionMapping"
	// ConfigServiceReadPermissionMappingProcedure is the fully-qualified name of the ConfigService's
	// ReadPermissionMapping RPC.
	ConfigServiceReadPermissionMappingProcedure = "/commonfate.control.config.v1alpha1.ConfigService/ReadPermissionMapping"
	// ConfigServiceUpdatePermissionMappingProcedure is the fully-qualified name of the ConfigService's
	// UpdatePermissionMapping RPC.
	ConfigServiceUpdatePermissionMappingProcedure = "/commonfate.control.config.v1alpha1.ConfigService/UpdatePermissionMapping"
	// ConfigServiceDeletePermissionMappingProcedure is the fully-qualified name of the ConfigService's
	// DeletePermissionMapping RPC.
	ConfigServiceDeletePermissionMappingProcedure = "/commonfate.control.config.v1alpha1.ConfigService/DeletePermissionMapping"
	// ConfigServiceCreateScheduleProcedure is the fully-qualified name of the ConfigService's
	// CreateSchedule RPC.
	ConfigServiceCreateScheduleProcedure = "/commonfate.control.config.v1alpha1.ConfigService/CreateSchedule"
	// ConfigServiceReadScheduleProcedure is the fully-qualified name of the ConfigService's
	// ReadSchedule RPC.
	ConfigServiceReadScheduleProcedure = "/commonfate.control.config.v1alpha1.ConfigService/ReadSchedule"
	// ConfigServiceUpdateScheduleProcedure is the fully-qualified name of the ConfigService's
	// UpdateSchedule RPC.
	ConfigServiceUpdateScheduleProcedure = "/commonfate.control.config.v1alpha1.ConfigService/UpdateSchedule"
	// ConfigServiceDeleteScheduleProcedure is the fully-qualified name of the ConfigService's
	// DeleteSchedule RPC.
	ConfigServiceDeleteScheduleProcedure = "/commonfate.control.config.v1alpha1.ConfigService/DeleteSchedule"
	// ConfigServiceReadPagerDutySchedulesProcedure is the fully-qualified name of the ConfigService's
	// ReadPagerDutySchedules RPC.
	ConfigServiceReadPagerDutySchedulesProcedure = "/commonfate.control.config.v1alpha1.ConfigService/ReadPagerDutySchedules"
)

// ConfigServiceClient is a client for the commonfate.control.config.v1alpha1.ConfigService service.
type ConfigServiceClient interface {
	CreateIDP(context.Context, *connect_go.Request[v1alpha1.CreateIDPRequest]) (*connect_go.Response[v1alpha1.CreateIDPResponse], error)
	ReadIDP(context.Context, *connect_go.Request[v1alpha1.ReadIDPRequest]) (*connect_go.Response[v1alpha1.ReadIDPResponse], error)
	UpdateIDP(context.Context, *connect_go.Request[v1alpha1.UpdateIDPRequest]) (*connect_go.Response[v1alpha1.UpdateIDPResponse], error)
	DeleteIDP(context.Context, *connect_go.Request[v1alpha1.DeleteIDPRequest]) (*connect_go.Response[v1alpha1.DeleteIDPResponse], error)
	CreatePolicy(context.Context, *connect_go.Request[v1alpha1.CreatePolicyRequest]) (*connect_go.Response[v1alpha1.CreatePolicyResponse], error)
	ReadPolicy(context.Context, *connect_go.Request[v1alpha1.ReadPolicyRequest]) (*connect_go.Response[v1alpha1.ReadPolicyResponse], error)
	UpdatePolicy(context.Context, *connect_go.Request[v1alpha1.UpdatePolicyRequest]) (*connect_go.Response[v1alpha1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect_go.Request[v1alpha1.DeletePolicyRequest]) (*connect_go.Response[v1alpha1.DeletePolicyResponse], error)
	CreateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.CreateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateGCPOrganizationResponse], error)
	ReadGCPOrganization(context.Context, *connect_go.Request[v1alpha1.ReadGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.ReadGCPOrganizationResponse], error)
	UpdateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.UpdateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.UpdateGCPOrganizationResponse], error)
	DeleteGCPOrganization(context.Context, *connect_go.Request[v1alpha1.DeleteGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteGCPOrganizationResponse], error)
	CreateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.CreateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateApprovalWorkflowResponse], error)
	ReadApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.ReadApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.ReadApprovalWorkflowResponse], error)
	UpdateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.UpdateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateApprovalWorkflowResponse], error)
	DeleteApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.DeleteApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteApprovalWorkflowResponse], error)
	CreatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.CreatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.CreatePermissionMappingResponse], error)
	ReadPermissionMapping(context.Context, *connect_go.Request[v1alpha1.ReadPermissionMappingRequest]) (*connect_go.Response[v1alpha1.ReadPermissionMappingResponse], error)
	UpdatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.UpdatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.UpdatePermissionMappingResponse], error)
	DeletePermissionMapping(context.Context, *connect_go.Request[v1alpha1.DeletePermissionMappingRequest]) (*connect_go.Response[v1alpha1.DeletePermissionMappingResponse], error)
	CreateSchedule(context.Context, *connect_go.Request[v1alpha1.CreateScheduleRequest]) (*connect_go.Response[v1alpha1.CreateScheduleResponse], error)
	ReadSchedule(context.Context, *connect_go.Request[v1alpha1.ReadScheduleRequest]) (*connect_go.Response[v1alpha1.ReadScheduleResponse], error)
	UpdateSchedule(context.Context, *connect_go.Request[v1alpha1.UpdateScheduleRequest]) (*connect_go.Response[v1alpha1.UpdateScheduleResponse], error)
	DeleteSchedule(context.Context, *connect_go.Request[v1alpha1.DeleteScheduleRequest]) (*connect_go.Response[v1alpha1.DeleteScheduleResponse], error)
	ReadPagerDutySchedules(context.Context, *connect_go.Request[v1alpha1.ReadPagerDutySchedulesRequest]) (*connect_go.Response[v1alpha1.ReadPagerDutySchedulesResponse], error)
}

// NewConfigServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.ConfigService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &configServiceClient{
		createIDP: connect_go.NewClient[v1alpha1.CreateIDPRequest, v1alpha1.CreateIDPResponse](
			httpClient,
			baseURL+ConfigServiceCreateIDPProcedure,
			opts...,
		),
		readIDP: connect_go.NewClient[v1alpha1.ReadIDPRequest, v1alpha1.ReadIDPResponse](
			httpClient,
			baseURL+ConfigServiceReadIDPProcedure,
			opts...,
		),
		updateIDP: connect_go.NewClient[v1alpha1.UpdateIDPRequest, v1alpha1.UpdateIDPResponse](
			httpClient,
			baseURL+ConfigServiceUpdateIDPProcedure,
			opts...,
		),
		deleteIDP: connect_go.NewClient[v1alpha1.DeleteIDPRequest, v1alpha1.DeleteIDPResponse](
			httpClient,
			baseURL+ConfigServiceDeleteIDPProcedure,
			opts...,
		),
		createPolicy: connect_go.NewClient[v1alpha1.CreatePolicyRequest, v1alpha1.CreatePolicyResponse](
			httpClient,
			baseURL+ConfigServiceCreatePolicyProcedure,
			opts...,
		),
		readPolicy: connect_go.NewClient[v1alpha1.ReadPolicyRequest, v1alpha1.ReadPolicyResponse](
			httpClient,
			baseURL+ConfigServiceReadPolicyProcedure,
			opts...,
		),
		updatePolicy: connect_go.NewClient[v1alpha1.UpdatePolicyRequest, v1alpha1.UpdatePolicyResponse](
			httpClient,
			baseURL+ConfigServiceUpdatePolicyProcedure,
			opts...,
		),
		deletePolicy: connect_go.NewClient[v1alpha1.DeletePolicyRequest, v1alpha1.DeletePolicyResponse](
			httpClient,
			baseURL+ConfigServiceDeletePolicyProcedure,
			opts...,
		),
		createGCPOrganization: connect_go.NewClient[v1alpha1.CreateGCPOrganizationRequest, v1alpha1.CreateGCPOrganizationResponse](
			httpClient,
			baseURL+ConfigServiceCreateGCPOrganizationProcedure,
			opts...,
		),
		readGCPOrganization: connect_go.NewClient[v1alpha1.ReadGCPOrganizationRequest, v1alpha1.ReadGCPOrganizationResponse](
			httpClient,
			baseURL+ConfigServiceReadGCPOrganizationProcedure,
			opts...,
		),
		updateGCPOrganization: connect_go.NewClient[v1alpha1.UpdateGCPOrganizationRequest, v1alpha1.UpdateGCPOrganizationResponse](
			httpClient,
			baseURL+ConfigServiceUpdateGCPOrganizationProcedure,
			opts...,
		),
		deleteGCPOrganization: connect_go.NewClient[v1alpha1.DeleteGCPOrganizationRequest, v1alpha1.DeleteGCPOrganizationResponse](
			httpClient,
			baseURL+ConfigServiceDeleteGCPOrganizationProcedure,
			opts...,
		),
		createApprovalWorkflow: connect_go.NewClient[v1alpha1.CreateApprovalWorkflowRequest, v1alpha1.CreateApprovalWorkflowResponse](
			httpClient,
			baseURL+ConfigServiceCreateApprovalWorkflowProcedure,
			opts...,
		),
		readApprovalWorkflow: connect_go.NewClient[v1alpha1.ReadApprovalWorkflowRequest, v1alpha1.ReadApprovalWorkflowResponse](
			httpClient,
			baseURL+ConfigServiceReadApprovalWorkflowProcedure,
			opts...,
		),
		updateApprovalWorkflow: connect_go.NewClient[v1alpha1.UpdateApprovalWorkflowRequest, v1alpha1.UpdateApprovalWorkflowResponse](
			httpClient,
			baseURL+ConfigServiceUpdateApprovalWorkflowProcedure,
			opts...,
		),
		deleteApprovalWorkflow: connect_go.NewClient[v1alpha1.DeleteApprovalWorkflowRequest, v1alpha1.DeleteApprovalWorkflowResponse](
			httpClient,
			baseURL+ConfigServiceDeleteApprovalWorkflowProcedure,
			opts...,
		),
		createPermissionMapping: connect_go.NewClient[v1alpha1.CreatePermissionMappingRequest, v1alpha1.CreatePermissionMappingResponse](
			httpClient,
			baseURL+ConfigServiceCreatePermissionMappingProcedure,
			opts...,
		),
		readPermissionMapping: connect_go.NewClient[v1alpha1.ReadPermissionMappingRequest, v1alpha1.ReadPermissionMappingResponse](
			httpClient,
			baseURL+ConfigServiceReadPermissionMappingProcedure,
			opts...,
		),
		updatePermissionMapping: connect_go.NewClient[v1alpha1.UpdatePermissionMappingRequest, v1alpha1.UpdatePermissionMappingResponse](
			httpClient,
			baseURL+ConfigServiceUpdatePermissionMappingProcedure,
			opts...,
		),
		deletePermissionMapping: connect_go.NewClient[v1alpha1.DeletePermissionMappingRequest, v1alpha1.DeletePermissionMappingResponse](
			httpClient,
			baseURL+ConfigServiceDeletePermissionMappingProcedure,
			opts...,
		),
		createSchedule: connect_go.NewClient[v1alpha1.CreateScheduleRequest, v1alpha1.CreateScheduleResponse](
			httpClient,
			baseURL+ConfigServiceCreateScheduleProcedure,
			opts...,
		),
		readSchedule: connect_go.NewClient[v1alpha1.ReadScheduleRequest, v1alpha1.ReadScheduleResponse](
			httpClient,
			baseURL+ConfigServiceReadScheduleProcedure,
			opts...,
		),
		updateSchedule: connect_go.NewClient[v1alpha1.UpdateScheduleRequest, v1alpha1.UpdateScheduleResponse](
			httpClient,
			baseURL+ConfigServiceUpdateScheduleProcedure,
			opts...,
		),
		deleteSchedule: connect_go.NewClient[v1alpha1.DeleteScheduleRequest, v1alpha1.DeleteScheduleResponse](
			httpClient,
			baseURL+ConfigServiceDeleteScheduleProcedure,
			opts...,
		),
		readPagerDutySchedules: connect_go.NewClient[v1alpha1.ReadPagerDutySchedulesRequest, v1alpha1.ReadPagerDutySchedulesResponse](
			httpClient,
			baseURL+ConfigServiceReadPagerDutySchedulesProcedure,
			opts...,
		),
	}
}

// configServiceClient implements ConfigServiceClient.
type configServiceClient struct {
	createIDP               *connect_go.Client[v1alpha1.CreateIDPRequest, v1alpha1.CreateIDPResponse]
	readIDP                 *connect_go.Client[v1alpha1.ReadIDPRequest, v1alpha1.ReadIDPResponse]
	updateIDP               *connect_go.Client[v1alpha1.UpdateIDPRequest, v1alpha1.UpdateIDPResponse]
	deleteIDP               *connect_go.Client[v1alpha1.DeleteIDPRequest, v1alpha1.DeleteIDPResponse]
	createPolicy            *connect_go.Client[v1alpha1.CreatePolicyRequest, v1alpha1.CreatePolicyResponse]
	readPolicy              *connect_go.Client[v1alpha1.ReadPolicyRequest, v1alpha1.ReadPolicyResponse]
	updatePolicy            *connect_go.Client[v1alpha1.UpdatePolicyRequest, v1alpha1.UpdatePolicyResponse]
	deletePolicy            *connect_go.Client[v1alpha1.DeletePolicyRequest, v1alpha1.DeletePolicyResponse]
	createGCPOrganization   *connect_go.Client[v1alpha1.CreateGCPOrganizationRequest, v1alpha1.CreateGCPOrganizationResponse]
	readGCPOrganization     *connect_go.Client[v1alpha1.ReadGCPOrganizationRequest, v1alpha1.ReadGCPOrganizationResponse]
	updateGCPOrganization   *connect_go.Client[v1alpha1.UpdateGCPOrganizationRequest, v1alpha1.UpdateGCPOrganizationResponse]
	deleteGCPOrganization   *connect_go.Client[v1alpha1.DeleteGCPOrganizationRequest, v1alpha1.DeleteGCPOrganizationResponse]
	createApprovalWorkflow  *connect_go.Client[v1alpha1.CreateApprovalWorkflowRequest, v1alpha1.CreateApprovalWorkflowResponse]
	readApprovalWorkflow    *connect_go.Client[v1alpha1.ReadApprovalWorkflowRequest, v1alpha1.ReadApprovalWorkflowResponse]
	updateApprovalWorkflow  *connect_go.Client[v1alpha1.UpdateApprovalWorkflowRequest, v1alpha1.UpdateApprovalWorkflowResponse]
	deleteApprovalWorkflow  *connect_go.Client[v1alpha1.DeleteApprovalWorkflowRequest, v1alpha1.DeleteApprovalWorkflowResponse]
	createPermissionMapping *connect_go.Client[v1alpha1.CreatePermissionMappingRequest, v1alpha1.CreatePermissionMappingResponse]
	readPermissionMapping   *connect_go.Client[v1alpha1.ReadPermissionMappingRequest, v1alpha1.ReadPermissionMappingResponse]
	updatePermissionMapping *connect_go.Client[v1alpha1.UpdatePermissionMappingRequest, v1alpha1.UpdatePermissionMappingResponse]
	deletePermissionMapping *connect_go.Client[v1alpha1.DeletePermissionMappingRequest, v1alpha1.DeletePermissionMappingResponse]
	createSchedule          *connect_go.Client[v1alpha1.CreateScheduleRequest, v1alpha1.CreateScheduleResponse]
	readSchedule            *connect_go.Client[v1alpha1.ReadScheduleRequest, v1alpha1.ReadScheduleResponse]
	updateSchedule          *connect_go.Client[v1alpha1.UpdateScheduleRequest, v1alpha1.UpdateScheduleResponse]
	deleteSchedule          *connect_go.Client[v1alpha1.DeleteScheduleRequest, v1alpha1.DeleteScheduleResponse]
	readPagerDutySchedules  *connect_go.Client[v1alpha1.ReadPagerDutySchedulesRequest, v1alpha1.ReadPagerDutySchedulesResponse]
}

// CreateIDP calls commonfate.control.config.v1alpha1.ConfigService.CreateIDP.
func (c *configServiceClient) CreateIDP(ctx context.Context, req *connect_go.Request[v1alpha1.CreateIDPRequest]) (*connect_go.Response[v1alpha1.CreateIDPResponse], error) {
	return c.createIDP.CallUnary(ctx, req)
}

// ReadIDP calls commonfate.control.config.v1alpha1.ConfigService.ReadIDP.
func (c *configServiceClient) ReadIDP(ctx context.Context, req *connect_go.Request[v1alpha1.ReadIDPRequest]) (*connect_go.Response[v1alpha1.ReadIDPResponse], error) {
	return c.readIDP.CallUnary(ctx, req)
}

// UpdateIDP calls commonfate.control.config.v1alpha1.ConfigService.UpdateIDP.
func (c *configServiceClient) UpdateIDP(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateIDPRequest]) (*connect_go.Response[v1alpha1.UpdateIDPResponse], error) {
	return c.updateIDP.CallUnary(ctx, req)
}

// DeleteIDP calls commonfate.control.config.v1alpha1.ConfigService.DeleteIDP.
func (c *configServiceClient) DeleteIDP(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteIDPRequest]) (*connect_go.Response[v1alpha1.DeleteIDPResponse], error) {
	return c.deleteIDP.CallUnary(ctx, req)
}

// CreatePolicy calls commonfate.control.config.v1alpha1.ConfigService.CreatePolicy.
func (c *configServiceClient) CreatePolicy(ctx context.Context, req *connect_go.Request[v1alpha1.CreatePolicyRequest]) (*connect_go.Response[v1alpha1.CreatePolicyResponse], error) {
	return c.createPolicy.CallUnary(ctx, req)
}

// ReadPolicy calls commonfate.control.config.v1alpha1.ConfigService.ReadPolicy.
func (c *configServiceClient) ReadPolicy(ctx context.Context, req *connect_go.Request[v1alpha1.ReadPolicyRequest]) (*connect_go.Response[v1alpha1.ReadPolicyResponse], error) {
	return c.readPolicy.CallUnary(ctx, req)
}

// UpdatePolicy calls commonfate.control.config.v1alpha1.ConfigService.UpdatePolicy.
func (c *configServiceClient) UpdatePolicy(ctx context.Context, req *connect_go.Request[v1alpha1.UpdatePolicyRequest]) (*connect_go.Response[v1alpha1.UpdatePolicyResponse], error) {
	return c.updatePolicy.CallUnary(ctx, req)
}

// DeletePolicy calls commonfate.control.config.v1alpha1.ConfigService.DeletePolicy.
func (c *configServiceClient) DeletePolicy(ctx context.Context, req *connect_go.Request[v1alpha1.DeletePolicyRequest]) (*connect_go.Response[v1alpha1.DeletePolicyResponse], error) {
	return c.deletePolicy.CallUnary(ctx, req)
}

// CreateGCPOrganization calls
// commonfate.control.config.v1alpha1.ConfigService.CreateGCPOrganization.
func (c *configServiceClient) CreateGCPOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.CreateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateGCPOrganizationResponse], error) {
	return c.createGCPOrganization.CallUnary(ctx, req)
}

// ReadGCPOrganization calls commonfate.control.config.v1alpha1.ConfigService.ReadGCPOrganization.
func (c *configServiceClient) ReadGCPOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.ReadGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.ReadGCPOrganizationResponse], error) {
	return c.readGCPOrganization.CallUnary(ctx, req)
}

// UpdateGCPOrganization calls
// commonfate.control.config.v1alpha1.ConfigService.UpdateGCPOrganization.
func (c *configServiceClient) UpdateGCPOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.UpdateGCPOrganizationResponse], error) {
	return c.updateGCPOrganization.CallUnary(ctx, req)
}

// DeleteGCPOrganization calls
// commonfate.control.config.v1alpha1.ConfigService.DeleteGCPOrganization.
func (c *configServiceClient) DeleteGCPOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteGCPOrganizationResponse], error) {
	return c.deleteGCPOrganization.CallUnary(ctx, req)
}

// CreateApprovalWorkflow calls
// commonfate.control.config.v1alpha1.ConfigService.CreateApprovalWorkflow.
func (c *configServiceClient) CreateApprovalWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.CreateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateApprovalWorkflowResponse], error) {
	return c.createApprovalWorkflow.CallUnary(ctx, req)
}

// ReadApprovalWorkflow calls commonfate.control.config.v1alpha1.ConfigService.ReadApprovalWorkflow.
func (c *configServiceClient) ReadApprovalWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.ReadApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.ReadApprovalWorkflowResponse], error) {
	return c.readApprovalWorkflow.CallUnary(ctx, req)
}

// UpdateApprovalWorkflow calls
// commonfate.control.config.v1alpha1.ConfigService.UpdateApprovalWorkflow.
func (c *configServiceClient) UpdateApprovalWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateApprovalWorkflowResponse], error) {
	return c.updateApprovalWorkflow.CallUnary(ctx, req)
}

// DeleteApprovalWorkflow calls
// commonfate.control.config.v1alpha1.ConfigService.DeleteApprovalWorkflow.
func (c *configServiceClient) DeleteApprovalWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteApprovalWorkflowResponse], error) {
	return c.deleteApprovalWorkflow.CallUnary(ctx, req)
}

// CreatePermissionMapping calls
// commonfate.control.config.v1alpha1.ConfigService.CreatePermissionMapping.
func (c *configServiceClient) CreatePermissionMapping(ctx context.Context, req *connect_go.Request[v1alpha1.CreatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.CreatePermissionMappingResponse], error) {
	return c.createPermissionMapping.CallUnary(ctx, req)
}

// ReadPermissionMapping calls
// commonfate.control.config.v1alpha1.ConfigService.ReadPermissionMapping.
func (c *configServiceClient) ReadPermissionMapping(ctx context.Context, req *connect_go.Request[v1alpha1.ReadPermissionMappingRequest]) (*connect_go.Response[v1alpha1.ReadPermissionMappingResponse], error) {
	return c.readPermissionMapping.CallUnary(ctx, req)
}

// UpdatePermissionMapping calls
// commonfate.control.config.v1alpha1.ConfigService.UpdatePermissionMapping.
func (c *configServiceClient) UpdatePermissionMapping(ctx context.Context, req *connect_go.Request[v1alpha1.UpdatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.UpdatePermissionMappingResponse], error) {
	return c.updatePermissionMapping.CallUnary(ctx, req)
}

// DeletePermissionMapping calls
// commonfate.control.config.v1alpha1.ConfigService.DeletePermissionMapping.
func (c *configServiceClient) DeletePermissionMapping(ctx context.Context, req *connect_go.Request[v1alpha1.DeletePermissionMappingRequest]) (*connect_go.Response[v1alpha1.DeletePermissionMappingResponse], error) {
	return c.deletePermissionMapping.CallUnary(ctx, req)
}

// CreateSchedule calls commonfate.control.config.v1alpha1.ConfigService.CreateSchedule.
func (c *configServiceClient) CreateSchedule(ctx context.Context, req *connect_go.Request[v1alpha1.CreateScheduleRequest]) (*connect_go.Response[v1alpha1.CreateScheduleResponse], error) {
	return c.createSchedule.CallUnary(ctx, req)
}

// ReadSchedule calls commonfate.control.config.v1alpha1.ConfigService.ReadSchedule.
func (c *configServiceClient) ReadSchedule(ctx context.Context, req *connect_go.Request[v1alpha1.ReadScheduleRequest]) (*connect_go.Response[v1alpha1.ReadScheduleResponse], error) {
	return c.readSchedule.CallUnary(ctx, req)
}

// UpdateSchedule calls commonfate.control.config.v1alpha1.ConfigService.UpdateSchedule.
func (c *configServiceClient) UpdateSchedule(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateScheduleRequest]) (*connect_go.Response[v1alpha1.UpdateScheduleResponse], error) {
	return c.updateSchedule.CallUnary(ctx, req)
}

// DeleteSchedule calls commonfate.control.config.v1alpha1.ConfigService.DeleteSchedule.
func (c *configServiceClient) DeleteSchedule(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteScheduleRequest]) (*connect_go.Response[v1alpha1.DeleteScheduleResponse], error) {
	return c.deleteSchedule.CallUnary(ctx, req)
}

// ReadPagerDutySchedules calls
// commonfate.control.config.v1alpha1.ConfigService.ReadPagerDutySchedules.
func (c *configServiceClient) ReadPagerDutySchedules(ctx context.Context, req *connect_go.Request[v1alpha1.ReadPagerDutySchedulesRequest]) (*connect_go.Response[v1alpha1.ReadPagerDutySchedulesResponse], error) {
	return c.readPagerDutySchedules.CallUnary(ctx, req)
}

// ConfigServiceHandler is an implementation of the commonfate.control.config.v1alpha1.ConfigService
// service.
type ConfigServiceHandler interface {
	CreateIDP(context.Context, *connect_go.Request[v1alpha1.CreateIDPRequest]) (*connect_go.Response[v1alpha1.CreateIDPResponse], error)
	ReadIDP(context.Context, *connect_go.Request[v1alpha1.ReadIDPRequest]) (*connect_go.Response[v1alpha1.ReadIDPResponse], error)
	UpdateIDP(context.Context, *connect_go.Request[v1alpha1.UpdateIDPRequest]) (*connect_go.Response[v1alpha1.UpdateIDPResponse], error)
	DeleteIDP(context.Context, *connect_go.Request[v1alpha1.DeleteIDPRequest]) (*connect_go.Response[v1alpha1.DeleteIDPResponse], error)
	CreatePolicy(context.Context, *connect_go.Request[v1alpha1.CreatePolicyRequest]) (*connect_go.Response[v1alpha1.CreatePolicyResponse], error)
	ReadPolicy(context.Context, *connect_go.Request[v1alpha1.ReadPolicyRequest]) (*connect_go.Response[v1alpha1.ReadPolicyResponse], error)
	UpdatePolicy(context.Context, *connect_go.Request[v1alpha1.UpdatePolicyRequest]) (*connect_go.Response[v1alpha1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect_go.Request[v1alpha1.DeletePolicyRequest]) (*connect_go.Response[v1alpha1.DeletePolicyResponse], error)
	CreateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.CreateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateGCPOrganizationResponse], error)
	ReadGCPOrganization(context.Context, *connect_go.Request[v1alpha1.ReadGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.ReadGCPOrganizationResponse], error)
	UpdateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.UpdateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.UpdateGCPOrganizationResponse], error)
	DeleteGCPOrganization(context.Context, *connect_go.Request[v1alpha1.DeleteGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteGCPOrganizationResponse], error)
	CreateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.CreateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateApprovalWorkflowResponse], error)
	ReadApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.ReadApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.ReadApprovalWorkflowResponse], error)
	UpdateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.UpdateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateApprovalWorkflowResponse], error)
	DeleteApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.DeleteApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteApprovalWorkflowResponse], error)
	CreatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.CreatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.CreatePermissionMappingResponse], error)
	ReadPermissionMapping(context.Context, *connect_go.Request[v1alpha1.ReadPermissionMappingRequest]) (*connect_go.Response[v1alpha1.ReadPermissionMappingResponse], error)
	UpdatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.UpdatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.UpdatePermissionMappingResponse], error)
	DeletePermissionMapping(context.Context, *connect_go.Request[v1alpha1.DeletePermissionMappingRequest]) (*connect_go.Response[v1alpha1.DeletePermissionMappingResponse], error)
	CreateSchedule(context.Context, *connect_go.Request[v1alpha1.CreateScheduleRequest]) (*connect_go.Response[v1alpha1.CreateScheduleResponse], error)
	ReadSchedule(context.Context, *connect_go.Request[v1alpha1.ReadScheduleRequest]) (*connect_go.Response[v1alpha1.ReadScheduleResponse], error)
	UpdateSchedule(context.Context, *connect_go.Request[v1alpha1.UpdateScheduleRequest]) (*connect_go.Response[v1alpha1.UpdateScheduleResponse], error)
	DeleteSchedule(context.Context, *connect_go.Request[v1alpha1.DeleteScheduleRequest]) (*connect_go.Response[v1alpha1.DeleteScheduleResponse], error)
	ReadPagerDutySchedules(context.Context, *connect_go.Request[v1alpha1.ReadPagerDutySchedulesRequest]) (*connect_go.Response[v1alpha1.ReadPagerDutySchedulesResponse], error)
}

// NewConfigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigServiceHandler(svc ConfigServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	configServiceCreateIDPHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreateIDPProcedure,
		svc.CreateIDP,
		opts...,
	)
	configServiceReadIDPHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadIDPProcedure,
		svc.ReadIDP,
		opts...,
	)
	configServiceUpdateIDPHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdateIDPProcedure,
		svc.UpdateIDP,
		opts...,
	)
	configServiceDeleteIDPHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeleteIDPProcedure,
		svc.DeleteIDP,
		opts...,
	)
	configServiceCreatePolicyHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreatePolicyProcedure,
		svc.CreatePolicy,
		opts...,
	)
	configServiceReadPolicyHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadPolicyProcedure,
		svc.ReadPolicy,
		opts...,
	)
	configServiceUpdatePolicyHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdatePolicyProcedure,
		svc.UpdatePolicy,
		opts...,
	)
	configServiceDeletePolicyHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeletePolicyProcedure,
		svc.DeletePolicy,
		opts...,
	)
	configServiceCreateGCPOrganizationHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreateGCPOrganizationProcedure,
		svc.CreateGCPOrganization,
		opts...,
	)
	configServiceReadGCPOrganizationHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadGCPOrganizationProcedure,
		svc.ReadGCPOrganization,
		opts...,
	)
	configServiceUpdateGCPOrganizationHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdateGCPOrganizationProcedure,
		svc.UpdateGCPOrganization,
		opts...,
	)
	configServiceDeleteGCPOrganizationHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeleteGCPOrganizationProcedure,
		svc.DeleteGCPOrganization,
		opts...,
	)
	configServiceCreateApprovalWorkflowHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreateApprovalWorkflowProcedure,
		svc.CreateApprovalWorkflow,
		opts...,
	)
	configServiceReadApprovalWorkflowHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadApprovalWorkflowProcedure,
		svc.ReadApprovalWorkflow,
		opts...,
	)
	configServiceUpdateApprovalWorkflowHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdateApprovalWorkflowProcedure,
		svc.UpdateApprovalWorkflow,
		opts...,
	)
	configServiceDeleteApprovalWorkflowHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeleteApprovalWorkflowProcedure,
		svc.DeleteApprovalWorkflow,
		opts...,
	)
	configServiceCreatePermissionMappingHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreatePermissionMappingProcedure,
		svc.CreatePermissionMapping,
		opts...,
	)
	configServiceReadPermissionMappingHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadPermissionMappingProcedure,
		svc.ReadPermissionMapping,
		opts...,
	)
	configServiceUpdatePermissionMappingHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdatePermissionMappingProcedure,
		svc.UpdatePermissionMapping,
		opts...,
	)
	configServiceDeletePermissionMappingHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeletePermissionMappingProcedure,
		svc.DeletePermissionMapping,
		opts...,
	)
	configServiceCreateScheduleHandler := connect_go.NewUnaryHandler(
		ConfigServiceCreateScheduleProcedure,
		svc.CreateSchedule,
		opts...,
	)
	configServiceReadScheduleHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadScheduleProcedure,
		svc.ReadSchedule,
		opts...,
	)
	configServiceUpdateScheduleHandler := connect_go.NewUnaryHandler(
		ConfigServiceUpdateScheduleProcedure,
		svc.UpdateSchedule,
		opts...,
	)
	configServiceDeleteScheduleHandler := connect_go.NewUnaryHandler(
		ConfigServiceDeleteScheduleProcedure,
		svc.DeleteSchedule,
		opts...,
	)
	configServiceReadPagerDutySchedulesHandler := connect_go.NewUnaryHandler(
		ConfigServiceReadPagerDutySchedulesProcedure,
		svc.ReadPagerDutySchedules,
		opts...,
	)
	return "/commonfate.control.config.v1alpha1.ConfigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigServiceCreateIDPProcedure:
			configServiceCreateIDPHandler.ServeHTTP(w, r)
		case ConfigServiceReadIDPProcedure:
			configServiceReadIDPHandler.ServeHTTP(w, r)
		case ConfigServiceUpdateIDPProcedure:
			configServiceUpdateIDPHandler.ServeHTTP(w, r)
		case ConfigServiceDeleteIDPProcedure:
			configServiceDeleteIDPHandler.ServeHTTP(w, r)
		case ConfigServiceCreatePolicyProcedure:
			configServiceCreatePolicyHandler.ServeHTTP(w, r)
		case ConfigServiceReadPolicyProcedure:
			configServiceReadPolicyHandler.ServeHTTP(w, r)
		case ConfigServiceUpdatePolicyProcedure:
			configServiceUpdatePolicyHandler.ServeHTTP(w, r)
		case ConfigServiceDeletePolicyProcedure:
			configServiceDeletePolicyHandler.ServeHTTP(w, r)
		case ConfigServiceCreateGCPOrganizationProcedure:
			configServiceCreateGCPOrganizationHandler.ServeHTTP(w, r)
		case ConfigServiceReadGCPOrganizationProcedure:
			configServiceReadGCPOrganizationHandler.ServeHTTP(w, r)
		case ConfigServiceUpdateGCPOrganizationProcedure:
			configServiceUpdateGCPOrganizationHandler.ServeHTTP(w, r)
		case ConfigServiceDeleteGCPOrganizationProcedure:
			configServiceDeleteGCPOrganizationHandler.ServeHTTP(w, r)
		case ConfigServiceCreateApprovalWorkflowProcedure:
			configServiceCreateApprovalWorkflowHandler.ServeHTTP(w, r)
		case ConfigServiceReadApprovalWorkflowProcedure:
			configServiceReadApprovalWorkflowHandler.ServeHTTP(w, r)
		case ConfigServiceUpdateApprovalWorkflowProcedure:
			configServiceUpdateApprovalWorkflowHandler.ServeHTTP(w, r)
		case ConfigServiceDeleteApprovalWorkflowProcedure:
			configServiceDeleteApprovalWorkflowHandler.ServeHTTP(w, r)
		case ConfigServiceCreatePermissionMappingProcedure:
			configServiceCreatePermissionMappingHandler.ServeHTTP(w, r)
		case ConfigServiceReadPermissionMappingProcedure:
			configServiceReadPermissionMappingHandler.ServeHTTP(w, r)
		case ConfigServiceUpdatePermissionMappingProcedure:
			configServiceUpdatePermissionMappingHandler.ServeHTTP(w, r)
		case ConfigServiceDeletePermissionMappingProcedure:
			configServiceDeletePermissionMappingHandler.ServeHTTP(w, r)
		case ConfigServiceCreateScheduleProcedure:
			configServiceCreateScheduleHandler.ServeHTTP(w, r)
		case ConfigServiceReadScheduleProcedure:
			configServiceReadScheduleHandler.ServeHTTP(w, r)
		case ConfigServiceUpdateScheduleProcedure:
			configServiceUpdateScheduleHandler.ServeHTTP(w, r)
		case ConfigServiceDeleteScheduleProcedure:
			configServiceDeleteScheduleHandler.ServeHTTP(w, r)
		case ConfigServiceReadPagerDutySchedulesProcedure:
			configServiceReadPagerDutySchedulesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigServiceHandler struct{}

func (UnimplementedConfigServiceHandler) CreateIDP(context.Context, *connect_go.Request[v1alpha1.CreateIDPRequest]) (*connect_go.Response[v1alpha1.CreateIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.CreateIDP is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadIDP(context.Context, *connect_go.Request[v1alpha1.ReadIDPRequest]) (*connect_go.Response[v1alpha1.ReadIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.ReadIDP is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdateIDP(context.Context, *connect_go.Request[v1alpha1.UpdateIDPRequest]) (*connect_go.Response[v1alpha1.UpdateIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.UpdateIDP is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeleteIDP(context.Context, *connect_go.Request[v1alpha1.DeleteIDPRequest]) (*connect_go.Response[v1alpha1.DeleteIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.DeleteIDP is not implemented"))
}

func (UnimplementedConfigServiceHandler) CreatePolicy(context.Context, *connect_go.Request[v1alpha1.CreatePolicyRequest]) (*connect_go.Response[v1alpha1.CreatePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.CreatePolicy is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadPolicy(context.Context, *connect_go.Request[v1alpha1.ReadPolicyRequest]) (*connect_go.Response[v1alpha1.ReadPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.ReadPolicy is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdatePolicy(context.Context, *connect_go.Request[v1alpha1.UpdatePolicyRequest]) (*connect_go.Response[v1alpha1.UpdatePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.UpdatePolicy is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeletePolicy(context.Context, *connect_go.Request[v1alpha1.DeletePolicyRequest]) (*connect_go.Response[v1alpha1.DeletePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.DeletePolicy is not implemented"))
}

func (UnimplementedConfigServiceHandler) CreateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.CreateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateGCPOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.CreateGCPOrganization is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadGCPOrganization(context.Context, *connect_go.Request[v1alpha1.ReadGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.ReadGCPOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.ReadGCPOrganization is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.UpdateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.UpdateGCPOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.UpdateGCPOrganization is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeleteGCPOrganization(context.Context, *connect_go.Request[v1alpha1.DeleteGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteGCPOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.DeleteGCPOrganization is not implemented"))
}

func (UnimplementedConfigServiceHandler) CreateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.CreateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateApprovalWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.CreateApprovalWorkflow is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.ReadApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.ReadApprovalWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.ReadApprovalWorkflow is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdateApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.UpdateApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateApprovalWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.UpdateApprovalWorkflow is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeleteApprovalWorkflow(context.Context, *connect_go.Request[v1alpha1.DeleteApprovalWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteApprovalWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.DeleteApprovalWorkflow is not implemented"))
}

func (UnimplementedConfigServiceHandler) CreatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.CreatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.CreatePermissionMappingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.CreatePermissionMapping is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadPermissionMapping(context.Context, *connect_go.Request[v1alpha1.ReadPermissionMappingRequest]) (*connect_go.Response[v1alpha1.ReadPermissionMappingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.ReadPermissionMapping is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdatePermissionMapping(context.Context, *connect_go.Request[v1alpha1.UpdatePermissionMappingRequest]) (*connect_go.Response[v1alpha1.UpdatePermissionMappingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.UpdatePermissionMapping is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeletePermissionMapping(context.Context, *connect_go.Request[v1alpha1.DeletePermissionMappingRequest]) (*connect_go.Response[v1alpha1.DeletePermissionMappingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.DeletePermissionMapping is not implemented"))
}

func (UnimplementedConfigServiceHandler) CreateSchedule(context.Context, *connect_go.Request[v1alpha1.CreateScheduleRequest]) (*connect_go.Response[v1alpha1.CreateScheduleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.CreateSchedule is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadSchedule(context.Context, *connect_go.Request[v1alpha1.ReadScheduleRequest]) (*connect_go.Response[v1alpha1.ReadScheduleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.ReadSchedule is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdateSchedule(context.Context, *connect_go.Request[v1alpha1.UpdateScheduleRequest]) (*connect_go.Response[v1alpha1.UpdateScheduleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.UpdateSchedule is not implemented"))
}

func (UnimplementedConfigServiceHandler) DeleteSchedule(context.Context, *connect_go.Request[v1alpha1.DeleteScheduleRequest]) (*connect_go.Response[v1alpha1.DeleteScheduleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.DeleteSchedule is not implemented"))
}

func (UnimplementedConfigServiceHandler) ReadPagerDutySchedules(context.Context, *connect_go.Request[v1alpha1.ReadPagerDutySchedulesRequest]) (*connect_go.Response[v1alpha1.ReadPagerDutySchedulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.ConfigService.ReadPagerDutySchedules is not implemented"))
}
