// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/policy.proto

package configv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PolicyServiceName is the fully-qualified name of the PolicyService service.
	PolicyServiceName = "commonfate.control.config.v1alpha1.PolicyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PolicyServiceCreatePolicyProcedure is the fully-qualified name of the PolicyService's
	// CreatePolicy RPC.
	PolicyServiceCreatePolicyProcedure = "/commonfate.control.config.v1alpha1.PolicyService/CreatePolicy"
	// PolicyServiceReadPolicyProcedure is the fully-qualified name of the PolicyService's ReadPolicy
	// RPC.
	PolicyServiceReadPolicyProcedure = "/commonfate.control.config.v1alpha1.PolicyService/ReadPolicy"
	// PolicyServiceUpdatePolicyProcedure is the fully-qualified name of the PolicyService's
	// UpdatePolicy RPC.
	PolicyServiceUpdatePolicyProcedure = "/commonfate.control.config.v1alpha1.PolicyService/UpdatePolicy"
	// PolicyServiceDeletePolicyProcedure is the fully-qualified name of the PolicyService's
	// DeletePolicy RPC.
	PolicyServiceDeletePolicyProcedure = "/commonfate.control.config.v1alpha1.PolicyService/DeletePolicy"
)

// PolicyServiceClient is a client for the commonfate.control.config.v1alpha1.PolicyService service.
type PolicyServiceClient interface {
	CreatePolicy(context.Context, *connect_go.Request[v1alpha1.CreatePolicyRequest]) (*connect_go.Response[v1alpha1.CreatePolicyResponse], error)
	ReadPolicy(context.Context, *connect_go.Request[v1alpha1.ReadPolicyRequest]) (*connect_go.Response[v1alpha1.ReadPolicyResponse], error)
	UpdatePolicy(context.Context, *connect_go.Request[v1alpha1.UpdatePolicyRequest]) (*connect_go.Response[v1alpha1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect_go.Request[v1alpha1.DeletePolicyRequest]) (*connect_go.Response[v1alpha1.DeletePolicyResponse], error)
}

// NewPolicyServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.PolicyService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPolicyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PolicyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &policyServiceClient{
		createPolicy: connect_go.NewClient[v1alpha1.CreatePolicyRequest, v1alpha1.CreatePolicyResponse](
			httpClient,
			baseURL+PolicyServiceCreatePolicyProcedure,
			opts...,
		),
		readPolicy: connect_go.NewClient[v1alpha1.ReadPolicyRequest, v1alpha1.ReadPolicyResponse](
			httpClient,
			baseURL+PolicyServiceReadPolicyProcedure,
			opts...,
		),
		updatePolicy: connect_go.NewClient[v1alpha1.UpdatePolicyRequest, v1alpha1.UpdatePolicyResponse](
			httpClient,
			baseURL+PolicyServiceUpdatePolicyProcedure,
			opts...,
		),
		deletePolicy: connect_go.NewClient[v1alpha1.DeletePolicyRequest, v1alpha1.DeletePolicyResponse](
			httpClient,
			baseURL+PolicyServiceDeletePolicyProcedure,
			opts...,
		),
	}
}

// policyServiceClient implements PolicyServiceClient.
type policyServiceClient struct {
	createPolicy *connect_go.Client[v1alpha1.CreatePolicyRequest, v1alpha1.CreatePolicyResponse]
	readPolicy   *connect_go.Client[v1alpha1.ReadPolicyRequest, v1alpha1.ReadPolicyResponse]
	updatePolicy *connect_go.Client[v1alpha1.UpdatePolicyRequest, v1alpha1.UpdatePolicyResponse]
	deletePolicy *connect_go.Client[v1alpha1.DeletePolicyRequest, v1alpha1.DeletePolicyResponse]
}

// CreatePolicy calls commonfate.control.config.v1alpha1.PolicyService.CreatePolicy.
func (c *policyServiceClient) CreatePolicy(ctx context.Context, req *connect_go.Request[v1alpha1.CreatePolicyRequest]) (*connect_go.Response[v1alpha1.CreatePolicyResponse], error) {
	return c.createPolicy.CallUnary(ctx, req)
}

// ReadPolicy calls commonfate.control.config.v1alpha1.PolicyService.ReadPolicy.
func (c *policyServiceClient) ReadPolicy(ctx context.Context, req *connect_go.Request[v1alpha1.ReadPolicyRequest]) (*connect_go.Response[v1alpha1.ReadPolicyResponse], error) {
	return c.readPolicy.CallUnary(ctx, req)
}

// UpdatePolicy calls commonfate.control.config.v1alpha1.PolicyService.UpdatePolicy.
func (c *policyServiceClient) UpdatePolicy(ctx context.Context, req *connect_go.Request[v1alpha1.UpdatePolicyRequest]) (*connect_go.Response[v1alpha1.UpdatePolicyResponse], error) {
	return c.updatePolicy.CallUnary(ctx, req)
}

// DeletePolicy calls commonfate.control.config.v1alpha1.PolicyService.DeletePolicy.
func (c *policyServiceClient) DeletePolicy(ctx context.Context, req *connect_go.Request[v1alpha1.DeletePolicyRequest]) (*connect_go.Response[v1alpha1.DeletePolicyResponse], error) {
	return c.deletePolicy.CallUnary(ctx, req)
}

// PolicyServiceHandler is an implementation of the commonfate.control.config.v1alpha1.PolicyService
// service.
type PolicyServiceHandler interface {
	CreatePolicy(context.Context, *connect_go.Request[v1alpha1.CreatePolicyRequest]) (*connect_go.Response[v1alpha1.CreatePolicyResponse], error)
	ReadPolicy(context.Context, *connect_go.Request[v1alpha1.ReadPolicyRequest]) (*connect_go.Response[v1alpha1.ReadPolicyResponse], error)
	UpdatePolicy(context.Context, *connect_go.Request[v1alpha1.UpdatePolicyRequest]) (*connect_go.Response[v1alpha1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect_go.Request[v1alpha1.DeletePolicyRequest]) (*connect_go.Response[v1alpha1.DeletePolicyResponse], error)
}

// NewPolicyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPolicyServiceHandler(svc PolicyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	policyServiceCreatePolicyHandler := connect_go.NewUnaryHandler(
		PolicyServiceCreatePolicyProcedure,
		svc.CreatePolicy,
		opts...,
	)
	policyServiceReadPolicyHandler := connect_go.NewUnaryHandler(
		PolicyServiceReadPolicyProcedure,
		svc.ReadPolicy,
		opts...,
	)
	policyServiceUpdatePolicyHandler := connect_go.NewUnaryHandler(
		PolicyServiceUpdatePolicyProcedure,
		svc.UpdatePolicy,
		opts...,
	)
	policyServiceDeletePolicyHandler := connect_go.NewUnaryHandler(
		PolicyServiceDeletePolicyProcedure,
		svc.DeletePolicy,
		opts...,
	)
	return "/commonfate.control.config.v1alpha1.PolicyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PolicyServiceCreatePolicyProcedure:
			policyServiceCreatePolicyHandler.ServeHTTP(w, r)
		case PolicyServiceReadPolicyProcedure:
			policyServiceReadPolicyHandler.ServeHTTP(w, r)
		case PolicyServiceUpdatePolicyProcedure:
			policyServiceUpdatePolicyHandler.ServeHTTP(w, r)
		case PolicyServiceDeletePolicyProcedure:
			policyServiceDeletePolicyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPolicyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPolicyServiceHandler struct{}

func (UnimplementedPolicyServiceHandler) CreatePolicy(context.Context, *connect_go.Request[v1alpha1.CreatePolicyRequest]) (*connect_go.Response[v1alpha1.CreatePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.PolicyService.CreatePolicy is not implemented"))
}

func (UnimplementedPolicyServiceHandler) ReadPolicy(context.Context, *connect_go.Request[v1alpha1.ReadPolicyRequest]) (*connect_go.Response[v1alpha1.ReadPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.PolicyService.ReadPolicy is not implemented"))
}

func (UnimplementedPolicyServiceHandler) UpdatePolicy(context.Context, *connect_go.Request[v1alpha1.UpdatePolicyRequest]) (*connect_go.Response[v1alpha1.UpdatePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.PolicyService.UpdatePolicy is not implemented"))
}

func (UnimplementedPolicyServiceHandler) DeletePolicy(context.Context, *connect_go.Request[v1alpha1.DeletePolicyRequest]) (*connect_go.Response[v1alpha1.DeletePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.PolicyService.DeletePolicy is not implemented"))
}
