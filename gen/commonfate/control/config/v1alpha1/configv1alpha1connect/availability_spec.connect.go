// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/availability_spec.proto

package configv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AvailabilitySpecServiceName is the fully-qualified name of the AvailabilitySpecService service.
	AvailabilitySpecServiceName = "commonfate.control.config.v1alpha1.AvailabilitySpecService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AvailabilitySpecServiceCreateAvailabilitySpecProcedure is the fully-qualified name of the
	// AvailabilitySpecService's CreateAvailabilitySpec RPC.
	AvailabilitySpecServiceCreateAvailabilitySpecProcedure = "/commonfate.control.config.v1alpha1.AvailabilitySpecService/CreateAvailabilitySpec"
	// AvailabilitySpecServiceGetAvailabilitySpecProcedure is the fully-qualified name of the
	// AvailabilitySpecService's GetAvailabilitySpec RPC.
	AvailabilitySpecServiceGetAvailabilitySpecProcedure = "/commonfate.control.config.v1alpha1.AvailabilitySpecService/GetAvailabilitySpec"
	// AvailabilitySpecServiceUpdateAvailabilitySpecProcedure is the fully-qualified name of the
	// AvailabilitySpecService's UpdateAvailabilitySpec RPC.
	AvailabilitySpecServiceUpdateAvailabilitySpecProcedure = "/commonfate.control.config.v1alpha1.AvailabilitySpecService/UpdateAvailabilitySpec"
	// AvailabilitySpecServiceDeleteAvailabilitySpecProcedure is the fully-qualified name of the
	// AvailabilitySpecService's DeleteAvailabilitySpec RPC.
	AvailabilitySpecServiceDeleteAvailabilitySpecProcedure = "/commonfate.control.config.v1alpha1.AvailabilitySpecService/DeleteAvailabilitySpec"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	availabilitySpecServiceServiceDescriptor                      = v1alpha1.File_commonfate_control_config_v1alpha1_availability_spec_proto.Services().ByName("AvailabilitySpecService")
	availabilitySpecServiceCreateAvailabilitySpecMethodDescriptor = availabilitySpecServiceServiceDescriptor.Methods().ByName("CreateAvailabilitySpec")
	availabilitySpecServiceGetAvailabilitySpecMethodDescriptor    = availabilitySpecServiceServiceDescriptor.Methods().ByName("GetAvailabilitySpec")
	availabilitySpecServiceUpdateAvailabilitySpecMethodDescriptor = availabilitySpecServiceServiceDescriptor.Methods().ByName("UpdateAvailabilitySpec")
	availabilitySpecServiceDeleteAvailabilitySpecMethodDescriptor = availabilitySpecServiceServiceDescriptor.Methods().ByName("DeleteAvailabilitySpec")
)

// AvailabilitySpecServiceClient is a client for the
// commonfate.control.config.v1alpha1.AvailabilitySpecService service.
type AvailabilitySpecServiceClient interface {
	CreateAvailabilitySpec(context.Context, *connect.Request[v1alpha1.CreateAvailabilitySpecRequest]) (*connect.Response[v1alpha1.CreateAvailabilitySpecResponse], error)
	GetAvailabilitySpec(context.Context, *connect.Request[v1alpha1.GetAvailabilitySpecRequest]) (*connect.Response[v1alpha1.GetAvailabilitySpecResponse], error)
	UpdateAvailabilitySpec(context.Context, *connect.Request[v1alpha1.UpdateAvailabilitySpecRequest]) (*connect.Response[v1alpha1.UpdateAvailabilitySpecResponse], error)
	DeleteAvailabilitySpec(context.Context, *connect.Request[v1alpha1.DeleteAvailabilitySpecRequest]) (*connect.Response[v1alpha1.DeleteAvailabilitySpecResponse], error)
}

// NewAvailabilitySpecServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.AvailabilitySpecService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAvailabilitySpecServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AvailabilitySpecServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &availabilitySpecServiceClient{
		createAvailabilitySpec: connect.NewClient[v1alpha1.CreateAvailabilitySpecRequest, v1alpha1.CreateAvailabilitySpecResponse](
			httpClient,
			baseURL+AvailabilitySpecServiceCreateAvailabilitySpecProcedure,
			connect.WithSchema(availabilitySpecServiceCreateAvailabilitySpecMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAvailabilitySpec: connect.NewClient[v1alpha1.GetAvailabilitySpecRequest, v1alpha1.GetAvailabilitySpecResponse](
			httpClient,
			baseURL+AvailabilitySpecServiceGetAvailabilitySpecProcedure,
			connect.WithSchema(availabilitySpecServiceGetAvailabilitySpecMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAvailabilitySpec: connect.NewClient[v1alpha1.UpdateAvailabilitySpecRequest, v1alpha1.UpdateAvailabilitySpecResponse](
			httpClient,
			baseURL+AvailabilitySpecServiceUpdateAvailabilitySpecProcedure,
			connect.WithSchema(availabilitySpecServiceUpdateAvailabilitySpecMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAvailabilitySpec: connect.NewClient[v1alpha1.DeleteAvailabilitySpecRequest, v1alpha1.DeleteAvailabilitySpecResponse](
			httpClient,
			baseURL+AvailabilitySpecServiceDeleteAvailabilitySpecProcedure,
			connect.WithSchema(availabilitySpecServiceDeleteAvailabilitySpecMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// availabilitySpecServiceClient implements AvailabilitySpecServiceClient.
type availabilitySpecServiceClient struct {
	createAvailabilitySpec *connect.Client[v1alpha1.CreateAvailabilitySpecRequest, v1alpha1.CreateAvailabilitySpecResponse]
	getAvailabilitySpec    *connect.Client[v1alpha1.GetAvailabilitySpecRequest, v1alpha1.GetAvailabilitySpecResponse]
	updateAvailabilitySpec *connect.Client[v1alpha1.UpdateAvailabilitySpecRequest, v1alpha1.UpdateAvailabilitySpecResponse]
	deleteAvailabilitySpec *connect.Client[v1alpha1.DeleteAvailabilitySpecRequest, v1alpha1.DeleteAvailabilitySpecResponse]
}

// CreateAvailabilitySpec calls
// commonfate.control.config.v1alpha1.AvailabilitySpecService.CreateAvailabilitySpec.
func (c *availabilitySpecServiceClient) CreateAvailabilitySpec(ctx context.Context, req *connect.Request[v1alpha1.CreateAvailabilitySpecRequest]) (*connect.Response[v1alpha1.CreateAvailabilitySpecResponse], error) {
	return c.createAvailabilitySpec.CallUnary(ctx, req)
}

// GetAvailabilitySpec calls
// commonfate.control.config.v1alpha1.AvailabilitySpecService.GetAvailabilitySpec.
func (c *availabilitySpecServiceClient) GetAvailabilitySpec(ctx context.Context, req *connect.Request[v1alpha1.GetAvailabilitySpecRequest]) (*connect.Response[v1alpha1.GetAvailabilitySpecResponse], error) {
	return c.getAvailabilitySpec.CallUnary(ctx, req)
}

// UpdateAvailabilitySpec calls
// commonfate.control.config.v1alpha1.AvailabilitySpecService.UpdateAvailabilitySpec.
func (c *availabilitySpecServiceClient) UpdateAvailabilitySpec(ctx context.Context, req *connect.Request[v1alpha1.UpdateAvailabilitySpecRequest]) (*connect.Response[v1alpha1.UpdateAvailabilitySpecResponse], error) {
	return c.updateAvailabilitySpec.CallUnary(ctx, req)
}

// DeleteAvailabilitySpec calls
// commonfate.control.config.v1alpha1.AvailabilitySpecService.DeleteAvailabilitySpec.
func (c *availabilitySpecServiceClient) DeleteAvailabilitySpec(ctx context.Context, req *connect.Request[v1alpha1.DeleteAvailabilitySpecRequest]) (*connect.Response[v1alpha1.DeleteAvailabilitySpecResponse], error) {
	return c.deleteAvailabilitySpec.CallUnary(ctx, req)
}

// AvailabilitySpecServiceHandler is an implementation of the
// commonfate.control.config.v1alpha1.AvailabilitySpecService service.
type AvailabilitySpecServiceHandler interface {
	CreateAvailabilitySpec(context.Context, *connect.Request[v1alpha1.CreateAvailabilitySpecRequest]) (*connect.Response[v1alpha1.CreateAvailabilitySpecResponse], error)
	GetAvailabilitySpec(context.Context, *connect.Request[v1alpha1.GetAvailabilitySpecRequest]) (*connect.Response[v1alpha1.GetAvailabilitySpecResponse], error)
	UpdateAvailabilitySpec(context.Context, *connect.Request[v1alpha1.UpdateAvailabilitySpecRequest]) (*connect.Response[v1alpha1.UpdateAvailabilitySpecResponse], error)
	DeleteAvailabilitySpec(context.Context, *connect.Request[v1alpha1.DeleteAvailabilitySpecRequest]) (*connect.Response[v1alpha1.DeleteAvailabilitySpecResponse], error)
}

// NewAvailabilitySpecServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAvailabilitySpecServiceHandler(svc AvailabilitySpecServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	availabilitySpecServiceCreateAvailabilitySpecHandler := connect.NewUnaryHandler(
		AvailabilitySpecServiceCreateAvailabilitySpecProcedure,
		svc.CreateAvailabilitySpec,
		connect.WithSchema(availabilitySpecServiceCreateAvailabilitySpecMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	availabilitySpecServiceGetAvailabilitySpecHandler := connect.NewUnaryHandler(
		AvailabilitySpecServiceGetAvailabilitySpecProcedure,
		svc.GetAvailabilitySpec,
		connect.WithSchema(availabilitySpecServiceGetAvailabilitySpecMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	availabilitySpecServiceUpdateAvailabilitySpecHandler := connect.NewUnaryHandler(
		AvailabilitySpecServiceUpdateAvailabilitySpecProcedure,
		svc.UpdateAvailabilitySpec,
		connect.WithSchema(availabilitySpecServiceUpdateAvailabilitySpecMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	availabilitySpecServiceDeleteAvailabilitySpecHandler := connect.NewUnaryHandler(
		AvailabilitySpecServiceDeleteAvailabilitySpecProcedure,
		svc.DeleteAvailabilitySpec,
		connect.WithSchema(availabilitySpecServiceDeleteAvailabilitySpecMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.config.v1alpha1.AvailabilitySpecService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AvailabilitySpecServiceCreateAvailabilitySpecProcedure:
			availabilitySpecServiceCreateAvailabilitySpecHandler.ServeHTTP(w, r)
		case AvailabilitySpecServiceGetAvailabilitySpecProcedure:
			availabilitySpecServiceGetAvailabilitySpecHandler.ServeHTTP(w, r)
		case AvailabilitySpecServiceUpdateAvailabilitySpecProcedure:
			availabilitySpecServiceUpdateAvailabilitySpecHandler.ServeHTTP(w, r)
		case AvailabilitySpecServiceDeleteAvailabilitySpecProcedure:
			availabilitySpecServiceDeleteAvailabilitySpecHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAvailabilitySpecServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAvailabilitySpecServiceHandler struct{}

func (UnimplementedAvailabilitySpecServiceHandler) CreateAvailabilitySpec(context.Context, *connect.Request[v1alpha1.CreateAvailabilitySpecRequest]) (*connect.Response[v1alpha1.CreateAvailabilitySpecResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AvailabilitySpecService.CreateAvailabilitySpec is not implemented"))
}

func (UnimplementedAvailabilitySpecServiceHandler) GetAvailabilitySpec(context.Context, *connect.Request[v1alpha1.GetAvailabilitySpecRequest]) (*connect.Response[v1alpha1.GetAvailabilitySpecResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AvailabilitySpecService.GetAvailabilitySpec is not implemented"))
}

func (UnimplementedAvailabilitySpecServiceHandler) UpdateAvailabilitySpec(context.Context, *connect.Request[v1alpha1.UpdateAvailabilitySpecRequest]) (*connect.Response[v1alpha1.UpdateAvailabilitySpecResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AvailabilitySpecService.UpdateAvailabilitySpec is not implemented"))
}

func (UnimplementedAvailabilitySpecServiceHandler) DeleteAvailabilitySpec(context.Context, *connect.Request[v1alpha1.DeleteAvailabilitySpecRequest]) (*connect.Response[v1alpha1.DeleteAvailabilitySpecResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AvailabilitySpecService.DeleteAvailabilitySpec is not implemented"))
}
