// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/aws_rds_database.proto

package configv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AWSRDSDatabaseServiceName is the fully-qualified name of the AWSRDSDatabaseService service.
	AWSRDSDatabaseServiceName = "commonfate.control.config.v1alpha1.AWSRDSDatabaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AWSRDSDatabaseServiceCreateAWSRDSDatabaseProcedure is the fully-qualified name of the
	// AWSRDSDatabaseService's CreateAWSRDSDatabase RPC.
	AWSRDSDatabaseServiceCreateAWSRDSDatabaseProcedure = "/commonfate.control.config.v1alpha1.AWSRDSDatabaseService/CreateAWSRDSDatabase"
	// AWSRDSDatabaseServiceGetAWSRDSDatabaseProcedure is the fully-qualified name of the
	// AWSRDSDatabaseService's GetAWSRDSDatabase RPC.
	AWSRDSDatabaseServiceGetAWSRDSDatabaseProcedure = "/commonfate.control.config.v1alpha1.AWSRDSDatabaseService/GetAWSRDSDatabase"
	// AWSRDSDatabaseServiceUpdateAWSRDSDatabaseProcedure is the fully-qualified name of the
	// AWSRDSDatabaseService's UpdateAWSRDSDatabase RPC.
	AWSRDSDatabaseServiceUpdateAWSRDSDatabaseProcedure = "/commonfate.control.config.v1alpha1.AWSRDSDatabaseService/UpdateAWSRDSDatabase"
	// AWSRDSDatabaseServiceDeleteAWSRDSDatabaseProcedure is the fully-qualified name of the
	// AWSRDSDatabaseService's DeleteAWSRDSDatabase RPC.
	AWSRDSDatabaseServiceDeleteAWSRDSDatabaseProcedure = "/commonfate.control.config.v1alpha1.AWSRDSDatabaseService/DeleteAWSRDSDatabase"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aWSRDSDatabaseServiceServiceDescriptor                    = v1alpha1.File_commonfate_control_config_v1alpha1_aws_rds_database_proto.Services().ByName("AWSRDSDatabaseService")
	aWSRDSDatabaseServiceCreateAWSRDSDatabaseMethodDescriptor = aWSRDSDatabaseServiceServiceDescriptor.Methods().ByName("CreateAWSRDSDatabase")
	aWSRDSDatabaseServiceGetAWSRDSDatabaseMethodDescriptor    = aWSRDSDatabaseServiceServiceDescriptor.Methods().ByName("GetAWSRDSDatabase")
	aWSRDSDatabaseServiceUpdateAWSRDSDatabaseMethodDescriptor = aWSRDSDatabaseServiceServiceDescriptor.Methods().ByName("UpdateAWSRDSDatabase")
	aWSRDSDatabaseServiceDeleteAWSRDSDatabaseMethodDescriptor = aWSRDSDatabaseServiceServiceDescriptor.Methods().ByName("DeleteAWSRDSDatabase")
)

// AWSRDSDatabaseServiceClient is a client for the
// commonfate.control.config.v1alpha1.AWSRDSDatabaseService service.
type AWSRDSDatabaseServiceClient interface {
	CreateAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.CreateAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.CreateAWSRDSDatabaseResponse], error)
	GetAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.GetAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.GetAWSRDSDatabaseResponse], error)
	UpdateAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.UpdateAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.UpdateAWSRDSDatabaseResponse], error)
	DeleteAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.DeleteAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.DeleteAWSRDSDatabaseResponse], error)
}

// NewAWSRDSDatabaseServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.AWSRDSDatabaseService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAWSRDSDatabaseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AWSRDSDatabaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aWSRDSDatabaseServiceClient{
		createAWSRDSDatabase: connect.NewClient[v1alpha1.CreateAWSRDSDatabaseRequest, v1alpha1.CreateAWSRDSDatabaseResponse](
			httpClient,
			baseURL+AWSRDSDatabaseServiceCreateAWSRDSDatabaseProcedure,
			connect.WithSchema(aWSRDSDatabaseServiceCreateAWSRDSDatabaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAWSRDSDatabase: connect.NewClient[v1alpha1.GetAWSRDSDatabaseRequest, v1alpha1.GetAWSRDSDatabaseResponse](
			httpClient,
			baseURL+AWSRDSDatabaseServiceGetAWSRDSDatabaseProcedure,
			connect.WithSchema(aWSRDSDatabaseServiceGetAWSRDSDatabaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAWSRDSDatabase: connect.NewClient[v1alpha1.UpdateAWSRDSDatabaseRequest, v1alpha1.UpdateAWSRDSDatabaseResponse](
			httpClient,
			baseURL+AWSRDSDatabaseServiceUpdateAWSRDSDatabaseProcedure,
			connect.WithSchema(aWSRDSDatabaseServiceUpdateAWSRDSDatabaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAWSRDSDatabase: connect.NewClient[v1alpha1.DeleteAWSRDSDatabaseRequest, v1alpha1.DeleteAWSRDSDatabaseResponse](
			httpClient,
			baseURL+AWSRDSDatabaseServiceDeleteAWSRDSDatabaseProcedure,
			connect.WithSchema(aWSRDSDatabaseServiceDeleteAWSRDSDatabaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aWSRDSDatabaseServiceClient implements AWSRDSDatabaseServiceClient.
type aWSRDSDatabaseServiceClient struct {
	createAWSRDSDatabase *connect.Client[v1alpha1.CreateAWSRDSDatabaseRequest, v1alpha1.CreateAWSRDSDatabaseResponse]
	getAWSRDSDatabase    *connect.Client[v1alpha1.GetAWSRDSDatabaseRequest, v1alpha1.GetAWSRDSDatabaseResponse]
	updateAWSRDSDatabase *connect.Client[v1alpha1.UpdateAWSRDSDatabaseRequest, v1alpha1.UpdateAWSRDSDatabaseResponse]
	deleteAWSRDSDatabase *connect.Client[v1alpha1.DeleteAWSRDSDatabaseRequest, v1alpha1.DeleteAWSRDSDatabaseResponse]
}

// CreateAWSRDSDatabase calls
// commonfate.control.config.v1alpha1.AWSRDSDatabaseService.CreateAWSRDSDatabase.
func (c *aWSRDSDatabaseServiceClient) CreateAWSRDSDatabase(ctx context.Context, req *connect.Request[v1alpha1.CreateAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.CreateAWSRDSDatabaseResponse], error) {
	return c.createAWSRDSDatabase.CallUnary(ctx, req)
}

// GetAWSRDSDatabase calls
// commonfate.control.config.v1alpha1.AWSRDSDatabaseService.GetAWSRDSDatabase.
func (c *aWSRDSDatabaseServiceClient) GetAWSRDSDatabase(ctx context.Context, req *connect.Request[v1alpha1.GetAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.GetAWSRDSDatabaseResponse], error) {
	return c.getAWSRDSDatabase.CallUnary(ctx, req)
}

// UpdateAWSRDSDatabase calls
// commonfate.control.config.v1alpha1.AWSRDSDatabaseService.UpdateAWSRDSDatabase.
func (c *aWSRDSDatabaseServiceClient) UpdateAWSRDSDatabase(ctx context.Context, req *connect.Request[v1alpha1.UpdateAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.UpdateAWSRDSDatabaseResponse], error) {
	return c.updateAWSRDSDatabase.CallUnary(ctx, req)
}

// DeleteAWSRDSDatabase calls
// commonfate.control.config.v1alpha1.AWSRDSDatabaseService.DeleteAWSRDSDatabase.
func (c *aWSRDSDatabaseServiceClient) DeleteAWSRDSDatabase(ctx context.Context, req *connect.Request[v1alpha1.DeleteAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.DeleteAWSRDSDatabaseResponse], error) {
	return c.deleteAWSRDSDatabase.CallUnary(ctx, req)
}

// AWSRDSDatabaseServiceHandler is an implementation of the
// commonfate.control.config.v1alpha1.AWSRDSDatabaseService service.
type AWSRDSDatabaseServiceHandler interface {
	CreateAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.CreateAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.CreateAWSRDSDatabaseResponse], error)
	GetAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.GetAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.GetAWSRDSDatabaseResponse], error)
	UpdateAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.UpdateAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.UpdateAWSRDSDatabaseResponse], error)
	DeleteAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.DeleteAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.DeleteAWSRDSDatabaseResponse], error)
}

// NewAWSRDSDatabaseServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAWSRDSDatabaseServiceHandler(svc AWSRDSDatabaseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aWSRDSDatabaseServiceCreateAWSRDSDatabaseHandler := connect.NewUnaryHandler(
		AWSRDSDatabaseServiceCreateAWSRDSDatabaseProcedure,
		svc.CreateAWSRDSDatabase,
		connect.WithSchema(aWSRDSDatabaseServiceCreateAWSRDSDatabaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aWSRDSDatabaseServiceGetAWSRDSDatabaseHandler := connect.NewUnaryHandler(
		AWSRDSDatabaseServiceGetAWSRDSDatabaseProcedure,
		svc.GetAWSRDSDatabase,
		connect.WithSchema(aWSRDSDatabaseServiceGetAWSRDSDatabaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aWSRDSDatabaseServiceUpdateAWSRDSDatabaseHandler := connect.NewUnaryHandler(
		AWSRDSDatabaseServiceUpdateAWSRDSDatabaseProcedure,
		svc.UpdateAWSRDSDatabase,
		connect.WithSchema(aWSRDSDatabaseServiceUpdateAWSRDSDatabaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aWSRDSDatabaseServiceDeleteAWSRDSDatabaseHandler := connect.NewUnaryHandler(
		AWSRDSDatabaseServiceDeleteAWSRDSDatabaseProcedure,
		svc.DeleteAWSRDSDatabase,
		connect.WithSchema(aWSRDSDatabaseServiceDeleteAWSRDSDatabaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.config.v1alpha1.AWSRDSDatabaseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AWSRDSDatabaseServiceCreateAWSRDSDatabaseProcedure:
			aWSRDSDatabaseServiceCreateAWSRDSDatabaseHandler.ServeHTTP(w, r)
		case AWSRDSDatabaseServiceGetAWSRDSDatabaseProcedure:
			aWSRDSDatabaseServiceGetAWSRDSDatabaseHandler.ServeHTTP(w, r)
		case AWSRDSDatabaseServiceUpdateAWSRDSDatabaseProcedure:
			aWSRDSDatabaseServiceUpdateAWSRDSDatabaseHandler.ServeHTTP(w, r)
		case AWSRDSDatabaseServiceDeleteAWSRDSDatabaseProcedure:
			aWSRDSDatabaseServiceDeleteAWSRDSDatabaseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAWSRDSDatabaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAWSRDSDatabaseServiceHandler struct{}

func (UnimplementedAWSRDSDatabaseServiceHandler) CreateAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.CreateAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.CreateAWSRDSDatabaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSRDSDatabaseService.CreateAWSRDSDatabase is not implemented"))
}

func (UnimplementedAWSRDSDatabaseServiceHandler) GetAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.GetAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.GetAWSRDSDatabaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSRDSDatabaseService.GetAWSRDSDatabase is not implemented"))
}

func (UnimplementedAWSRDSDatabaseServiceHandler) UpdateAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.UpdateAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.UpdateAWSRDSDatabaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSRDSDatabaseService.UpdateAWSRDSDatabase is not implemented"))
}

func (UnimplementedAWSRDSDatabaseServiceHandler) DeleteAWSRDSDatabase(context.Context, *connect.Request[v1alpha1.DeleteAWSRDSDatabaseRequest]) (*connect.Response[v1alpha1.DeleteAWSRDSDatabaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSRDSDatabaseService.DeleteAWSRDSDatabase is not implemented"))
}
