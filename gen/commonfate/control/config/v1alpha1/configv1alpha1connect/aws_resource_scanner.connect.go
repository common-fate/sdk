// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/aws_resource_scanner.proto

package configv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AWSResourceScannerServiceName is the fully-qualified name of the AWSResourceScannerService
	// service.
	AWSResourceScannerServiceName = "commonfate.control.config.v1alpha1.AWSResourceScannerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AWSResourceScannerServiceCreateAWSResourceScannerProcedure is the fully-qualified name of the
	// AWSResourceScannerService's CreateAWSResourceScanner RPC.
	AWSResourceScannerServiceCreateAWSResourceScannerProcedure = "/commonfate.control.config.v1alpha1.AWSResourceScannerService/CreateAWSResourceScanner"
	// AWSResourceScannerServiceGetAWSResourceScannerProcedure is the fully-qualified name of the
	// AWSResourceScannerService's GetAWSResourceScanner RPC.
	AWSResourceScannerServiceGetAWSResourceScannerProcedure = "/commonfate.control.config.v1alpha1.AWSResourceScannerService/GetAWSResourceScanner"
	// AWSResourceScannerServiceUpdateAWSResourceScannerProcedure is the fully-qualified name of the
	// AWSResourceScannerService's UpdateAWSResourceScanner RPC.
	AWSResourceScannerServiceUpdateAWSResourceScannerProcedure = "/commonfate.control.config.v1alpha1.AWSResourceScannerService/UpdateAWSResourceScanner"
	// AWSResourceScannerServiceDeleteAWSResourceScannerProcedure is the fully-qualified name of the
	// AWSResourceScannerService's DeleteAWSResourceScanner RPC.
	AWSResourceScannerServiceDeleteAWSResourceScannerProcedure = "/commonfate.control.config.v1alpha1.AWSResourceScannerService/DeleteAWSResourceScanner"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aWSResourceScannerServiceServiceDescriptor                        = v1alpha1.File_commonfate_control_config_v1alpha1_aws_resource_scanner_proto.Services().ByName("AWSResourceScannerService")
	aWSResourceScannerServiceCreateAWSResourceScannerMethodDescriptor = aWSResourceScannerServiceServiceDescriptor.Methods().ByName("CreateAWSResourceScanner")
	aWSResourceScannerServiceGetAWSResourceScannerMethodDescriptor    = aWSResourceScannerServiceServiceDescriptor.Methods().ByName("GetAWSResourceScanner")
	aWSResourceScannerServiceUpdateAWSResourceScannerMethodDescriptor = aWSResourceScannerServiceServiceDescriptor.Methods().ByName("UpdateAWSResourceScanner")
	aWSResourceScannerServiceDeleteAWSResourceScannerMethodDescriptor = aWSResourceScannerServiceServiceDescriptor.Methods().ByName("DeleteAWSResourceScanner")
)

// AWSResourceScannerServiceClient is a client for the
// commonfate.control.config.v1alpha1.AWSResourceScannerService service.
type AWSResourceScannerServiceClient interface {
	CreateAWSResourceScanner(context.Context, *connect.Request[v1alpha1.CreateAWSResourceScannerRequest]) (*connect.Response[v1alpha1.CreateAWSResourceScannerResponse], error)
	GetAWSResourceScanner(context.Context, *connect.Request[v1alpha1.GetAWSResourceScannerRequest]) (*connect.Response[v1alpha1.GetAWSResourceScannerResponse], error)
	UpdateAWSResourceScanner(context.Context, *connect.Request[v1alpha1.UpdateAWSResourceScannerRequest]) (*connect.Response[v1alpha1.UpdateAWSResourceScannerResponse], error)
	DeleteAWSResourceScanner(context.Context, *connect.Request[v1alpha1.DeleteAWSResourceScannerRequest]) (*connect.Response[v1alpha1.DeleteAWSResourceScannerResponse], error)
}

// NewAWSResourceScannerServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.AWSResourceScannerService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAWSResourceScannerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AWSResourceScannerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aWSResourceScannerServiceClient{
		createAWSResourceScanner: connect.NewClient[v1alpha1.CreateAWSResourceScannerRequest, v1alpha1.CreateAWSResourceScannerResponse](
			httpClient,
			baseURL+AWSResourceScannerServiceCreateAWSResourceScannerProcedure,
			connect.WithSchema(aWSResourceScannerServiceCreateAWSResourceScannerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAWSResourceScanner: connect.NewClient[v1alpha1.GetAWSResourceScannerRequest, v1alpha1.GetAWSResourceScannerResponse](
			httpClient,
			baseURL+AWSResourceScannerServiceGetAWSResourceScannerProcedure,
			connect.WithSchema(aWSResourceScannerServiceGetAWSResourceScannerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAWSResourceScanner: connect.NewClient[v1alpha1.UpdateAWSResourceScannerRequest, v1alpha1.UpdateAWSResourceScannerResponse](
			httpClient,
			baseURL+AWSResourceScannerServiceUpdateAWSResourceScannerProcedure,
			connect.WithSchema(aWSResourceScannerServiceUpdateAWSResourceScannerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAWSResourceScanner: connect.NewClient[v1alpha1.DeleteAWSResourceScannerRequest, v1alpha1.DeleteAWSResourceScannerResponse](
			httpClient,
			baseURL+AWSResourceScannerServiceDeleteAWSResourceScannerProcedure,
			connect.WithSchema(aWSResourceScannerServiceDeleteAWSResourceScannerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aWSResourceScannerServiceClient implements AWSResourceScannerServiceClient.
type aWSResourceScannerServiceClient struct {
	createAWSResourceScanner *connect.Client[v1alpha1.CreateAWSResourceScannerRequest, v1alpha1.CreateAWSResourceScannerResponse]
	getAWSResourceScanner    *connect.Client[v1alpha1.GetAWSResourceScannerRequest, v1alpha1.GetAWSResourceScannerResponse]
	updateAWSResourceScanner *connect.Client[v1alpha1.UpdateAWSResourceScannerRequest, v1alpha1.UpdateAWSResourceScannerResponse]
	deleteAWSResourceScanner *connect.Client[v1alpha1.DeleteAWSResourceScannerRequest, v1alpha1.DeleteAWSResourceScannerResponse]
}

// CreateAWSResourceScanner calls
// commonfate.control.config.v1alpha1.AWSResourceScannerService.CreateAWSResourceScanner.
func (c *aWSResourceScannerServiceClient) CreateAWSResourceScanner(ctx context.Context, req *connect.Request[v1alpha1.CreateAWSResourceScannerRequest]) (*connect.Response[v1alpha1.CreateAWSResourceScannerResponse], error) {
	return c.createAWSResourceScanner.CallUnary(ctx, req)
}

// GetAWSResourceScanner calls
// commonfate.control.config.v1alpha1.AWSResourceScannerService.GetAWSResourceScanner.
func (c *aWSResourceScannerServiceClient) GetAWSResourceScanner(ctx context.Context, req *connect.Request[v1alpha1.GetAWSResourceScannerRequest]) (*connect.Response[v1alpha1.GetAWSResourceScannerResponse], error) {
	return c.getAWSResourceScanner.CallUnary(ctx, req)
}

// UpdateAWSResourceScanner calls
// commonfate.control.config.v1alpha1.AWSResourceScannerService.UpdateAWSResourceScanner.
func (c *aWSResourceScannerServiceClient) UpdateAWSResourceScanner(ctx context.Context, req *connect.Request[v1alpha1.UpdateAWSResourceScannerRequest]) (*connect.Response[v1alpha1.UpdateAWSResourceScannerResponse], error) {
	return c.updateAWSResourceScanner.CallUnary(ctx, req)
}

// DeleteAWSResourceScanner calls
// commonfate.control.config.v1alpha1.AWSResourceScannerService.DeleteAWSResourceScanner.
func (c *aWSResourceScannerServiceClient) DeleteAWSResourceScanner(ctx context.Context, req *connect.Request[v1alpha1.DeleteAWSResourceScannerRequest]) (*connect.Response[v1alpha1.DeleteAWSResourceScannerResponse], error) {
	return c.deleteAWSResourceScanner.CallUnary(ctx, req)
}

// AWSResourceScannerServiceHandler is an implementation of the
// commonfate.control.config.v1alpha1.AWSResourceScannerService service.
type AWSResourceScannerServiceHandler interface {
	CreateAWSResourceScanner(context.Context, *connect.Request[v1alpha1.CreateAWSResourceScannerRequest]) (*connect.Response[v1alpha1.CreateAWSResourceScannerResponse], error)
	GetAWSResourceScanner(context.Context, *connect.Request[v1alpha1.GetAWSResourceScannerRequest]) (*connect.Response[v1alpha1.GetAWSResourceScannerResponse], error)
	UpdateAWSResourceScanner(context.Context, *connect.Request[v1alpha1.UpdateAWSResourceScannerRequest]) (*connect.Response[v1alpha1.UpdateAWSResourceScannerResponse], error)
	DeleteAWSResourceScanner(context.Context, *connect.Request[v1alpha1.DeleteAWSResourceScannerRequest]) (*connect.Response[v1alpha1.DeleteAWSResourceScannerResponse], error)
}

// NewAWSResourceScannerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAWSResourceScannerServiceHandler(svc AWSResourceScannerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aWSResourceScannerServiceCreateAWSResourceScannerHandler := connect.NewUnaryHandler(
		AWSResourceScannerServiceCreateAWSResourceScannerProcedure,
		svc.CreateAWSResourceScanner,
		connect.WithSchema(aWSResourceScannerServiceCreateAWSResourceScannerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aWSResourceScannerServiceGetAWSResourceScannerHandler := connect.NewUnaryHandler(
		AWSResourceScannerServiceGetAWSResourceScannerProcedure,
		svc.GetAWSResourceScanner,
		connect.WithSchema(aWSResourceScannerServiceGetAWSResourceScannerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aWSResourceScannerServiceUpdateAWSResourceScannerHandler := connect.NewUnaryHandler(
		AWSResourceScannerServiceUpdateAWSResourceScannerProcedure,
		svc.UpdateAWSResourceScanner,
		connect.WithSchema(aWSResourceScannerServiceUpdateAWSResourceScannerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aWSResourceScannerServiceDeleteAWSResourceScannerHandler := connect.NewUnaryHandler(
		AWSResourceScannerServiceDeleteAWSResourceScannerProcedure,
		svc.DeleteAWSResourceScanner,
		connect.WithSchema(aWSResourceScannerServiceDeleteAWSResourceScannerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.config.v1alpha1.AWSResourceScannerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AWSResourceScannerServiceCreateAWSResourceScannerProcedure:
			aWSResourceScannerServiceCreateAWSResourceScannerHandler.ServeHTTP(w, r)
		case AWSResourceScannerServiceGetAWSResourceScannerProcedure:
			aWSResourceScannerServiceGetAWSResourceScannerHandler.ServeHTTP(w, r)
		case AWSResourceScannerServiceUpdateAWSResourceScannerProcedure:
			aWSResourceScannerServiceUpdateAWSResourceScannerHandler.ServeHTTP(w, r)
		case AWSResourceScannerServiceDeleteAWSResourceScannerProcedure:
			aWSResourceScannerServiceDeleteAWSResourceScannerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAWSResourceScannerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAWSResourceScannerServiceHandler struct{}

func (UnimplementedAWSResourceScannerServiceHandler) CreateAWSResourceScanner(context.Context, *connect.Request[v1alpha1.CreateAWSResourceScannerRequest]) (*connect.Response[v1alpha1.CreateAWSResourceScannerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSResourceScannerService.CreateAWSResourceScanner is not implemented"))
}

func (UnimplementedAWSResourceScannerServiceHandler) GetAWSResourceScanner(context.Context, *connect.Request[v1alpha1.GetAWSResourceScannerRequest]) (*connect.Response[v1alpha1.GetAWSResourceScannerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSResourceScannerService.GetAWSResourceScanner is not implemented"))
}

func (UnimplementedAWSResourceScannerServiceHandler) UpdateAWSResourceScanner(context.Context, *connect.Request[v1alpha1.UpdateAWSResourceScannerRequest]) (*connect.Response[v1alpha1.UpdateAWSResourceScannerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSResourceScannerService.UpdateAWSResourceScanner is not implemented"))
}

func (UnimplementedAWSResourceScannerServiceHandler) DeleteAWSResourceScanner(context.Context, *connect.Request[v1alpha1.DeleteAWSResourceScannerRequest]) (*connect.Response[v1alpha1.DeleteAWSResourceScannerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSResourceScannerService.DeleteAWSResourceScanner is not implemented"))
}
