// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/slack_alert.proto

package configv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SlackAlertServiceName is the fully-qualified name of the SlackAlertService service.
	SlackAlertServiceName = "commonfate.control.config.v1alpha1.SlackAlertService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SlackAlertServiceCreateSlackAlertProcedure is the fully-qualified name of the SlackAlertService's
	// CreateSlackAlert RPC.
	SlackAlertServiceCreateSlackAlertProcedure = "/commonfate.control.config.v1alpha1.SlackAlertService/CreateSlackAlert"
	// SlackAlertServiceReadSlackAlertProcedure is the fully-qualified name of the SlackAlertService's
	// ReadSlackAlert RPC.
	SlackAlertServiceReadSlackAlertProcedure = "/commonfate.control.config.v1alpha1.SlackAlertService/ReadSlackAlert"
	// SlackAlertServiceUpdateSlackAlertProcedure is the fully-qualified name of the SlackAlertService's
	// UpdateSlackAlert RPC.
	SlackAlertServiceUpdateSlackAlertProcedure = "/commonfate.control.config.v1alpha1.SlackAlertService/UpdateSlackAlert"
	// SlackAlertServiceDeleteSlackAlertProcedure is the fully-qualified name of the SlackAlertService's
	// DeleteSlackAlert RPC.
	SlackAlertServiceDeleteSlackAlertProcedure = "/commonfate.control.config.v1alpha1.SlackAlertService/DeleteSlackAlert"
)

// SlackAlertServiceClient is a client for the commonfate.control.config.v1alpha1.SlackAlertService
// service.
type SlackAlertServiceClient interface {
	CreateSlackAlert(context.Context, *connect_go.Request[v1alpha1.CreateSlackAlertRequest]) (*connect_go.Response[v1alpha1.CreateSlackAlertResponse], error)
	ReadSlackAlert(context.Context, *connect_go.Request[v1alpha1.ReadSlackAlertRequest]) (*connect_go.Response[v1alpha1.ReadSlackAlertResponse], error)
	UpdateSlackAlert(context.Context, *connect_go.Request[v1alpha1.UpdateSlackAlertRequest]) (*connect_go.Response[v1alpha1.UpdateSlackAlertResponse], error)
	DeleteSlackAlert(context.Context, *connect_go.Request[v1alpha1.DeleteSlackAlertRequest]) (*connect_go.Response[v1alpha1.DeleteSlackAlertResponse], error)
}

// NewSlackAlertServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.SlackAlertService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSlackAlertServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SlackAlertServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &slackAlertServiceClient{
		createSlackAlert: connect_go.NewClient[v1alpha1.CreateSlackAlertRequest, v1alpha1.CreateSlackAlertResponse](
			httpClient,
			baseURL+SlackAlertServiceCreateSlackAlertProcedure,
			opts...,
		),
		readSlackAlert: connect_go.NewClient[v1alpha1.ReadSlackAlertRequest, v1alpha1.ReadSlackAlertResponse](
			httpClient,
			baseURL+SlackAlertServiceReadSlackAlertProcedure,
			opts...,
		),
		updateSlackAlert: connect_go.NewClient[v1alpha1.UpdateSlackAlertRequest, v1alpha1.UpdateSlackAlertResponse](
			httpClient,
			baseURL+SlackAlertServiceUpdateSlackAlertProcedure,
			opts...,
		),
		deleteSlackAlert: connect_go.NewClient[v1alpha1.DeleteSlackAlertRequest, v1alpha1.DeleteSlackAlertResponse](
			httpClient,
			baseURL+SlackAlertServiceDeleteSlackAlertProcedure,
			opts...,
		),
	}
}

// slackAlertServiceClient implements SlackAlertServiceClient.
type slackAlertServiceClient struct {
	createSlackAlert *connect_go.Client[v1alpha1.CreateSlackAlertRequest, v1alpha1.CreateSlackAlertResponse]
	readSlackAlert   *connect_go.Client[v1alpha1.ReadSlackAlertRequest, v1alpha1.ReadSlackAlertResponse]
	updateSlackAlert *connect_go.Client[v1alpha1.UpdateSlackAlertRequest, v1alpha1.UpdateSlackAlertResponse]
	deleteSlackAlert *connect_go.Client[v1alpha1.DeleteSlackAlertRequest, v1alpha1.DeleteSlackAlertResponse]
}

// CreateSlackAlert calls commonfate.control.config.v1alpha1.SlackAlertService.CreateSlackAlert.
func (c *slackAlertServiceClient) CreateSlackAlert(ctx context.Context, req *connect_go.Request[v1alpha1.CreateSlackAlertRequest]) (*connect_go.Response[v1alpha1.CreateSlackAlertResponse], error) {
	return c.createSlackAlert.CallUnary(ctx, req)
}

// ReadSlackAlert calls commonfate.control.config.v1alpha1.SlackAlertService.ReadSlackAlert.
func (c *slackAlertServiceClient) ReadSlackAlert(ctx context.Context, req *connect_go.Request[v1alpha1.ReadSlackAlertRequest]) (*connect_go.Response[v1alpha1.ReadSlackAlertResponse], error) {
	return c.readSlackAlert.CallUnary(ctx, req)
}

// UpdateSlackAlert calls commonfate.control.config.v1alpha1.SlackAlertService.UpdateSlackAlert.
func (c *slackAlertServiceClient) UpdateSlackAlert(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateSlackAlertRequest]) (*connect_go.Response[v1alpha1.UpdateSlackAlertResponse], error) {
	return c.updateSlackAlert.CallUnary(ctx, req)
}

// DeleteSlackAlert calls commonfate.control.config.v1alpha1.SlackAlertService.DeleteSlackAlert.
func (c *slackAlertServiceClient) DeleteSlackAlert(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteSlackAlertRequest]) (*connect_go.Response[v1alpha1.DeleteSlackAlertResponse], error) {
	return c.deleteSlackAlert.CallUnary(ctx, req)
}

// SlackAlertServiceHandler is an implementation of the
// commonfate.control.config.v1alpha1.SlackAlertService service.
type SlackAlertServiceHandler interface {
	CreateSlackAlert(context.Context, *connect_go.Request[v1alpha1.CreateSlackAlertRequest]) (*connect_go.Response[v1alpha1.CreateSlackAlertResponse], error)
	ReadSlackAlert(context.Context, *connect_go.Request[v1alpha1.ReadSlackAlertRequest]) (*connect_go.Response[v1alpha1.ReadSlackAlertResponse], error)
	UpdateSlackAlert(context.Context, *connect_go.Request[v1alpha1.UpdateSlackAlertRequest]) (*connect_go.Response[v1alpha1.UpdateSlackAlertResponse], error)
	DeleteSlackAlert(context.Context, *connect_go.Request[v1alpha1.DeleteSlackAlertRequest]) (*connect_go.Response[v1alpha1.DeleteSlackAlertResponse], error)
}

// NewSlackAlertServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSlackAlertServiceHandler(svc SlackAlertServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	slackAlertServiceCreateSlackAlertHandler := connect_go.NewUnaryHandler(
		SlackAlertServiceCreateSlackAlertProcedure,
		svc.CreateSlackAlert,
		opts...,
	)
	slackAlertServiceReadSlackAlertHandler := connect_go.NewUnaryHandler(
		SlackAlertServiceReadSlackAlertProcedure,
		svc.ReadSlackAlert,
		opts...,
	)
	slackAlertServiceUpdateSlackAlertHandler := connect_go.NewUnaryHandler(
		SlackAlertServiceUpdateSlackAlertProcedure,
		svc.UpdateSlackAlert,
		opts...,
	)
	slackAlertServiceDeleteSlackAlertHandler := connect_go.NewUnaryHandler(
		SlackAlertServiceDeleteSlackAlertProcedure,
		svc.DeleteSlackAlert,
		opts...,
	)
	return "/commonfate.control.config.v1alpha1.SlackAlertService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SlackAlertServiceCreateSlackAlertProcedure:
			slackAlertServiceCreateSlackAlertHandler.ServeHTTP(w, r)
		case SlackAlertServiceReadSlackAlertProcedure:
			slackAlertServiceReadSlackAlertHandler.ServeHTTP(w, r)
		case SlackAlertServiceUpdateSlackAlertProcedure:
			slackAlertServiceUpdateSlackAlertHandler.ServeHTTP(w, r)
		case SlackAlertServiceDeleteSlackAlertProcedure:
			slackAlertServiceDeleteSlackAlertHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSlackAlertServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSlackAlertServiceHandler struct{}

func (UnimplementedSlackAlertServiceHandler) CreateSlackAlert(context.Context, *connect_go.Request[v1alpha1.CreateSlackAlertRequest]) (*connect_go.Response[v1alpha1.CreateSlackAlertResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.SlackAlertService.CreateSlackAlert is not implemented"))
}

func (UnimplementedSlackAlertServiceHandler) ReadSlackAlert(context.Context, *connect_go.Request[v1alpha1.ReadSlackAlertRequest]) (*connect_go.Response[v1alpha1.ReadSlackAlertResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.SlackAlertService.ReadSlackAlert is not implemented"))
}

func (UnimplementedSlackAlertServiceHandler) UpdateSlackAlert(context.Context, *connect_go.Request[v1alpha1.UpdateSlackAlertRequest]) (*connect_go.Response[v1alpha1.UpdateSlackAlertResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.SlackAlertService.UpdateSlackAlert is not implemented"))
}

func (UnimplementedSlackAlertServiceHandler) DeleteSlackAlert(context.Context, *connect_go.Request[v1alpha1.DeleteSlackAlertRequest]) (*connect_go.Response[v1alpha1.DeleteSlackAlertResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.SlackAlertService.DeleteSlackAlert is not implemented"))
}
