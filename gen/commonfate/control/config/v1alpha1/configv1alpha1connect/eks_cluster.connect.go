// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/eks_cluster.proto

package configv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EKSClusterServiceName is the fully-qualified name of the EKSClusterService service.
	EKSClusterServiceName = "commonfate.control.config.v1alpha1.EKSClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EKSClusterServiceCreateEKSClusterProcedure is the fully-qualified name of the EKSClusterService's
	// CreateEKSCluster RPC.
	EKSClusterServiceCreateEKSClusterProcedure = "/commonfate.control.config.v1alpha1.EKSClusterService/CreateEKSCluster"
	// EKSClusterServiceGetEKSClusterProcedure is the fully-qualified name of the EKSClusterService's
	// GetEKSCluster RPC.
	EKSClusterServiceGetEKSClusterProcedure = "/commonfate.control.config.v1alpha1.EKSClusterService/GetEKSCluster"
	// EKSClusterServiceUpdateEKSClusterProcedure is the fully-qualified name of the EKSClusterService's
	// UpdateEKSCluster RPC.
	EKSClusterServiceUpdateEKSClusterProcedure = "/commonfate.control.config.v1alpha1.EKSClusterService/UpdateEKSCluster"
	// EKSClusterServiceDeleteEKSClusterProcedure is the fully-qualified name of the EKSClusterService's
	// DeleteEKSCluster RPC.
	EKSClusterServiceDeleteEKSClusterProcedure = "/commonfate.control.config.v1alpha1.EKSClusterService/DeleteEKSCluster"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eKSClusterServiceServiceDescriptor                = v1alpha1.File_commonfate_control_config_v1alpha1_eks_cluster_proto.Services().ByName("EKSClusterService")
	eKSClusterServiceCreateEKSClusterMethodDescriptor = eKSClusterServiceServiceDescriptor.Methods().ByName("CreateEKSCluster")
	eKSClusterServiceGetEKSClusterMethodDescriptor    = eKSClusterServiceServiceDescriptor.Methods().ByName("GetEKSCluster")
	eKSClusterServiceUpdateEKSClusterMethodDescriptor = eKSClusterServiceServiceDescriptor.Methods().ByName("UpdateEKSCluster")
	eKSClusterServiceDeleteEKSClusterMethodDescriptor = eKSClusterServiceServiceDescriptor.Methods().ByName("DeleteEKSCluster")
)

// EKSClusterServiceClient is a client for the commonfate.control.config.v1alpha1.EKSClusterService
// service.
type EKSClusterServiceClient interface {
	CreateEKSCluster(context.Context, *connect.Request[v1alpha1.CreateEKSClusterRequest]) (*connect.Response[v1alpha1.CreateEKSClusterResponse], error)
	GetEKSCluster(context.Context, *connect.Request[v1alpha1.GetEKSClusterRequest]) (*connect.Response[v1alpha1.GetEKSClusterResponse], error)
	UpdateEKSCluster(context.Context, *connect.Request[v1alpha1.UpdateEKSClusterRequest]) (*connect.Response[v1alpha1.UpdateEKSClusterResponse], error)
	DeleteEKSCluster(context.Context, *connect.Request[v1alpha1.DeleteEKSClusterRequest]) (*connect.Response[v1alpha1.DeleteEKSClusterResponse], error)
}

// NewEKSClusterServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.EKSClusterService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEKSClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EKSClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eKSClusterServiceClient{
		createEKSCluster: connect.NewClient[v1alpha1.CreateEKSClusterRequest, v1alpha1.CreateEKSClusterResponse](
			httpClient,
			baseURL+EKSClusterServiceCreateEKSClusterProcedure,
			connect.WithSchema(eKSClusterServiceCreateEKSClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEKSCluster: connect.NewClient[v1alpha1.GetEKSClusterRequest, v1alpha1.GetEKSClusterResponse](
			httpClient,
			baseURL+EKSClusterServiceGetEKSClusterProcedure,
			connect.WithSchema(eKSClusterServiceGetEKSClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateEKSCluster: connect.NewClient[v1alpha1.UpdateEKSClusterRequest, v1alpha1.UpdateEKSClusterResponse](
			httpClient,
			baseURL+EKSClusterServiceUpdateEKSClusterProcedure,
			connect.WithSchema(eKSClusterServiceUpdateEKSClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteEKSCluster: connect.NewClient[v1alpha1.DeleteEKSClusterRequest, v1alpha1.DeleteEKSClusterResponse](
			httpClient,
			baseURL+EKSClusterServiceDeleteEKSClusterProcedure,
			connect.WithSchema(eKSClusterServiceDeleteEKSClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eKSClusterServiceClient implements EKSClusterServiceClient.
type eKSClusterServiceClient struct {
	createEKSCluster *connect.Client[v1alpha1.CreateEKSClusterRequest, v1alpha1.CreateEKSClusterResponse]
	getEKSCluster    *connect.Client[v1alpha1.GetEKSClusterRequest, v1alpha1.GetEKSClusterResponse]
	updateEKSCluster *connect.Client[v1alpha1.UpdateEKSClusterRequest, v1alpha1.UpdateEKSClusterResponse]
	deleteEKSCluster *connect.Client[v1alpha1.DeleteEKSClusterRequest, v1alpha1.DeleteEKSClusterResponse]
}

// CreateEKSCluster calls commonfate.control.config.v1alpha1.EKSClusterService.CreateEKSCluster.
func (c *eKSClusterServiceClient) CreateEKSCluster(ctx context.Context, req *connect.Request[v1alpha1.CreateEKSClusterRequest]) (*connect.Response[v1alpha1.CreateEKSClusterResponse], error) {
	return c.createEKSCluster.CallUnary(ctx, req)
}

// GetEKSCluster calls commonfate.control.config.v1alpha1.EKSClusterService.GetEKSCluster.
func (c *eKSClusterServiceClient) GetEKSCluster(ctx context.Context, req *connect.Request[v1alpha1.GetEKSClusterRequest]) (*connect.Response[v1alpha1.GetEKSClusterResponse], error) {
	return c.getEKSCluster.CallUnary(ctx, req)
}

// UpdateEKSCluster calls commonfate.control.config.v1alpha1.EKSClusterService.UpdateEKSCluster.
func (c *eKSClusterServiceClient) UpdateEKSCluster(ctx context.Context, req *connect.Request[v1alpha1.UpdateEKSClusterRequest]) (*connect.Response[v1alpha1.UpdateEKSClusterResponse], error) {
	return c.updateEKSCluster.CallUnary(ctx, req)
}

// DeleteEKSCluster calls commonfate.control.config.v1alpha1.EKSClusterService.DeleteEKSCluster.
func (c *eKSClusterServiceClient) DeleteEKSCluster(ctx context.Context, req *connect.Request[v1alpha1.DeleteEKSClusterRequest]) (*connect.Response[v1alpha1.DeleteEKSClusterResponse], error) {
	return c.deleteEKSCluster.CallUnary(ctx, req)
}

// EKSClusterServiceHandler is an implementation of the
// commonfate.control.config.v1alpha1.EKSClusterService service.
type EKSClusterServiceHandler interface {
	CreateEKSCluster(context.Context, *connect.Request[v1alpha1.CreateEKSClusterRequest]) (*connect.Response[v1alpha1.CreateEKSClusterResponse], error)
	GetEKSCluster(context.Context, *connect.Request[v1alpha1.GetEKSClusterRequest]) (*connect.Response[v1alpha1.GetEKSClusterResponse], error)
	UpdateEKSCluster(context.Context, *connect.Request[v1alpha1.UpdateEKSClusterRequest]) (*connect.Response[v1alpha1.UpdateEKSClusterResponse], error)
	DeleteEKSCluster(context.Context, *connect.Request[v1alpha1.DeleteEKSClusterRequest]) (*connect.Response[v1alpha1.DeleteEKSClusterResponse], error)
}

// NewEKSClusterServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEKSClusterServiceHandler(svc EKSClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eKSClusterServiceCreateEKSClusterHandler := connect.NewUnaryHandler(
		EKSClusterServiceCreateEKSClusterProcedure,
		svc.CreateEKSCluster,
		connect.WithSchema(eKSClusterServiceCreateEKSClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eKSClusterServiceGetEKSClusterHandler := connect.NewUnaryHandler(
		EKSClusterServiceGetEKSClusterProcedure,
		svc.GetEKSCluster,
		connect.WithSchema(eKSClusterServiceGetEKSClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eKSClusterServiceUpdateEKSClusterHandler := connect.NewUnaryHandler(
		EKSClusterServiceUpdateEKSClusterProcedure,
		svc.UpdateEKSCluster,
		connect.WithSchema(eKSClusterServiceUpdateEKSClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eKSClusterServiceDeleteEKSClusterHandler := connect.NewUnaryHandler(
		EKSClusterServiceDeleteEKSClusterProcedure,
		svc.DeleteEKSCluster,
		connect.WithSchema(eKSClusterServiceDeleteEKSClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.config.v1alpha1.EKSClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EKSClusterServiceCreateEKSClusterProcedure:
			eKSClusterServiceCreateEKSClusterHandler.ServeHTTP(w, r)
		case EKSClusterServiceGetEKSClusterProcedure:
			eKSClusterServiceGetEKSClusterHandler.ServeHTTP(w, r)
		case EKSClusterServiceUpdateEKSClusterProcedure:
			eKSClusterServiceUpdateEKSClusterHandler.ServeHTTP(w, r)
		case EKSClusterServiceDeleteEKSClusterProcedure:
			eKSClusterServiceDeleteEKSClusterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEKSClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEKSClusterServiceHandler struct{}

func (UnimplementedEKSClusterServiceHandler) CreateEKSCluster(context.Context, *connect.Request[v1alpha1.CreateEKSClusterRequest]) (*connect.Response[v1alpha1.CreateEKSClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.EKSClusterService.CreateEKSCluster is not implemented"))
}

func (UnimplementedEKSClusterServiceHandler) GetEKSCluster(context.Context, *connect.Request[v1alpha1.GetEKSClusterRequest]) (*connect.Response[v1alpha1.GetEKSClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.EKSClusterService.GetEKSCluster is not implemented"))
}

func (UnimplementedEKSClusterServiceHandler) UpdateEKSCluster(context.Context, *connect.Request[v1alpha1.UpdateEKSClusterRequest]) (*connect.Response[v1alpha1.UpdateEKSClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.EKSClusterService.UpdateEKSCluster is not implemented"))
}

func (UnimplementedEKSClusterServiceHandler) DeleteEKSCluster(context.Context, *connect.Request[v1alpha1.DeleteEKSClusterRequest]) (*connect.Response[v1alpha1.DeleteEKSClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.EKSClusterService.DeleteEKSCluster is not implemented"))
}
