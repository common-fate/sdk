// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/jit_workflow.proto

package configv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// JITWorkflowServiceName is the fully-qualified name of the JITWorkflowService service.
	JITWorkflowServiceName = "commonfate.control.config.v1alpha1.JITWorkflowService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JITWorkflowServiceCreateJITWorkflowProcedure is the fully-qualified name of the
	// JITWorkflowService's CreateJITWorkflow RPC.
	JITWorkflowServiceCreateJITWorkflowProcedure = "/commonfate.control.config.v1alpha1.JITWorkflowService/CreateJITWorkflow"
	// JITWorkflowServiceReadJITWorkflowProcedure is the fully-qualified name of the
	// JITWorkflowService's ReadJITWorkflow RPC.
	JITWorkflowServiceReadJITWorkflowProcedure = "/commonfate.control.config.v1alpha1.JITWorkflowService/ReadJITWorkflow"
	// JITWorkflowServiceUpdateJITWorkflowProcedure is the fully-qualified name of the
	// JITWorkflowService's UpdateJITWorkflow RPC.
	JITWorkflowServiceUpdateJITWorkflowProcedure = "/commonfate.control.config.v1alpha1.JITWorkflowService/UpdateJITWorkflow"
	// JITWorkflowServiceDeleteJITWorkflowProcedure is the fully-qualified name of the
	// JITWorkflowService's DeleteJITWorkflow RPC.
	JITWorkflowServiceDeleteJITWorkflowProcedure = "/commonfate.control.config.v1alpha1.JITWorkflowService/DeleteJITWorkflow"
)

// JITWorkflowServiceClient is a client for the
// commonfate.control.config.v1alpha1.JITWorkflowService service.
type JITWorkflowServiceClient interface {
	CreateJITWorkflow(context.Context, *connect_go.Request[v1alpha1.CreateJITWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateJITWorkflowResponse], error)
	ReadJITWorkflow(context.Context, *connect_go.Request[v1alpha1.GetJITWorkflowRequest]) (*connect_go.Response[v1alpha1.GetJITWorkflowResponse], error)
	UpdateJITWorkflow(context.Context, *connect_go.Request[v1alpha1.UpdateJITWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateJITWorkflowResponse], error)
	DeleteJITWorkflow(context.Context, *connect_go.Request[v1alpha1.DeleteJITWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteJITWorkflowResponse], error)
}

// NewJITWorkflowServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.JITWorkflowService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJITWorkflowServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) JITWorkflowServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jITWorkflowServiceClient{
		createJITWorkflow: connect_go.NewClient[v1alpha1.CreateJITWorkflowRequest, v1alpha1.CreateJITWorkflowResponse](
			httpClient,
			baseURL+JITWorkflowServiceCreateJITWorkflowProcedure,
			opts...,
		),
		readJITWorkflow: connect_go.NewClient[v1alpha1.GetJITWorkflowRequest, v1alpha1.GetJITWorkflowResponse](
			httpClient,
			baseURL+JITWorkflowServiceReadJITWorkflowProcedure,
			opts...,
		),
		updateJITWorkflow: connect_go.NewClient[v1alpha1.UpdateJITWorkflowRequest, v1alpha1.UpdateJITWorkflowResponse](
			httpClient,
			baseURL+JITWorkflowServiceUpdateJITWorkflowProcedure,
			opts...,
		),
		deleteJITWorkflow: connect_go.NewClient[v1alpha1.DeleteJITWorkflowRequest, v1alpha1.DeleteJITWorkflowResponse](
			httpClient,
			baseURL+JITWorkflowServiceDeleteJITWorkflowProcedure,
			opts...,
		),
	}
}

// jITWorkflowServiceClient implements JITWorkflowServiceClient.
type jITWorkflowServiceClient struct {
	createJITWorkflow *connect_go.Client[v1alpha1.CreateJITWorkflowRequest, v1alpha1.CreateJITWorkflowResponse]
	readJITWorkflow   *connect_go.Client[v1alpha1.GetJITWorkflowRequest, v1alpha1.GetJITWorkflowResponse]
	updateJITWorkflow *connect_go.Client[v1alpha1.UpdateJITWorkflowRequest, v1alpha1.UpdateJITWorkflowResponse]
	deleteJITWorkflow *connect_go.Client[v1alpha1.DeleteJITWorkflowRequest, v1alpha1.DeleteJITWorkflowResponse]
}

// CreateJITWorkflow calls commonfate.control.config.v1alpha1.JITWorkflowService.CreateJITWorkflow.
func (c *jITWorkflowServiceClient) CreateJITWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.CreateJITWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateJITWorkflowResponse], error) {
	return c.createJITWorkflow.CallUnary(ctx, req)
}

// ReadJITWorkflow calls commonfate.control.config.v1alpha1.JITWorkflowService.ReadJITWorkflow.
func (c *jITWorkflowServiceClient) ReadJITWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.GetJITWorkflowRequest]) (*connect_go.Response[v1alpha1.GetJITWorkflowResponse], error) {
	return c.readJITWorkflow.CallUnary(ctx, req)
}

// UpdateJITWorkflow calls commonfate.control.config.v1alpha1.JITWorkflowService.UpdateJITWorkflow.
func (c *jITWorkflowServiceClient) UpdateJITWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateJITWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateJITWorkflowResponse], error) {
	return c.updateJITWorkflow.CallUnary(ctx, req)
}

// DeleteJITWorkflow calls commonfate.control.config.v1alpha1.JITWorkflowService.DeleteJITWorkflow.
func (c *jITWorkflowServiceClient) DeleteJITWorkflow(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteJITWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteJITWorkflowResponse], error) {
	return c.deleteJITWorkflow.CallUnary(ctx, req)
}

// JITWorkflowServiceHandler is an implementation of the
// commonfate.control.config.v1alpha1.JITWorkflowService service.
type JITWorkflowServiceHandler interface {
	CreateJITWorkflow(context.Context, *connect_go.Request[v1alpha1.CreateJITWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateJITWorkflowResponse], error)
	ReadJITWorkflow(context.Context, *connect_go.Request[v1alpha1.GetJITWorkflowRequest]) (*connect_go.Response[v1alpha1.GetJITWorkflowResponse], error)
	UpdateJITWorkflow(context.Context, *connect_go.Request[v1alpha1.UpdateJITWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateJITWorkflowResponse], error)
	DeleteJITWorkflow(context.Context, *connect_go.Request[v1alpha1.DeleteJITWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteJITWorkflowResponse], error)
}

// NewJITWorkflowServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJITWorkflowServiceHandler(svc JITWorkflowServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	jITWorkflowServiceCreateJITWorkflowHandler := connect_go.NewUnaryHandler(
		JITWorkflowServiceCreateJITWorkflowProcedure,
		svc.CreateJITWorkflow,
		opts...,
	)
	jITWorkflowServiceReadJITWorkflowHandler := connect_go.NewUnaryHandler(
		JITWorkflowServiceReadJITWorkflowProcedure,
		svc.ReadJITWorkflow,
		opts...,
	)
	jITWorkflowServiceUpdateJITWorkflowHandler := connect_go.NewUnaryHandler(
		JITWorkflowServiceUpdateJITWorkflowProcedure,
		svc.UpdateJITWorkflow,
		opts...,
	)
	jITWorkflowServiceDeleteJITWorkflowHandler := connect_go.NewUnaryHandler(
		JITWorkflowServiceDeleteJITWorkflowProcedure,
		svc.DeleteJITWorkflow,
		opts...,
	)
	return "/commonfate.control.config.v1alpha1.JITWorkflowService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JITWorkflowServiceCreateJITWorkflowProcedure:
			jITWorkflowServiceCreateJITWorkflowHandler.ServeHTTP(w, r)
		case JITWorkflowServiceReadJITWorkflowProcedure:
			jITWorkflowServiceReadJITWorkflowHandler.ServeHTTP(w, r)
		case JITWorkflowServiceUpdateJITWorkflowProcedure:
			jITWorkflowServiceUpdateJITWorkflowHandler.ServeHTTP(w, r)
		case JITWorkflowServiceDeleteJITWorkflowProcedure:
			jITWorkflowServiceDeleteJITWorkflowHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJITWorkflowServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJITWorkflowServiceHandler struct{}

func (UnimplementedJITWorkflowServiceHandler) CreateJITWorkflow(context.Context, *connect_go.Request[v1alpha1.CreateJITWorkflowRequest]) (*connect_go.Response[v1alpha1.CreateJITWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.JITWorkflowService.CreateJITWorkflow is not implemented"))
}

func (UnimplementedJITWorkflowServiceHandler) ReadJITWorkflow(context.Context, *connect_go.Request[v1alpha1.GetJITWorkflowRequest]) (*connect_go.Response[v1alpha1.GetJITWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.JITWorkflowService.ReadJITWorkflow is not implemented"))
}

func (UnimplementedJITWorkflowServiceHandler) UpdateJITWorkflow(context.Context, *connect_go.Request[v1alpha1.UpdateJITWorkflowRequest]) (*connect_go.Response[v1alpha1.UpdateJITWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.JITWorkflowService.UpdateJITWorkflow is not implemented"))
}

func (UnimplementedJITWorkflowServiceHandler) DeleteJITWorkflow(context.Context, *connect_go.Request[v1alpha1.DeleteJITWorkflowRequest]) (*connect_go.Response[v1alpha1.DeleteJITWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.JITWorkflowService.DeleteJITWorkflow is not implemented"))
}
