// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/aws_rds_database_user.proto

package configv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AWSRDSDatabaseUserServiceName is the fully-qualified name of the AWSRDSDatabaseUserService
	// service.
	AWSRDSDatabaseUserServiceName = "commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserProcedure is the fully-qualified name of the
	// AWSRDSDatabaseUserService's CreateAWSRDSDatabaseUser RPC.
	AWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserProcedure = "/commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService/CreateAWSRDSDatabaseUser"
	// AWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserProcedure is the fully-qualified name of the
	// AWSRDSDatabaseUserService's GetAWSRDSDatabaseUser RPC.
	AWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserProcedure = "/commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService/GetAWSRDSDatabaseUser"
	// AWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserProcedure is the fully-qualified name of the
	// AWSRDSDatabaseUserService's UpdateAWSRDSDatabaseUser RPC.
	AWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserProcedure = "/commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService/UpdateAWSRDSDatabaseUser"
	// AWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserProcedure is the fully-qualified name of the
	// AWSRDSDatabaseUserService's DeleteAWSRDSDatabaseUser RPC.
	AWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserProcedure = "/commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService/DeleteAWSRDSDatabaseUser"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aWSRDSDatabaseUserServiceServiceDescriptor                        = v1alpha1.File_commonfate_control_config_v1alpha1_aws_rds_database_user_proto.Services().ByName("AWSRDSDatabaseUserService")
	aWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserMethodDescriptor = aWSRDSDatabaseUserServiceServiceDescriptor.Methods().ByName("CreateAWSRDSDatabaseUser")
	aWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserMethodDescriptor    = aWSRDSDatabaseUserServiceServiceDescriptor.Methods().ByName("GetAWSRDSDatabaseUser")
	aWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserMethodDescriptor = aWSRDSDatabaseUserServiceServiceDescriptor.Methods().ByName("UpdateAWSRDSDatabaseUser")
	aWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserMethodDescriptor = aWSRDSDatabaseUserServiceServiceDescriptor.Methods().ByName("DeleteAWSRDSDatabaseUser")
)

// AWSRDSDatabaseUserServiceClient is a client for the
// commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService service.
type AWSRDSDatabaseUserServiceClient interface {
	CreateAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.CreateAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.CreateAWSRDSDatabaseUserResponse], error)
	GetAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.GetAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.GetAWSRDSDatabaseUserResponse], error)
	UpdateAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.UpdateAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.UpdateAWSRDSDatabaseUserResponse], error)
	DeleteAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.DeleteAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.DeleteAWSRDSDatabaseUserResponse], error)
}

// NewAWSRDSDatabaseUserServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAWSRDSDatabaseUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AWSRDSDatabaseUserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aWSRDSDatabaseUserServiceClient{
		createAWSRDSDatabaseUser: connect.NewClient[v1alpha1.CreateAWSRDSDatabaseUserRequest, v1alpha1.CreateAWSRDSDatabaseUserResponse](
			httpClient,
			baseURL+AWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserProcedure,
			connect.WithSchema(aWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAWSRDSDatabaseUser: connect.NewClient[v1alpha1.GetAWSRDSDatabaseUserRequest, v1alpha1.GetAWSRDSDatabaseUserResponse](
			httpClient,
			baseURL+AWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserProcedure,
			connect.WithSchema(aWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAWSRDSDatabaseUser: connect.NewClient[v1alpha1.UpdateAWSRDSDatabaseUserRequest, v1alpha1.UpdateAWSRDSDatabaseUserResponse](
			httpClient,
			baseURL+AWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserProcedure,
			connect.WithSchema(aWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAWSRDSDatabaseUser: connect.NewClient[v1alpha1.DeleteAWSRDSDatabaseUserRequest, v1alpha1.DeleteAWSRDSDatabaseUserResponse](
			httpClient,
			baseURL+AWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserProcedure,
			connect.WithSchema(aWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aWSRDSDatabaseUserServiceClient implements AWSRDSDatabaseUserServiceClient.
type aWSRDSDatabaseUserServiceClient struct {
	createAWSRDSDatabaseUser *connect.Client[v1alpha1.CreateAWSRDSDatabaseUserRequest, v1alpha1.CreateAWSRDSDatabaseUserResponse]
	getAWSRDSDatabaseUser    *connect.Client[v1alpha1.GetAWSRDSDatabaseUserRequest, v1alpha1.GetAWSRDSDatabaseUserResponse]
	updateAWSRDSDatabaseUser *connect.Client[v1alpha1.UpdateAWSRDSDatabaseUserRequest, v1alpha1.UpdateAWSRDSDatabaseUserResponse]
	deleteAWSRDSDatabaseUser *connect.Client[v1alpha1.DeleteAWSRDSDatabaseUserRequest, v1alpha1.DeleteAWSRDSDatabaseUserResponse]
}

// CreateAWSRDSDatabaseUser calls
// commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService.CreateAWSRDSDatabaseUser.
func (c *aWSRDSDatabaseUserServiceClient) CreateAWSRDSDatabaseUser(ctx context.Context, req *connect.Request[v1alpha1.CreateAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.CreateAWSRDSDatabaseUserResponse], error) {
	return c.createAWSRDSDatabaseUser.CallUnary(ctx, req)
}

// GetAWSRDSDatabaseUser calls
// commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService.GetAWSRDSDatabaseUser.
func (c *aWSRDSDatabaseUserServiceClient) GetAWSRDSDatabaseUser(ctx context.Context, req *connect.Request[v1alpha1.GetAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.GetAWSRDSDatabaseUserResponse], error) {
	return c.getAWSRDSDatabaseUser.CallUnary(ctx, req)
}

// UpdateAWSRDSDatabaseUser calls
// commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService.UpdateAWSRDSDatabaseUser.
func (c *aWSRDSDatabaseUserServiceClient) UpdateAWSRDSDatabaseUser(ctx context.Context, req *connect.Request[v1alpha1.UpdateAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.UpdateAWSRDSDatabaseUserResponse], error) {
	return c.updateAWSRDSDatabaseUser.CallUnary(ctx, req)
}

// DeleteAWSRDSDatabaseUser calls
// commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService.DeleteAWSRDSDatabaseUser.
func (c *aWSRDSDatabaseUserServiceClient) DeleteAWSRDSDatabaseUser(ctx context.Context, req *connect.Request[v1alpha1.DeleteAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.DeleteAWSRDSDatabaseUserResponse], error) {
	return c.deleteAWSRDSDatabaseUser.CallUnary(ctx, req)
}

// AWSRDSDatabaseUserServiceHandler is an implementation of the
// commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService service.
type AWSRDSDatabaseUserServiceHandler interface {
	CreateAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.CreateAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.CreateAWSRDSDatabaseUserResponse], error)
	GetAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.GetAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.GetAWSRDSDatabaseUserResponse], error)
	UpdateAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.UpdateAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.UpdateAWSRDSDatabaseUserResponse], error)
	DeleteAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.DeleteAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.DeleteAWSRDSDatabaseUserResponse], error)
}

// NewAWSRDSDatabaseUserServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAWSRDSDatabaseUserServiceHandler(svc AWSRDSDatabaseUserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserHandler := connect.NewUnaryHandler(
		AWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserProcedure,
		svc.CreateAWSRDSDatabaseUser,
		connect.WithSchema(aWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserHandler := connect.NewUnaryHandler(
		AWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserProcedure,
		svc.GetAWSRDSDatabaseUser,
		connect.WithSchema(aWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserHandler := connect.NewUnaryHandler(
		AWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserProcedure,
		svc.UpdateAWSRDSDatabaseUser,
		connect.WithSchema(aWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserHandler := connect.NewUnaryHandler(
		AWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserProcedure,
		svc.DeleteAWSRDSDatabaseUser,
		connect.WithSchema(aWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserProcedure:
			aWSRDSDatabaseUserServiceCreateAWSRDSDatabaseUserHandler.ServeHTTP(w, r)
		case AWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserProcedure:
			aWSRDSDatabaseUserServiceGetAWSRDSDatabaseUserHandler.ServeHTTP(w, r)
		case AWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserProcedure:
			aWSRDSDatabaseUserServiceUpdateAWSRDSDatabaseUserHandler.ServeHTTP(w, r)
		case AWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserProcedure:
			aWSRDSDatabaseUserServiceDeleteAWSRDSDatabaseUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAWSRDSDatabaseUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAWSRDSDatabaseUserServiceHandler struct{}

func (UnimplementedAWSRDSDatabaseUserServiceHandler) CreateAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.CreateAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.CreateAWSRDSDatabaseUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService.CreateAWSRDSDatabaseUser is not implemented"))
}

func (UnimplementedAWSRDSDatabaseUserServiceHandler) GetAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.GetAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.GetAWSRDSDatabaseUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService.GetAWSRDSDatabaseUser is not implemented"))
}

func (UnimplementedAWSRDSDatabaseUserServiceHandler) UpdateAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.UpdateAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.UpdateAWSRDSDatabaseUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService.UpdateAWSRDSDatabaseUser is not implemented"))
}

func (UnimplementedAWSRDSDatabaseUserServiceHandler) DeleteAWSRDSDatabaseUser(context.Context, *connect.Request[v1alpha1.DeleteAWSRDSDatabaseUserRequest]) (*connect.Response[v1alpha1.DeleteAWSRDSDatabaseUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.AWSRDSDatabaseUserService.DeleteAWSRDSDatabaseUser is not implemented"))
}
