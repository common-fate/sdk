// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/config/v1alpha1/gcp_org.proto

package configv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/config/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GCPOrganizationServiceName is the fully-qualified name of the GCPOrganizationService service.
	GCPOrganizationServiceName = "commonfate.control.config.v1alpha1.GCPOrganizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GCPOrganizationServiceCreateGCPOrganizationProcedure is the fully-qualified name of the
	// GCPOrganizationService's CreateGCPOrganization RPC.
	GCPOrganizationServiceCreateGCPOrganizationProcedure = "/commonfate.control.config.v1alpha1.GCPOrganizationService/CreateGCPOrganization"
	// GCPOrganizationServiceReadGCPOrganizationProcedure is the fully-qualified name of the
	// GCPOrganizationService's ReadGCPOrganization RPC.
	GCPOrganizationServiceReadGCPOrganizationProcedure = "/commonfate.control.config.v1alpha1.GCPOrganizationService/ReadGCPOrganization"
	// GCPOrganizationServiceUpdateGCPOrganizationProcedure is the fully-qualified name of the
	// GCPOrganizationService's UpdateGCPOrganization RPC.
	GCPOrganizationServiceUpdateGCPOrganizationProcedure = "/commonfate.control.config.v1alpha1.GCPOrganizationService/UpdateGCPOrganization"
	// GCPOrganizationServiceDeleteGCPOrganizationProcedure is the fully-qualified name of the
	// GCPOrganizationService's DeleteGCPOrganization RPC.
	GCPOrganizationServiceDeleteGCPOrganizationProcedure = "/commonfate.control.config.v1alpha1.GCPOrganizationService/DeleteGCPOrganization"
)

// GCPOrganizationServiceClient is a client for the
// commonfate.control.config.v1alpha1.GCPOrganizationService service.
type GCPOrganizationServiceClient interface {
	CreateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.CreateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateGCPOrganizationResponse], error)
	ReadGCPOrganization(context.Context, *connect_go.Request[v1alpha1.ReadGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.ReadGCPOrganizationResponse], error)
	UpdateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.UpdateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.UpdateGCPOrganizationResponse], error)
	DeleteGCPOrganization(context.Context, *connect_go.Request[v1alpha1.DeleteGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteGCPOrganizationResponse], error)
}

// NewGCPOrganizationServiceClient constructs a client for the
// commonfate.control.config.v1alpha1.GCPOrganizationService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGCPOrganizationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GCPOrganizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gCPOrganizationServiceClient{
		createGCPOrganization: connect_go.NewClient[v1alpha1.CreateGCPOrganizationRequest, v1alpha1.CreateGCPOrganizationResponse](
			httpClient,
			baseURL+GCPOrganizationServiceCreateGCPOrganizationProcedure,
			opts...,
		),
		readGCPOrganization: connect_go.NewClient[v1alpha1.ReadGCPOrganizationRequest, v1alpha1.ReadGCPOrganizationResponse](
			httpClient,
			baseURL+GCPOrganizationServiceReadGCPOrganizationProcedure,
			opts...,
		),
		updateGCPOrganization: connect_go.NewClient[v1alpha1.UpdateGCPOrganizationRequest, v1alpha1.UpdateGCPOrganizationResponse](
			httpClient,
			baseURL+GCPOrganizationServiceUpdateGCPOrganizationProcedure,
			opts...,
		),
		deleteGCPOrganization: connect_go.NewClient[v1alpha1.DeleteGCPOrganizationRequest, v1alpha1.DeleteGCPOrganizationResponse](
			httpClient,
			baseURL+GCPOrganizationServiceDeleteGCPOrganizationProcedure,
			opts...,
		),
	}
}

// gCPOrganizationServiceClient implements GCPOrganizationServiceClient.
type gCPOrganizationServiceClient struct {
	createGCPOrganization *connect_go.Client[v1alpha1.CreateGCPOrganizationRequest, v1alpha1.CreateGCPOrganizationResponse]
	readGCPOrganization   *connect_go.Client[v1alpha1.ReadGCPOrganizationRequest, v1alpha1.ReadGCPOrganizationResponse]
	updateGCPOrganization *connect_go.Client[v1alpha1.UpdateGCPOrganizationRequest, v1alpha1.UpdateGCPOrganizationResponse]
	deleteGCPOrganization *connect_go.Client[v1alpha1.DeleteGCPOrganizationRequest, v1alpha1.DeleteGCPOrganizationResponse]
}

// CreateGCPOrganization calls
// commonfate.control.config.v1alpha1.GCPOrganizationService.CreateGCPOrganization.
func (c *gCPOrganizationServiceClient) CreateGCPOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.CreateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateGCPOrganizationResponse], error) {
	return c.createGCPOrganization.CallUnary(ctx, req)
}

// ReadGCPOrganization calls
// commonfate.control.config.v1alpha1.GCPOrganizationService.ReadGCPOrganization.
func (c *gCPOrganizationServiceClient) ReadGCPOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.ReadGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.ReadGCPOrganizationResponse], error) {
	return c.readGCPOrganization.CallUnary(ctx, req)
}

// UpdateGCPOrganization calls
// commonfate.control.config.v1alpha1.GCPOrganizationService.UpdateGCPOrganization.
func (c *gCPOrganizationServiceClient) UpdateGCPOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.UpdateGCPOrganizationResponse], error) {
	return c.updateGCPOrganization.CallUnary(ctx, req)
}

// DeleteGCPOrganization calls
// commonfate.control.config.v1alpha1.GCPOrganizationService.DeleteGCPOrganization.
func (c *gCPOrganizationServiceClient) DeleteGCPOrganization(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteGCPOrganizationResponse], error) {
	return c.deleteGCPOrganization.CallUnary(ctx, req)
}

// GCPOrganizationServiceHandler is an implementation of the
// commonfate.control.config.v1alpha1.GCPOrganizationService service.
type GCPOrganizationServiceHandler interface {
	CreateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.CreateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateGCPOrganizationResponse], error)
	ReadGCPOrganization(context.Context, *connect_go.Request[v1alpha1.ReadGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.ReadGCPOrganizationResponse], error)
	UpdateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.UpdateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.UpdateGCPOrganizationResponse], error)
	DeleteGCPOrganization(context.Context, *connect_go.Request[v1alpha1.DeleteGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteGCPOrganizationResponse], error)
}

// NewGCPOrganizationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGCPOrganizationServiceHandler(svc GCPOrganizationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	gCPOrganizationServiceCreateGCPOrganizationHandler := connect_go.NewUnaryHandler(
		GCPOrganizationServiceCreateGCPOrganizationProcedure,
		svc.CreateGCPOrganization,
		opts...,
	)
	gCPOrganizationServiceReadGCPOrganizationHandler := connect_go.NewUnaryHandler(
		GCPOrganizationServiceReadGCPOrganizationProcedure,
		svc.ReadGCPOrganization,
		opts...,
	)
	gCPOrganizationServiceUpdateGCPOrganizationHandler := connect_go.NewUnaryHandler(
		GCPOrganizationServiceUpdateGCPOrganizationProcedure,
		svc.UpdateGCPOrganization,
		opts...,
	)
	gCPOrganizationServiceDeleteGCPOrganizationHandler := connect_go.NewUnaryHandler(
		GCPOrganizationServiceDeleteGCPOrganizationProcedure,
		svc.DeleteGCPOrganization,
		opts...,
	)
	return "/commonfate.control.config.v1alpha1.GCPOrganizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GCPOrganizationServiceCreateGCPOrganizationProcedure:
			gCPOrganizationServiceCreateGCPOrganizationHandler.ServeHTTP(w, r)
		case GCPOrganizationServiceReadGCPOrganizationProcedure:
			gCPOrganizationServiceReadGCPOrganizationHandler.ServeHTTP(w, r)
		case GCPOrganizationServiceUpdateGCPOrganizationProcedure:
			gCPOrganizationServiceUpdateGCPOrganizationHandler.ServeHTTP(w, r)
		case GCPOrganizationServiceDeleteGCPOrganizationProcedure:
			gCPOrganizationServiceDeleteGCPOrganizationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGCPOrganizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGCPOrganizationServiceHandler struct{}

func (UnimplementedGCPOrganizationServiceHandler) CreateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.CreateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.CreateGCPOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.GCPOrganizationService.CreateGCPOrganization is not implemented"))
}

func (UnimplementedGCPOrganizationServiceHandler) ReadGCPOrganization(context.Context, *connect_go.Request[v1alpha1.ReadGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.ReadGCPOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.GCPOrganizationService.ReadGCPOrganization is not implemented"))
}

func (UnimplementedGCPOrganizationServiceHandler) UpdateGCPOrganization(context.Context, *connect_go.Request[v1alpha1.UpdateGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.UpdateGCPOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.GCPOrganizationService.UpdateGCPOrganization is not implemented"))
}

func (UnimplementedGCPOrganizationServiceHandler) DeleteGCPOrganization(context.Context, *connect_go.Request[v1alpha1.DeleteGCPOrganizationRequest]) (*connect_go.Response[v1alpha1.DeleteGCPOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commonfate.control.config.v1alpha1.GCPOrganizationService.DeleteGCPOrganization is not implemented"))
}
