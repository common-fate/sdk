// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/config/v1alpha1/access_workflow.proto

package configv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AccessWorkflow with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccessWorkflow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessWorkflow with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccessWorkflowMultiError,
// or nil if none found.
func (m *AccessWorkflow) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessWorkflow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAccessDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessWorkflowValidationError{
					field:  "AccessDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessWorkflowValidationError{
					field:  "AccessDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessWorkflowValidationError{
				field:  "AccessDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTryExtendAfter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessWorkflowValidationError{
					field:  "TryExtendAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessWorkflowValidationError{
					field:  "TryExtendAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTryExtendAfter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessWorkflowValidationError{
				field:  "TryExtendAfter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Priority

	if all {
		switch v := interface{}(m.GetActivationExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessWorkflowValidationError{
					field:  "ActivationExpiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessWorkflowValidationError{
					field:  "ActivationExpiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivationExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessWorkflowValidationError{
				field:  "ActivationExpiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDefaultDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessWorkflowValidationError{
					field:  "DefaultDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessWorkflowValidationError{
					field:  "DefaultDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessWorkflowValidationError{
				field:  "DefaultDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AccessWorkflowMultiError(errors)
	}

	return nil
}

// AccessWorkflowMultiError is an error wrapping multiple validation errors
// returned by AccessWorkflow.ValidateAll() if the designated constraints
// aren't met.
type AccessWorkflowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessWorkflowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessWorkflowMultiError) AllErrors() []error { return m }

// AccessWorkflowValidationError is the validation error returned by
// AccessWorkflow.Validate if the designated constraints aren't met.
type AccessWorkflowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessWorkflowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessWorkflowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessWorkflowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessWorkflowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessWorkflowValidationError) ErrorName() string { return "AccessWorkflowValidationError" }

// Error satisfies the builtin error interface
func (e AccessWorkflowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessWorkflow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessWorkflowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessWorkflowValidationError{}

// Validate checks the field values on CreateAccessWorkflowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccessWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccessWorkflowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccessWorkflowRequestMultiError, or nil if none found.
func (m *CreateAccessWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccessWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAccessDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccessWorkflowRequestValidationError{
					field:  "AccessDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccessWorkflowRequestValidationError{
					field:  "AccessDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccessWorkflowRequestValidationError{
				field:  "AccessDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTryExtendAfter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccessWorkflowRequestValidationError{
					field:  "TryExtendAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccessWorkflowRequestValidationError{
					field:  "TryExtendAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTryExtendAfter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccessWorkflowRequestValidationError{
				field:  "TryExtendAfter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Priority

	if all {
		switch v := interface{}(m.GetActivationExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccessWorkflowRequestValidationError{
					field:  "ActivationExpiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccessWorkflowRequestValidationError{
					field:  "ActivationExpiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivationExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccessWorkflowRequestValidationError{
				field:  "ActivationExpiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDefaultDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccessWorkflowRequestValidationError{
					field:  "DefaultDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccessWorkflowRequestValidationError{
					field:  "DefaultDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccessWorkflowRequestValidationError{
				field:  "DefaultDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccessWorkflowRequestMultiError(errors)
	}

	return nil
}

// CreateAccessWorkflowRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAccessWorkflowRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateAccessWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccessWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccessWorkflowRequestMultiError) AllErrors() []error { return m }

// CreateAccessWorkflowRequestValidationError is the validation error returned
// by CreateAccessWorkflowRequest.Validate if the designated constraints
// aren't met.
type CreateAccessWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccessWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccessWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccessWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccessWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccessWorkflowRequestValidationError) ErrorName() string {
	return "CreateAccessWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccessWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccessWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccessWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccessWorkflowRequestValidationError{}

// Validate checks the field values on CreateAccessWorkflowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccessWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccessWorkflowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccessWorkflowResponseMultiError, or nil if none found.
func (m *CreateAccessWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccessWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccessWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccessWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccessWorkflowResponseValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccessWorkflowResponseMultiError(errors)
	}

	return nil
}

// CreateAccessWorkflowResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAccessWorkflowResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateAccessWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccessWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccessWorkflowResponseMultiError) AllErrors() []error { return m }

// CreateAccessWorkflowResponseValidationError is the validation error returned
// by CreateAccessWorkflowResponse.Validate if the designated constraints
// aren't met.
type CreateAccessWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccessWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccessWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccessWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccessWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccessWorkflowResponseValidationError) ErrorName() string {
	return "CreateAccessWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccessWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccessWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccessWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccessWorkflowResponseValidationError{}

// Validate checks the field values on GetAccessWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessWorkflowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessWorkflowRequestMultiError, or nil if none found.
func (m *GetAccessWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAccessWorkflowRequestMultiError(errors)
	}

	return nil
}

// GetAccessWorkflowRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccessWorkflowRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccessWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessWorkflowRequestMultiError) AllErrors() []error { return m }

// GetAccessWorkflowRequestValidationError is the validation error returned by
// GetAccessWorkflowRequest.Validate if the designated constraints aren't met.
type GetAccessWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessWorkflowRequestValidationError) ErrorName() string {
	return "GetAccessWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessWorkflowRequestValidationError{}

// Validate checks the field values on GetAccessWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessWorkflowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessWorkflowResponseMultiError, or nil if none found.
func (m *GetAccessWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccessWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccessWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccessWorkflowResponseValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccessWorkflowResponseMultiError(errors)
	}

	return nil
}

// GetAccessWorkflowResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccessWorkflowResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAccessWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessWorkflowResponseMultiError) AllErrors() []error { return m }

// GetAccessWorkflowResponseValidationError is the validation error returned by
// GetAccessWorkflowResponse.Validate if the designated constraints aren't met.
type GetAccessWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessWorkflowResponseValidationError) ErrorName() string {
	return "GetAccessWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessWorkflowResponseValidationError{}

// Validate checks the field values on UpdateAccessWorkflowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccessWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccessWorkflowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccessWorkflowRequestMultiError, or nil if none found.
func (m *UpdateAccessWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccessWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccessWorkflowRequestValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccessWorkflowRequestValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccessWorkflowRequestValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccessWorkflowRequestMultiError(errors)
	}

	return nil
}

// UpdateAccessWorkflowRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAccessWorkflowRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAccessWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccessWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccessWorkflowRequestMultiError) AllErrors() []error { return m }

// UpdateAccessWorkflowRequestValidationError is the validation error returned
// by UpdateAccessWorkflowRequest.Validate if the designated constraints
// aren't met.
type UpdateAccessWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccessWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccessWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccessWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccessWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccessWorkflowRequestValidationError) ErrorName() string {
	return "UpdateAccessWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccessWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccessWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccessWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccessWorkflowRequestValidationError{}

// Validate checks the field values on UpdateAccessWorkflowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccessWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccessWorkflowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccessWorkflowResponseMultiError, or nil if none found.
func (m *UpdateAccessWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccessWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccessWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccessWorkflowResponseValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccessWorkflowResponseValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccessWorkflowResponseMultiError(errors)
	}

	return nil
}

// UpdateAccessWorkflowResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAccessWorkflowResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateAccessWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccessWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccessWorkflowResponseMultiError) AllErrors() []error { return m }

// UpdateAccessWorkflowResponseValidationError is the validation error returned
// by UpdateAccessWorkflowResponse.Validate if the designated constraints
// aren't met.
type UpdateAccessWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccessWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccessWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccessWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccessWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccessWorkflowResponseValidationError) ErrorName() string {
	return "UpdateAccessWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccessWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccessWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccessWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccessWorkflowResponseValidationError{}

// Validate checks the field values on DeleteAccessWorkflowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccessWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccessWorkflowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccessWorkflowRequestMultiError, or nil if none found.
func (m *DeleteAccessWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccessWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAccessWorkflowRequestMultiError(errors)
	}

	return nil
}

// DeleteAccessWorkflowRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAccessWorkflowRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteAccessWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccessWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccessWorkflowRequestMultiError) AllErrors() []error { return m }

// DeleteAccessWorkflowRequestValidationError is the validation error returned
// by DeleteAccessWorkflowRequest.Validate if the designated constraints
// aren't met.
type DeleteAccessWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccessWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccessWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccessWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccessWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccessWorkflowRequestValidationError) ErrorName() string {
	return "DeleteAccessWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccessWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccessWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccessWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccessWorkflowRequestValidationError{}

// Validate checks the field values on DeleteAccessWorkflowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccessWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccessWorkflowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccessWorkflowResponseMultiError, or nil if none found.
func (m *DeleteAccessWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccessWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAccessWorkflowResponseMultiError(errors)
	}

	return nil
}

// DeleteAccessWorkflowResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAccessWorkflowResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteAccessWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccessWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccessWorkflowResponseMultiError) AllErrors() []error { return m }

// DeleteAccessWorkflowResponseValidationError is the validation error returned
// by DeleteAccessWorkflowResponse.Validate if the designated constraints
// aren't met.
type DeleteAccessWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccessWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccessWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccessWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccessWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccessWorkflowResponseValidationError) ErrorName() string {
	return "DeleteAccessWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccessWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccessWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccessWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccessWorkflowResponseValidationError{}
