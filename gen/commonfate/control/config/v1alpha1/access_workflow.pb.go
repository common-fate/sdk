// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: commonfate/control/config/v1alpha1/access_workflow.proto

package configv1alpha1

import (
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	_ "github.com/common-fate/sdk/gen/commonfate/authz/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApprovalStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	When string `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
}

func (x *ApprovalStep) Reset() {
	*x = ApprovalStep{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovalStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalStep) ProtoMessage() {}

func (x *ApprovalStep) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalStep.ProtoReflect.Descriptor instead.
func (*ApprovalStep) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{0}
}

func (x *ApprovalStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApprovalStep) GetWhen() string {
	if x != nil {
		return x.When
	}
	return ""
}

type AccessWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AccessDuration         *durationpb.Duration          `protobuf:"bytes,3,opt,name=access_duration,json=accessDuration,proto3" json:"access_duration,omitempty"`
	TryExtendAfter         *durationpb.Duration          `protobuf:"bytes,4,opt,name=try_extend_after,json=tryExtendAfter,proto3" json:"try_extend_after,omitempty"`
	Priority               int32                         `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	ActivationExpiry       *durationpb.Duration          `protobuf:"bytes,6,opt,name=activation_expiry,json=activationExpiry,proto3" json:"activation_expiry,omitempty"`
	DefaultDuration        *durationpb.Duration          `protobuf:"bytes,7,opt,name=default_duration,json=defaultDuration,proto3" json:"default_duration,omitempty"`
	Validation             *ValidationConfig             `protobuf:"bytes,8,opt,name=validation,proto3" json:"validation,omitempty"`
	ExtensionConditions    *v1alpha1.ExtensionConditions `protobuf:"bytes,9,opt,name=extension_conditions,json=extensionConditions,proto3" json:"extension_conditions,omitempty"`
	RequestToApproveExpiry *durationpb.Duration          `protobuf:"bytes,10,opt,name=request_to_approve_expiry,json=requestToApproveExpiry,proto3" json:"request_to_approve_expiry,omitempty"`
	RequestToActiveExpiry  *durationpb.Duration          `protobuf:"bytes,11,opt,name=request_to_active_expiry,json=requestToActiveExpiry,proto3" json:"request_to_active_expiry,omitempty"`
	ApprovalSteps          []*ApprovalStep               `protobuf:"bytes,12,rep,name=approval_steps,json=approvalSteps,proto3" json:"approval_steps,omitempty"`
}

func (x *AccessWorkflow) Reset() {
	*x = AccessWorkflow{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessWorkflow) ProtoMessage() {}

func (x *AccessWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessWorkflow.ProtoReflect.Descriptor instead.
func (*AccessWorkflow) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *AccessWorkflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccessWorkflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessWorkflow) GetAccessDuration() *durationpb.Duration {
	if x != nil {
		return x.AccessDuration
	}
	return nil
}

func (x *AccessWorkflow) GetTryExtendAfter() *durationpb.Duration {
	if x != nil {
		return x.TryExtendAfter
	}
	return nil
}

func (x *AccessWorkflow) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *AccessWorkflow) GetActivationExpiry() *durationpb.Duration {
	if x != nil {
		return x.ActivationExpiry
	}
	return nil
}

func (x *AccessWorkflow) GetDefaultDuration() *durationpb.Duration {
	if x != nil {
		return x.DefaultDuration
	}
	return nil
}

func (x *AccessWorkflow) GetValidation() *ValidationConfig {
	if x != nil {
		return x.Validation
	}
	return nil
}

func (x *AccessWorkflow) GetExtensionConditions() *v1alpha1.ExtensionConditions {
	if x != nil {
		return x.ExtensionConditions
	}
	return nil
}

func (x *AccessWorkflow) GetRequestToApproveExpiry() *durationpb.Duration {
	if x != nil {
		return x.RequestToApproveExpiry
	}
	return nil
}

func (x *AccessWorkflow) GetRequestToActiveExpiry() *durationpb.Duration {
	if x != nil {
		return x.RequestToActiveExpiry
	}
	return nil
}

func (x *AccessWorkflow) GetApprovalSteps() []*ApprovalStep {
	if x != nil {
		return x.ApprovalSteps
	}
	return nil
}

type ValidationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, a reason is required for access.
	HasReason bool `protobuf:"varint,1,opt,name=has_reason,json=hasReason,proto3" json:"has_reason,omitempty"`
	// List of regex patterns that the reason must conform with
	ReasonRegex []*v1alpha1.RegexValidation `protobuf:"bytes,2,rep,name=reason_regex,json=reasonRegex,proto3" json:"reason_regex,omitempty"`
	// If true, a jira ticket attachment is required for access.
	HasJiraTicket bool `protobuf:"varint,3,opt,name=has_jira_ticket,json=hasJiraTicket,proto3" json:"has_jira_ticket,omitempty"`
}

func (x *ValidationConfig) Reset() {
	*x = ValidationConfig{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationConfig) ProtoMessage() {}

func (x *ValidationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationConfig.ProtoReflect.Descriptor instead.
func (*ValidationConfig) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *ValidationConfig) GetHasReason() bool {
	if x != nil {
		return x.HasReason
	}
	return false
}

func (x *ValidationConfig) GetReasonRegex() []*v1alpha1.RegexValidation {
	if x != nil {
		return x.ReasonRegex
	}
	return nil
}

func (x *ValidationConfig) GetHasJiraTicket() bool {
	if x != nil {
		return x.HasJiraTicket
	}
	return false
}

type CreateAccessWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AccessDuration         *durationpb.Duration          `protobuf:"bytes,3,opt,name=access_duration,json=accessDuration,proto3" json:"access_duration,omitempty"`
	TryExtendAfter         *durationpb.Duration          `protobuf:"bytes,4,opt,name=try_extend_after,json=tryExtendAfter,proto3" json:"try_extend_after,omitempty"`
	Priority               int32                         `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	ActivationExpiry       *durationpb.Duration          `protobuf:"bytes,6,opt,name=activation_expiry,json=activationExpiry,proto3" json:"activation_expiry,omitempty"`
	DefaultDuration        *durationpb.Duration          `protobuf:"bytes,7,opt,name=default_duration,json=defaultDuration,proto3" json:"default_duration,omitempty"`
	Validation             *ValidationConfig             `protobuf:"bytes,8,opt,name=validation,proto3" json:"validation,omitempty"`
	ExtensionConditions    *v1alpha1.ExtensionConditions `protobuf:"bytes,9,opt,name=extension_conditions,json=extensionConditions,proto3" json:"extension_conditions,omitempty"`
	RequestToApproveExpiry *durationpb.Duration          `protobuf:"bytes,10,opt,name=request_to_approve_expiry,json=requestToApproveExpiry,proto3" json:"request_to_approve_expiry,omitempty"`
	RequestToActiveExpiry  *durationpb.Duration          `protobuf:"bytes,11,opt,name=request_to_active_expiry,json=requestToActiveExpiry,proto3" json:"request_to_active_expiry,omitempty"`
	ApprovalSteps          []*ApprovalStep               `protobuf:"bytes,12,rep,name=approval_steps,json=approvalSteps,proto3" json:"approval_steps,omitempty"`
}

func (x *CreateAccessWorkflowRequest) Reset() {
	*x = CreateAccessWorkflowRequest{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccessWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessWorkflowRequest) ProtoMessage() {}

func (x *CreateAccessWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CreateAccessWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAccessWorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAccessWorkflowRequest) GetAccessDuration() *durationpb.Duration {
	if x != nil {
		return x.AccessDuration
	}
	return nil
}

func (x *CreateAccessWorkflowRequest) GetTryExtendAfter() *durationpb.Duration {
	if x != nil {
		return x.TryExtendAfter
	}
	return nil
}

func (x *CreateAccessWorkflowRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CreateAccessWorkflowRequest) GetActivationExpiry() *durationpb.Duration {
	if x != nil {
		return x.ActivationExpiry
	}
	return nil
}

func (x *CreateAccessWorkflowRequest) GetDefaultDuration() *durationpb.Duration {
	if x != nil {
		return x.DefaultDuration
	}
	return nil
}

func (x *CreateAccessWorkflowRequest) GetValidation() *ValidationConfig {
	if x != nil {
		return x.Validation
	}
	return nil
}

func (x *CreateAccessWorkflowRequest) GetExtensionConditions() *v1alpha1.ExtensionConditions {
	if x != nil {
		return x.ExtensionConditions
	}
	return nil
}

func (x *CreateAccessWorkflowRequest) GetRequestToApproveExpiry() *durationpb.Duration {
	if x != nil {
		return x.RequestToApproveExpiry
	}
	return nil
}

func (x *CreateAccessWorkflowRequest) GetRequestToActiveExpiry() *durationpb.Duration {
	if x != nil {
		return x.RequestToActiveExpiry
	}
	return nil
}

func (x *CreateAccessWorkflowRequest) GetApprovalSteps() []*ApprovalStep {
	if x != nil {
		return x.ApprovalSteps
	}
	return nil
}

type CreateAccessWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow *AccessWorkflow `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *CreateAccessWorkflowResponse) Reset() {
	*x = CreateAccessWorkflowResponse{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccessWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessWorkflowResponse) ProtoMessage() {}

func (x *CreateAccessWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessWorkflowResponse.ProtoReflect.Descriptor instead.
func (*CreateAccessWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAccessWorkflowResponse) GetWorkflow() *AccessWorkflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type GetAccessWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAccessWorkflowRequest) Reset() {
	*x = GetAccessWorkflowRequest{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccessWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessWorkflowRequest) ProtoMessage() {}

func (x *GetAccessWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetAccessWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *GetAccessWorkflowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAccessWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow *AccessWorkflow `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *GetAccessWorkflowResponse) Reset() {
	*x = GetAccessWorkflowResponse{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccessWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessWorkflowResponse) ProtoMessage() {}

func (x *GetAccessWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessWorkflowResponse.ProtoReflect.Descriptor instead.
func (*GetAccessWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *GetAccessWorkflowResponse) GetWorkflow() *AccessWorkflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type UpdateAccessWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow *AccessWorkflow `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *UpdateAccessWorkflowRequest) Reset() {
	*x = UpdateAccessWorkflowRequest{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAccessWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccessWorkflowRequest) ProtoMessage() {}

func (x *UpdateAccessWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccessWorkflowRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccessWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateAccessWorkflowRequest) GetWorkflow() *AccessWorkflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type UpdateAccessWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow *AccessWorkflow `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *UpdateAccessWorkflowResponse) Reset() {
	*x = UpdateAccessWorkflowResponse{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAccessWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccessWorkflowResponse) ProtoMessage() {}

func (x *UpdateAccessWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccessWorkflowResponse.ProtoReflect.Descriptor instead.
func (*UpdateAccessWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAccessWorkflowResponse) GetWorkflow() *AccessWorkflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type DeleteAccessWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAccessWorkflowRequest) Reset() {
	*x = DeleteAccessWorkflowRequest{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccessWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccessWorkflowRequest) ProtoMessage() {}

func (x *DeleteAccessWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccessWorkflowRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccessWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteAccessWorkflowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteAccessWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAccessWorkflowResponse) Reset() {
	*x = DeleteAccessWorkflowResponse{}
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccessWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccessWorkflowResponse) ProtoMessage() {}

func (x *DeleteAccessWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccessWorkflowResponse.ProtoReflect.Descriptor instead.
func (*DeleteAccessWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteAccessWorkflowResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_commonfate_control_config_v1alpha1_access_workflow_proto protoreflect.FileDescriptor

var file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDesc = []byte{
	0x0a, 0x38, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x35,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x22, 0xa4, 0x06, 0x0a, 0x0e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x72, 0x79,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12,
	0x44, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x14, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x54, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6a, 0x69,
	0x72, 0x61, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x68, 0x61, 0x73, 0x4a, 0x69, 0x72, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xa1,
	0x06, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x72, 0x79,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12,
	0x44, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x14, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x54, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x22, 0x6e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6b,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x6d, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x6e, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0x8a, 0x05, 0x0a, 0x15, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xba, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x42, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x43,
	0xaa, 0x02, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x25, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescOnce sync.Once
	file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescData = file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDesc
)

func file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescGZIP() []byte {
	file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescOnce.Do(func() {
		file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescData)
	})
	return file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDescData
}

var file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_commonfate_control_config_v1alpha1_access_workflow_proto_goTypes = []any{
	(*ApprovalStep)(nil),                 // 0: commonfate.control.config.v1alpha1.ApprovalStep
	(*AccessWorkflow)(nil),               // 1: commonfate.control.config.v1alpha1.AccessWorkflow
	(*ValidationConfig)(nil),             // 2: commonfate.control.config.v1alpha1.ValidationConfig
	(*CreateAccessWorkflowRequest)(nil),  // 3: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest
	(*CreateAccessWorkflowResponse)(nil), // 4: commonfate.control.config.v1alpha1.CreateAccessWorkflowResponse
	(*GetAccessWorkflowRequest)(nil),     // 5: commonfate.control.config.v1alpha1.GetAccessWorkflowRequest
	(*GetAccessWorkflowResponse)(nil),    // 6: commonfate.control.config.v1alpha1.GetAccessWorkflowResponse
	(*UpdateAccessWorkflowRequest)(nil),  // 7: commonfate.control.config.v1alpha1.UpdateAccessWorkflowRequest
	(*UpdateAccessWorkflowResponse)(nil), // 8: commonfate.control.config.v1alpha1.UpdateAccessWorkflowResponse
	(*DeleteAccessWorkflowRequest)(nil),  // 9: commonfate.control.config.v1alpha1.DeleteAccessWorkflowRequest
	(*DeleteAccessWorkflowResponse)(nil), // 10: commonfate.control.config.v1alpha1.DeleteAccessWorkflowResponse
	(*durationpb.Duration)(nil),          // 11: google.protobuf.Duration
	(*v1alpha1.ExtensionConditions)(nil), // 12: commonfate.access.v1alpha1.ExtensionConditions
	(*v1alpha1.RegexValidation)(nil),     // 13: commonfate.access.v1alpha1.RegexValidation
}
var file_commonfate_control_config_v1alpha1_access_workflow_proto_depIdxs = []int32{
	11, // 0: commonfate.control.config.v1alpha1.AccessWorkflow.access_duration:type_name -> google.protobuf.Duration
	11, // 1: commonfate.control.config.v1alpha1.AccessWorkflow.try_extend_after:type_name -> google.protobuf.Duration
	11, // 2: commonfate.control.config.v1alpha1.AccessWorkflow.activation_expiry:type_name -> google.protobuf.Duration
	11, // 3: commonfate.control.config.v1alpha1.AccessWorkflow.default_duration:type_name -> google.protobuf.Duration
	2,  // 4: commonfate.control.config.v1alpha1.AccessWorkflow.validation:type_name -> commonfate.control.config.v1alpha1.ValidationConfig
	12, // 5: commonfate.control.config.v1alpha1.AccessWorkflow.extension_conditions:type_name -> commonfate.access.v1alpha1.ExtensionConditions
	11, // 6: commonfate.control.config.v1alpha1.AccessWorkflow.request_to_approve_expiry:type_name -> google.protobuf.Duration
	11, // 7: commonfate.control.config.v1alpha1.AccessWorkflow.request_to_active_expiry:type_name -> google.protobuf.Duration
	0,  // 8: commonfate.control.config.v1alpha1.AccessWorkflow.approval_steps:type_name -> commonfate.control.config.v1alpha1.ApprovalStep
	13, // 9: commonfate.control.config.v1alpha1.ValidationConfig.reason_regex:type_name -> commonfate.access.v1alpha1.RegexValidation
	11, // 10: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest.access_duration:type_name -> google.protobuf.Duration
	11, // 11: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest.try_extend_after:type_name -> google.protobuf.Duration
	11, // 12: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest.activation_expiry:type_name -> google.protobuf.Duration
	11, // 13: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest.default_duration:type_name -> google.protobuf.Duration
	2,  // 14: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest.validation:type_name -> commonfate.control.config.v1alpha1.ValidationConfig
	12, // 15: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest.extension_conditions:type_name -> commonfate.access.v1alpha1.ExtensionConditions
	11, // 16: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest.request_to_approve_expiry:type_name -> google.protobuf.Duration
	11, // 17: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest.request_to_active_expiry:type_name -> google.protobuf.Duration
	0,  // 18: commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest.approval_steps:type_name -> commonfate.control.config.v1alpha1.ApprovalStep
	1,  // 19: commonfate.control.config.v1alpha1.CreateAccessWorkflowResponse.workflow:type_name -> commonfate.control.config.v1alpha1.AccessWorkflow
	1,  // 20: commonfate.control.config.v1alpha1.GetAccessWorkflowResponse.workflow:type_name -> commonfate.control.config.v1alpha1.AccessWorkflow
	1,  // 21: commonfate.control.config.v1alpha1.UpdateAccessWorkflowRequest.workflow:type_name -> commonfate.control.config.v1alpha1.AccessWorkflow
	1,  // 22: commonfate.control.config.v1alpha1.UpdateAccessWorkflowResponse.workflow:type_name -> commonfate.control.config.v1alpha1.AccessWorkflow
	3,  // 23: commonfate.control.config.v1alpha1.AccessWorkflowService.CreateAccessWorkflow:input_type -> commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest
	5,  // 24: commonfate.control.config.v1alpha1.AccessWorkflowService.GetAccessWorkflow:input_type -> commonfate.control.config.v1alpha1.GetAccessWorkflowRequest
	7,  // 25: commonfate.control.config.v1alpha1.AccessWorkflowService.UpdateAccessWorkflow:input_type -> commonfate.control.config.v1alpha1.UpdateAccessWorkflowRequest
	9,  // 26: commonfate.control.config.v1alpha1.AccessWorkflowService.DeleteAccessWorkflow:input_type -> commonfate.control.config.v1alpha1.DeleteAccessWorkflowRequest
	4,  // 27: commonfate.control.config.v1alpha1.AccessWorkflowService.CreateAccessWorkflow:output_type -> commonfate.control.config.v1alpha1.CreateAccessWorkflowResponse
	6,  // 28: commonfate.control.config.v1alpha1.AccessWorkflowService.GetAccessWorkflow:output_type -> commonfate.control.config.v1alpha1.GetAccessWorkflowResponse
	8,  // 29: commonfate.control.config.v1alpha1.AccessWorkflowService.UpdateAccessWorkflow:output_type -> commonfate.control.config.v1alpha1.UpdateAccessWorkflowResponse
	10, // 30: commonfate.control.config.v1alpha1.AccessWorkflowService.DeleteAccessWorkflow:output_type -> commonfate.control.config.v1alpha1.DeleteAccessWorkflowResponse
	27, // [27:31] is the sub-list for method output_type
	23, // [23:27] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_commonfate_control_config_v1alpha1_access_workflow_proto_init() }
func file_commonfate_control_config_v1alpha1_access_workflow_proto_init() {
	if File_commonfate_control_config_v1alpha1_access_workflow_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commonfate_control_config_v1alpha1_access_workflow_proto_goTypes,
		DependencyIndexes: file_commonfate_control_config_v1alpha1_access_workflow_proto_depIdxs,
		MessageInfos:      file_commonfate_control_config_v1alpha1_access_workflow_proto_msgTypes,
	}.Build()
	File_commonfate_control_config_v1alpha1_access_workflow_proto = out.File
	file_commonfate_control_config_v1alpha1_access_workflow_proto_rawDesc = nil
	file_commonfate_control_config_v1alpha1_access_workflow_proto_goTypes = nil
	file_commonfate_control_config_v1alpha1_access_workflow_proto_depIdxs = nil
}
