// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/config/v1alpha1/webhook_provisioner.proto

package configv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Capability with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Capability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Capability with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CapabilityMultiError, or
// nil if none found.
func (m *Capability) ValidateAll() error {
	return m.validate(true)
}

func (m *Capability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetType

	// no validation rules for RoleType

	if all {
		switch v := interface{}(m.GetBelongingTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CapabilityValidationError{
					field:  "BelongingTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CapabilityValidationError{
					field:  "BelongingTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBelongingTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CapabilityValidationError{
				field:  "BelongingTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CapabilityMultiError(errors)
	}

	return nil
}

// CapabilityMultiError is an error wrapping multiple validation errors
// returned by Capability.ValidateAll() if the designated constraints aren't met.
type CapabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapabilityMultiError) AllErrors() []error { return m }

// CapabilityValidationError is the validation error returned by
// Capability.Validate if the designated constraints aren't met.
type CapabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapabilityValidationError) ErrorName() string { return "CapabilityValidationError" }

// Error satisfies the builtin error interface
func (e CapabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapabilityValidationError{}

// Validate checks the field values on CreateWebhookProvisionerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWebhookProvisionerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWebhookProvisionerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWebhookProvisionerRequestMultiError, or nil if none found.
func (m *CreateWebhookProvisionerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWebhookProvisionerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	for idx, item := range m.GetCapabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateWebhookProvisionerRequestValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateWebhookProvisionerRequestValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateWebhookProvisionerRequestValidationError{
					field:  fmt.Sprintf("Capabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateWebhookProvisionerRequestMultiError(errors)
	}

	return nil
}

// CreateWebhookProvisionerRequestMultiError is an error wrapping multiple
// validation errors returned by CreateWebhookProvisionerRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateWebhookProvisionerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWebhookProvisionerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWebhookProvisionerRequestMultiError) AllErrors() []error { return m }

// CreateWebhookProvisionerRequestValidationError is the validation error
// returned by CreateWebhookProvisionerRequest.Validate if the designated
// constraints aren't met.
type CreateWebhookProvisionerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWebhookProvisionerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWebhookProvisionerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWebhookProvisionerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWebhookProvisionerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWebhookProvisionerRequestValidationError) ErrorName() string {
	return "CreateWebhookProvisionerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWebhookProvisionerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWebhookProvisionerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWebhookProvisionerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWebhookProvisionerRequestValidationError{}

// Validate checks the field values on WebhookProvisioner with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WebhookProvisioner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebhookProvisioner with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebhookProvisionerMultiError, or nil if none found.
func (m *WebhookProvisioner) ValidateAll() error {
	return m.validate(true)
}

func (m *WebhookProvisioner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	for idx, item := range m.GetCapabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebhookProvisionerValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebhookProvisionerValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebhookProvisionerValidationError{
					field:  fmt.Sprintf("Capabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WebhookProvisionerMultiError(errors)
	}

	return nil
}

// WebhookProvisionerMultiError is an error wrapping multiple validation errors
// returned by WebhookProvisioner.ValidateAll() if the designated constraints
// aren't met.
type WebhookProvisionerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebhookProvisionerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebhookProvisionerMultiError) AllErrors() []error { return m }

// WebhookProvisionerValidationError is the validation error returned by
// WebhookProvisioner.Validate if the designated constraints aren't met.
type WebhookProvisionerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookProvisionerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookProvisionerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookProvisionerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookProvisionerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookProvisionerValidationError) ErrorName() string {
	return "WebhookProvisionerValidationError"
}

// Error satisfies the builtin error interface
func (e WebhookProvisionerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookProvisioner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookProvisionerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookProvisionerValidationError{}

// Validate checks the field values on CreateWebhookProvisionerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateWebhookProvisionerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWebhookProvisionerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWebhookProvisionerResponseMultiError, or nil if none found.
func (m *CreateWebhookProvisionerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWebhookProvisionerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWebhookProvisioner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWebhookProvisionerResponseValidationError{
					field:  "WebhookProvisioner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWebhookProvisionerResponseValidationError{
					field:  "WebhookProvisioner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhookProvisioner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWebhookProvisionerResponseValidationError{
				field:  "WebhookProvisioner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDiagnostics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateWebhookProvisionerResponseValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateWebhookProvisionerResponseValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateWebhookProvisionerResponseValidationError{
					field:  fmt.Sprintf("Diagnostics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateWebhookProvisionerResponseMultiError(errors)
	}

	return nil
}

// CreateWebhookProvisionerResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateWebhookProvisionerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWebhookProvisionerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWebhookProvisionerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWebhookProvisionerResponseMultiError) AllErrors() []error { return m }

// CreateWebhookProvisionerResponseValidationError is the validation error
// returned by CreateWebhookProvisionerResponse.Validate if the designated
// constraints aren't met.
type CreateWebhookProvisionerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWebhookProvisionerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWebhookProvisionerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWebhookProvisionerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWebhookProvisionerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWebhookProvisionerResponseValidationError) ErrorName() string {
	return "CreateWebhookProvisionerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWebhookProvisionerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWebhookProvisionerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWebhookProvisionerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWebhookProvisionerResponseValidationError{}

// Validate checks the field values on GetWebhookProvisionerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWebhookProvisionerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWebhookProvisionerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWebhookProvisionerRequestMultiError, or nil if none found.
func (m *GetWebhookProvisionerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWebhookProvisionerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetWebhookProvisionerRequestMultiError(errors)
	}

	return nil
}

// GetWebhookProvisionerRequestMultiError is an error wrapping multiple
// validation errors returned by GetWebhookProvisionerRequest.ValidateAll() if
// the designated constraints aren't met.
type GetWebhookProvisionerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWebhookProvisionerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWebhookProvisionerRequestMultiError) AllErrors() []error { return m }

// GetWebhookProvisionerRequestValidationError is the validation error returned
// by GetWebhookProvisionerRequest.Validate if the designated constraints
// aren't met.
type GetWebhookProvisionerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWebhookProvisionerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWebhookProvisionerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWebhookProvisionerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWebhookProvisionerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWebhookProvisionerRequestValidationError) ErrorName() string {
	return "GetWebhookProvisionerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWebhookProvisionerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWebhookProvisionerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWebhookProvisionerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWebhookProvisionerRequestValidationError{}

// Validate checks the field values on GetWebhookProvisionerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWebhookProvisionerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWebhookProvisionerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWebhookProvisionerResponseMultiError, or nil if none found.
func (m *GetWebhookProvisionerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWebhookProvisionerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWebhookProvisioner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWebhookProvisionerResponseValidationError{
					field:  "WebhookProvisioner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWebhookProvisionerResponseValidationError{
					field:  "WebhookProvisioner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhookProvisioner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWebhookProvisionerResponseValidationError{
				field:  "WebhookProvisioner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWebhookProvisionerResponseMultiError(errors)
	}

	return nil
}

// GetWebhookProvisionerResponseMultiError is an error wrapping multiple
// validation errors returned by GetWebhookProvisionerResponse.ValidateAll()
// if the designated constraints aren't met.
type GetWebhookProvisionerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWebhookProvisionerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWebhookProvisionerResponseMultiError) AllErrors() []error { return m }

// GetWebhookProvisionerResponseValidationError is the validation error
// returned by GetWebhookProvisionerResponse.Validate if the designated
// constraints aren't met.
type GetWebhookProvisionerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWebhookProvisionerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWebhookProvisionerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWebhookProvisionerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWebhookProvisionerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWebhookProvisionerResponseValidationError) ErrorName() string {
	return "GetWebhookProvisionerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWebhookProvisionerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWebhookProvisionerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWebhookProvisionerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWebhookProvisionerResponseValidationError{}

// Validate checks the field values on UpdateWebhookProvisionerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWebhookProvisionerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWebhookProvisionerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWebhookProvisionerRequestMultiError, or nil if none found.
func (m *UpdateWebhookProvisionerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWebhookProvisionerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWebhookProvisioner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWebhookProvisionerRequestValidationError{
					field:  "WebhookProvisioner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWebhookProvisionerRequestValidationError{
					field:  "WebhookProvisioner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhookProvisioner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWebhookProvisionerRequestValidationError{
				field:  "WebhookProvisioner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWebhookProvisionerRequestMultiError(errors)
	}

	return nil
}

// UpdateWebhookProvisionerRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWebhookProvisionerRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateWebhookProvisionerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWebhookProvisionerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWebhookProvisionerRequestMultiError) AllErrors() []error { return m }

// UpdateWebhookProvisionerRequestValidationError is the validation error
// returned by UpdateWebhookProvisionerRequest.Validate if the designated
// constraints aren't met.
type UpdateWebhookProvisionerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWebhookProvisionerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWebhookProvisionerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWebhookProvisionerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWebhookProvisionerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWebhookProvisionerRequestValidationError) ErrorName() string {
	return "UpdateWebhookProvisionerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWebhookProvisionerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWebhookProvisionerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWebhookProvisionerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWebhookProvisionerRequestValidationError{}

// Validate checks the field values on UpdateWebhookProvisionerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateWebhookProvisionerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWebhookProvisionerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWebhookProvisionerResponseMultiError, or nil if none found.
func (m *UpdateWebhookProvisionerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWebhookProvisionerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWebhookProvisioner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWebhookProvisionerResponseValidationError{
					field:  "WebhookProvisioner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWebhookProvisionerResponseValidationError{
					field:  "WebhookProvisioner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhookProvisioner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWebhookProvisionerResponseValidationError{
				field:  "WebhookProvisioner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDiagnostics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateWebhookProvisionerResponseValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateWebhookProvisionerResponseValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateWebhookProvisionerResponseValidationError{
					field:  fmt.Sprintf("Diagnostics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateWebhookProvisionerResponseMultiError(errors)
	}

	return nil
}

// UpdateWebhookProvisionerResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateWebhookProvisionerResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWebhookProvisionerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWebhookProvisionerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWebhookProvisionerResponseMultiError) AllErrors() []error { return m }

// UpdateWebhookProvisionerResponseValidationError is the validation error
// returned by UpdateWebhookProvisionerResponse.Validate if the designated
// constraints aren't met.
type UpdateWebhookProvisionerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWebhookProvisionerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWebhookProvisionerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWebhookProvisionerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWebhookProvisionerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWebhookProvisionerResponseValidationError) ErrorName() string {
	return "UpdateWebhookProvisionerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWebhookProvisionerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWebhookProvisionerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWebhookProvisionerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWebhookProvisionerResponseValidationError{}

// Validate checks the field values on DeleteWebhookProvisionerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWebhookProvisionerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWebhookProvisionerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteWebhookProvisionerRequestMultiError, or nil if none found.
func (m *DeleteWebhookProvisionerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWebhookProvisionerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteWebhookProvisionerRequestMultiError(errors)
	}

	return nil
}

// DeleteWebhookProvisionerRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteWebhookProvisionerRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteWebhookProvisionerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWebhookProvisionerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWebhookProvisionerRequestMultiError) AllErrors() []error { return m }

// DeleteWebhookProvisionerRequestValidationError is the validation error
// returned by DeleteWebhookProvisionerRequest.Validate if the designated
// constraints aren't met.
type DeleteWebhookProvisionerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWebhookProvisionerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWebhookProvisionerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWebhookProvisionerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWebhookProvisionerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWebhookProvisionerRequestValidationError) ErrorName() string {
	return "DeleteWebhookProvisionerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWebhookProvisionerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWebhookProvisionerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWebhookProvisionerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWebhookProvisionerRequestValidationError{}

// Validate checks the field values on DeleteWebhookProvisionerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteWebhookProvisionerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWebhookProvisionerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteWebhookProvisionerResponseMultiError, or nil if none found.
func (m *DeleteWebhookProvisionerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWebhookProvisionerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteWebhookProvisionerResponseMultiError(errors)
	}

	return nil
}

// DeleteWebhookProvisionerResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteWebhookProvisionerResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteWebhookProvisionerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWebhookProvisionerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWebhookProvisionerResponseMultiError) AllErrors() []error { return m }

// DeleteWebhookProvisionerResponseValidationError is the validation error
// returned by DeleteWebhookProvisionerResponse.Validate if the designated
// constraints aren't met.
type DeleteWebhookProvisionerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWebhookProvisionerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWebhookProvisionerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWebhookProvisionerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWebhookProvisionerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWebhookProvisionerResponseValidationError) ErrorName() string {
	return "DeleteWebhookProvisionerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWebhookProvisionerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWebhookProvisionerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWebhookProvisionerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWebhookProvisionerResponseValidationError{}
