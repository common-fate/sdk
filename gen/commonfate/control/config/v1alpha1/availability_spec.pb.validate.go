// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/config/v1alpha1/availability_spec.proto

package configv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AvailabilitySpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AvailabilitySpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvailabilitySpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AvailabilitySpecMultiError, or nil if none found.
func (m *AvailabilitySpec) ValidateAll() error {
	return m.validate(true)
}

func (m *AvailabilitySpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilitySpecValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilitySpecValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilitySpecValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilitySpecValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilitySpecValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilitySpecValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentityDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilitySpecValidationError{
					field:  "IdentityDomain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilitySpecValidationError{
					field:  "IdentityDomain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentityDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilitySpecValidationError{
				field:  "IdentityDomain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AvailabilitySpecMultiError(errors)
	}

	return nil
}

// AvailabilitySpecMultiError is an error wrapping multiple validation errors
// returned by AvailabilitySpec.ValidateAll() if the designated constraints
// aren't met.
type AvailabilitySpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvailabilitySpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvailabilitySpecMultiError) AllErrors() []error { return m }

// AvailabilitySpecValidationError is the validation error returned by
// AvailabilitySpec.Validate if the designated constraints aren't met.
type AvailabilitySpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailabilitySpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailabilitySpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailabilitySpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailabilitySpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailabilitySpecValidationError) ErrorName() string { return "AvailabilitySpecValidationError" }

// Error satisfies the builtin error interface
func (e AvailabilitySpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailabilitySpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailabilitySpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailabilitySpecValidationError{}

// Validate checks the field values on CreateAvailabilitySpecRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAvailabilitySpecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAvailabilitySpecRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAvailabilitySpecRequestMultiError, or nil if none found.
func (m *CreateAvailabilitySpecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAvailabilitySpecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAvailabilitySpecRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAvailabilitySpecRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAvailabilitySpecRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAvailabilitySpecRequestValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAvailabilitySpecRequestValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAvailabilitySpecRequestValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentityDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAvailabilitySpecRequestValidationError{
					field:  "IdentityDomain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAvailabilitySpecRequestValidationError{
					field:  "IdentityDomain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentityDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAvailabilitySpecRequestValidationError{
				field:  "IdentityDomain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAvailabilitySpecRequestMultiError(errors)
	}

	return nil
}

// CreateAvailabilitySpecRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAvailabilitySpecRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateAvailabilitySpecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAvailabilitySpecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAvailabilitySpecRequestMultiError) AllErrors() []error { return m }

// CreateAvailabilitySpecRequestValidationError is the validation error
// returned by CreateAvailabilitySpecRequest.Validate if the designated
// constraints aren't met.
type CreateAvailabilitySpecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAvailabilitySpecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAvailabilitySpecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAvailabilitySpecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAvailabilitySpecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAvailabilitySpecRequestValidationError) ErrorName() string {
	return "CreateAvailabilitySpecRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAvailabilitySpecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAvailabilitySpecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAvailabilitySpecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAvailabilitySpecRequestValidationError{}

// Validate checks the field values on CreateAvailabilitySpecResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAvailabilitySpecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAvailabilitySpecResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAvailabilitySpecResponseMultiError, or nil if none found.
func (m *CreateAvailabilitySpecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAvailabilitySpecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAvailabilitySpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAvailabilitySpecResponseValidationError{
					field:  "AvailabilitySpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAvailabilitySpecResponseValidationError{
					field:  "AvailabilitySpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailabilitySpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAvailabilitySpecResponseValidationError{
				field:  "AvailabilitySpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAvailabilitySpecResponseMultiError(errors)
	}

	return nil
}

// CreateAvailabilitySpecResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAvailabilitySpecResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateAvailabilitySpecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAvailabilitySpecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAvailabilitySpecResponseMultiError) AllErrors() []error { return m }

// CreateAvailabilitySpecResponseValidationError is the validation error
// returned by CreateAvailabilitySpecResponse.Validate if the designated
// constraints aren't met.
type CreateAvailabilitySpecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAvailabilitySpecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAvailabilitySpecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAvailabilitySpecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAvailabilitySpecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAvailabilitySpecResponseValidationError) ErrorName() string {
	return "CreateAvailabilitySpecResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAvailabilitySpecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAvailabilitySpecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAvailabilitySpecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAvailabilitySpecResponseValidationError{}

// Validate checks the field values on GetAvailabilitySpecRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailabilitySpecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailabilitySpecRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailabilitySpecRequestMultiError, or nil if none found.
func (m *GetAvailabilitySpecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailabilitySpecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAvailabilitySpecRequestMultiError(errors)
	}

	return nil
}

// GetAvailabilitySpecRequestMultiError is an error wrapping multiple
// validation errors returned by GetAvailabilitySpecRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAvailabilitySpecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailabilitySpecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailabilitySpecRequestMultiError) AllErrors() []error { return m }

// GetAvailabilitySpecRequestValidationError is the validation error returned
// by GetAvailabilitySpecRequest.Validate if the designated constraints aren't met.
type GetAvailabilitySpecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailabilitySpecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailabilitySpecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailabilitySpecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailabilitySpecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailabilitySpecRequestValidationError) ErrorName() string {
	return "GetAvailabilitySpecRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailabilitySpecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailabilitySpecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailabilitySpecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailabilitySpecRequestValidationError{}

// Validate checks the field values on GetAvailabilitySpecResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvailabilitySpecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvailabilitySpecResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvailabilitySpecResponseMultiError, or nil if none found.
func (m *GetAvailabilitySpecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvailabilitySpecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAvailabilitySpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAvailabilitySpecResponseValidationError{
					field:  "AvailabilitySpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAvailabilitySpecResponseValidationError{
					field:  "AvailabilitySpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailabilitySpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAvailabilitySpecResponseValidationError{
				field:  "AvailabilitySpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAvailabilitySpecResponseMultiError(errors)
	}

	return nil
}

// GetAvailabilitySpecResponseMultiError is an error wrapping multiple
// validation errors returned by GetAvailabilitySpecResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAvailabilitySpecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvailabilitySpecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvailabilitySpecResponseMultiError) AllErrors() []error { return m }

// GetAvailabilitySpecResponseValidationError is the validation error returned
// by GetAvailabilitySpecResponse.Validate if the designated constraints
// aren't met.
type GetAvailabilitySpecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailabilitySpecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailabilitySpecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailabilitySpecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailabilitySpecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailabilitySpecResponseValidationError) ErrorName() string {
	return "GetAvailabilitySpecResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailabilitySpecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailabilitySpecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailabilitySpecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailabilitySpecResponseValidationError{}

// Validate checks the field values on UpdateAvailabilitySpecRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAvailabilitySpecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAvailabilitySpecRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAvailabilitySpecRequestMultiError, or nil if none found.
func (m *UpdateAvailabilitySpecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAvailabilitySpecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAvailabilitySpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAvailabilitySpecRequestValidationError{
					field:  "AvailabilitySpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAvailabilitySpecRequestValidationError{
					field:  "AvailabilitySpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailabilitySpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAvailabilitySpecRequestValidationError{
				field:  "AvailabilitySpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAvailabilitySpecRequestMultiError(errors)
	}

	return nil
}

// UpdateAvailabilitySpecRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAvailabilitySpecRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAvailabilitySpecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAvailabilitySpecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAvailabilitySpecRequestMultiError) AllErrors() []error { return m }

// UpdateAvailabilitySpecRequestValidationError is the validation error
// returned by UpdateAvailabilitySpecRequest.Validate if the designated
// constraints aren't met.
type UpdateAvailabilitySpecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAvailabilitySpecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAvailabilitySpecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAvailabilitySpecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAvailabilitySpecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAvailabilitySpecRequestValidationError) ErrorName() string {
	return "UpdateAvailabilitySpecRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAvailabilitySpecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAvailabilitySpecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAvailabilitySpecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAvailabilitySpecRequestValidationError{}

// Validate checks the field values on UpdateAvailabilitySpecResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAvailabilitySpecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAvailabilitySpecResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAvailabilitySpecResponseMultiError, or nil if none found.
func (m *UpdateAvailabilitySpecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAvailabilitySpecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAvailabilitySpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAvailabilitySpecResponseValidationError{
					field:  "AvailabilitySpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAvailabilitySpecResponseValidationError{
					field:  "AvailabilitySpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailabilitySpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAvailabilitySpecResponseValidationError{
				field:  "AvailabilitySpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAvailabilitySpecResponseMultiError(errors)
	}

	return nil
}

// UpdateAvailabilitySpecResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAvailabilitySpecResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateAvailabilitySpecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAvailabilitySpecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAvailabilitySpecResponseMultiError) AllErrors() []error { return m }

// UpdateAvailabilitySpecResponseValidationError is the validation error
// returned by UpdateAvailabilitySpecResponse.Validate if the designated
// constraints aren't met.
type UpdateAvailabilitySpecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAvailabilitySpecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAvailabilitySpecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAvailabilitySpecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAvailabilitySpecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAvailabilitySpecResponseValidationError) ErrorName() string {
	return "UpdateAvailabilitySpecResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAvailabilitySpecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAvailabilitySpecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAvailabilitySpecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAvailabilitySpecResponseValidationError{}

// Validate checks the field values on DeleteAvailabilitySpecRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAvailabilitySpecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAvailabilitySpecRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAvailabilitySpecRequestMultiError, or nil if none found.
func (m *DeleteAvailabilitySpecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAvailabilitySpecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAvailabilitySpecRequestMultiError(errors)
	}

	return nil
}

// DeleteAvailabilitySpecRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAvailabilitySpecRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteAvailabilitySpecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAvailabilitySpecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAvailabilitySpecRequestMultiError) AllErrors() []error { return m }

// DeleteAvailabilitySpecRequestValidationError is the validation error
// returned by DeleteAvailabilitySpecRequest.Validate if the designated
// constraints aren't met.
type DeleteAvailabilitySpecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAvailabilitySpecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAvailabilitySpecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAvailabilitySpecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAvailabilitySpecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAvailabilitySpecRequestValidationError) ErrorName() string {
	return "DeleteAvailabilitySpecRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAvailabilitySpecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAvailabilitySpecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAvailabilitySpecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAvailabilitySpecRequestValidationError{}

// Validate checks the field values on DeleteAvailabilitySpecResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAvailabilitySpecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAvailabilitySpecResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAvailabilitySpecResponseMultiError, or nil if none found.
func (m *DeleteAvailabilitySpecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAvailabilitySpecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAvailabilitySpecResponseMultiError(errors)
	}

	return nil
}

// DeleteAvailabilitySpecResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAvailabilitySpecResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteAvailabilitySpecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAvailabilitySpecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAvailabilitySpecResponseMultiError) AllErrors() []error { return m }

// DeleteAvailabilitySpecResponseValidationError is the validation error
// returned by DeleteAvailabilitySpecResponse.Validate if the designated
// constraints aren't met.
type DeleteAvailabilitySpecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAvailabilitySpecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAvailabilitySpecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAvailabilitySpecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAvailabilitySpecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAvailabilitySpecResponseValidationError) ErrorName() string {
	return "DeleteAvailabilitySpecResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAvailabilitySpecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAvailabilitySpecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAvailabilitySpecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAvailabilitySpecResponseValidationError{}
