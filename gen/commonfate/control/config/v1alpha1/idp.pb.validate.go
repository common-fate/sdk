// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/config/v1alpha1/idp.proto

package configv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateIDPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateIDPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIDPRequestMultiError, or nil if none found.
func (m *CreateIDPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIDPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if len(errors) > 0 {
		return CreateIDPRequestMultiError(errors)
	}

	return nil
}

// CreateIDPRequestMultiError is an error wrapping multiple validation errors
// returned by CreateIDPRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateIDPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIDPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIDPRequestMultiError) AllErrors() []error { return m }

// CreateIDPRequestValidationError is the validation error returned by
// CreateIDPRequest.Validate if the designated constraints aren't met.
type CreateIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIDPRequestValidationError) ErrorName() string { return "CreateIDPRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIDPRequestValidationError{}

// Validate checks the field values on CreateIDPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateIDPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIDPResponseMultiError, or nil if none found.
func (m *CreateIDPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIDPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Namespace

	if len(errors) > 0 {
		return CreateIDPResponseMultiError(errors)
	}

	return nil
}

// CreateIDPResponseMultiError is an error wrapping multiple validation errors
// returned by CreateIDPResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateIDPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIDPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIDPResponseMultiError) AllErrors() []error { return m }

// CreateIDPResponseValidationError is the validation error returned by
// CreateIDPResponse.Validate if the designated constraints aren't met.
type CreateIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIDPResponseValidationError) ErrorName() string {
	return "CreateIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIDPResponseValidationError{}

// Validate checks the field values on ReadIDPRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadIDPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadIDPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadIDPRequestMultiError,
// or nil if none found.
func (m *ReadIDPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadIDPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ReadIDPRequestMultiError(errors)
	}

	return nil
}

// ReadIDPRequestMultiError is an error wrapping multiple validation errors
// returned by ReadIDPRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadIDPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadIDPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadIDPRequestMultiError) AllErrors() []error { return m }

// ReadIDPRequestValidationError is the validation error returned by
// ReadIDPRequest.Validate if the designated constraints aren't met.
type ReadIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadIDPRequestValidationError) ErrorName() string { return "ReadIDPRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadIDPRequestValidationError{}

// Validate checks the field values on ReadIDPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadIDPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadIDPResponseMultiError, or nil if none found.
func (m *ReadIDPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadIDPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ReadIDPResponseMultiError(errors)
	}

	return nil
}

// ReadIDPResponseMultiError is an error wrapping multiple validation errors
// returned by ReadIDPResponse.ValidateAll() if the designated constraints
// aren't met.
type ReadIDPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadIDPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadIDPResponseMultiError) AllErrors() []error { return m }

// ReadIDPResponseValidationError is the validation error returned by
// ReadIDPResponse.Validate if the designated constraints aren't met.
type ReadIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadIDPResponseValidationError) ErrorName() string { return "ReadIDPResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReadIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadIDPResponseValidationError{}

// Validate checks the field values on UpdateIDPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateIDPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIDPRequestMultiError, or nil if none found.
func (m *UpdateIDPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIDPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Namespace

	if len(errors) > 0 {
		return UpdateIDPRequestMultiError(errors)
	}

	return nil
}

// UpdateIDPRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateIDPRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateIDPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIDPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIDPRequestMultiError) AllErrors() []error { return m }

// UpdateIDPRequestValidationError is the validation error returned by
// UpdateIDPRequest.Validate if the designated constraints aren't met.
type UpdateIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPRequestValidationError) ErrorName() string { return "UpdateIDPRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPRequestValidationError{}

// Validate checks the field values on UpdateIDPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateIDPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIDPResponseMultiError, or nil if none found.
func (m *UpdateIDPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIDPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Namespace

	if len(errors) > 0 {
		return UpdateIDPResponseMultiError(errors)
	}

	return nil
}

// UpdateIDPResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateIDPResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateIDPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIDPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIDPResponseMultiError) AllErrors() []error { return m }

// UpdateIDPResponseValidationError is the validation error returned by
// UpdateIDPResponse.Validate if the designated constraints aren't met.
type UpdateIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPResponseValidationError) ErrorName() string {
	return "UpdateIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPResponseValidationError{}

// Validate checks the field values on DeleteIDPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteIDPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIDPRequestMultiError, or nil if none found.
func (m *DeleteIDPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIDPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteIDPRequestMultiError(errors)
	}

	return nil
}

// DeleteIDPRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteIDPRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteIDPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIDPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIDPRequestMultiError) AllErrors() []error { return m }

// DeleteIDPRequestValidationError is the validation error returned by
// DeleteIDPRequest.Validate if the designated constraints aren't met.
type DeleteIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIDPRequestValidationError) ErrorName() string { return "DeleteIDPRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIDPRequestValidationError{}

// Validate checks the field values on DeleteIDPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteIDPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIDPResponseMultiError, or nil if none found.
func (m *DeleteIDPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIDPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteIDPResponseMultiError(errors)
	}

	return nil
}

// DeleteIDPResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteIDPResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteIDPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIDPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIDPResponseMultiError) AllErrors() []error { return m }

// DeleteIDPResponseValidationError is the validation error returned by
// DeleteIDPResponse.Validate if the designated constraints aren't met.
type DeleteIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIDPResponseValidationError) ErrorName() string {
	return "DeleteIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIDPResponseValidationError{}
