// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/config/v1alpha1/eks_access_entry_template.proto

package configv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateEKSAccessEntryTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEKSAccessEntryTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEKSAccessEntryTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateEKSAccessEntryTemplateRequestMultiError, or nil if none found.
func (m *CreateEKSAccessEntryTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEKSAccessEntryTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEKSAccessEntryTemplateRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEKSAccessEntryTemplateRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEKSAccessEntryTemplateRequestValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetClusterAccessPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEKSAccessEntryTemplateRequestValidationError{
						field:  fmt.Sprintf("ClusterAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEKSAccessEntryTemplateRequestValidationError{
						field:  fmt.Sprintf("ClusterAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEKSAccessEntryTemplateRequestValidationError{
					field:  fmt.Sprintf("ClusterAccessPolicies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNamespaceAccessPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEKSAccessEntryTemplateRequestValidationError{
						field:  fmt.Sprintf("NamespaceAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEKSAccessEntryTemplateRequestValidationError{
						field:  fmt.Sprintf("NamespaceAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEKSAccessEntryTemplateRequestValidationError{
					field:  fmt.Sprintf("NamespaceAccessPolicies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateEKSAccessEntryTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateEKSAccessEntryTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateEKSAccessEntryTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEKSAccessEntryTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEKSAccessEntryTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEKSAccessEntryTemplateRequestMultiError) AllErrors() []error { return m }

// CreateEKSAccessEntryTemplateRequestValidationError is the validation error
// returned by CreateEKSAccessEntryTemplateRequest.Validate if the designated
// constraints aren't met.
type CreateEKSAccessEntryTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEKSAccessEntryTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEKSAccessEntryTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEKSAccessEntryTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEKSAccessEntryTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEKSAccessEntryTemplateRequestValidationError) ErrorName() string {
	return "CreateEKSAccessEntryTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEKSAccessEntryTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEKSAccessEntryTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEKSAccessEntryTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEKSAccessEntryTemplateRequestValidationError{}

// Validate checks the field values on EKSClusterAccessPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EKSClusterAccessPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EKSClusterAccessPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EKSClusterAccessPolicyMultiError, or nil if none found.
func (m *EKSClusterAccessPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *EKSClusterAccessPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyArn

	if len(errors) > 0 {
		return EKSClusterAccessPolicyMultiError(errors)
	}

	return nil
}

// EKSClusterAccessPolicyMultiError is an error wrapping multiple validation
// errors returned by EKSClusterAccessPolicy.ValidateAll() if the designated
// constraints aren't met.
type EKSClusterAccessPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EKSClusterAccessPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EKSClusterAccessPolicyMultiError) AllErrors() []error { return m }

// EKSClusterAccessPolicyValidationError is the validation error returned by
// EKSClusterAccessPolicy.Validate if the designated constraints aren't met.
type EKSClusterAccessPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EKSClusterAccessPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EKSClusterAccessPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EKSClusterAccessPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EKSClusterAccessPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EKSClusterAccessPolicyValidationError) ErrorName() string {
	return "EKSClusterAccessPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e EKSClusterAccessPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEKSClusterAccessPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EKSClusterAccessPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EKSClusterAccessPolicyValidationError{}

// Validate checks the field values on EKSNamespaceAccessPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EKSNamespaceAccessPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EKSNamespaceAccessPolicy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EKSNamespaceAccessPolicyMultiError, or nil if none found.
func (m *EKSNamespaceAccessPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *EKSNamespaceAccessPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyArn

	if len(errors) > 0 {
		return EKSNamespaceAccessPolicyMultiError(errors)
	}

	return nil
}

// EKSNamespaceAccessPolicyMultiError is an error wrapping multiple validation
// errors returned by EKSNamespaceAccessPolicy.ValidateAll() if the designated
// constraints aren't met.
type EKSNamespaceAccessPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EKSNamespaceAccessPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EKSNamespaceAccessPolicyMultiError) AllErrors() []error { return m }

// EKSNamespaceAccessPolicyValidationError is the validation error returned by
// EKSNamespaceAccessPolicy.Validate if the designated constraints aren't met.
type EKSNamespaceAccessPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EKSNamespaceAccessPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EKSNamespaceAccessPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EKSNamespaceAccessPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EKSNamespaceAccessPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EKSNamespaceAccessPolicyValidationError) ErrorName() string {
	return "EKSNamespaceAccessPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e EKSNamespaceAccessPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEKSNamespaceAccessPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EKSNamespaceAccessPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EKSNamespaceAccessPolicyValidationError{}

// Validate checks the field values on EKSAccessEntryTag with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EKSAccessEntryTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EKSAccessEntryTag with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EKSAccessEntryTagMultiError, or nil if none found.
func (m *EKSAccessEntryTag) ValidateAll() error {
	return m.validate(true)
}

func (m *EKSAccessEntryTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return EKSAccessEntryTagMultiError(errors)
	}

	return nil
}

// EKSAccessEntryTagMultiError is an error wrapping multiple validation errors
// returned by EKSAccessEntryTag.ValidateAll() if the designated constraints
// aren't met.
type EKSAccessEntryTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EKSAccessEntryTagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EKSAccessEntryTagMultiError) AllErrors() []error { return m }

// EKSAccessEntryTagValidationError is the validation error returned by
// EKSAccessEntryTag.Validate if the designated constraints aren't met.
type EKSAccessEntryTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EKSAccessEntryTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EKSAccessEntryTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EKSAccessEntryTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EKSAccessEntryTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EKSAccessEntryTagValidationError) ErrorName() string {
	return "EKSAccessEntryTagValidationError"
}

// Error satisfies the builtin error interface
func (e EKSAccessEntryTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEKSAccessEntryTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EKSAccessEntryTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EKSAccessEntryTagValidationError{}

// Validate checks the field values on EKSAccessEntryTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EKSAccessEntryTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EKSAccessEntryTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EKSAccessEntryTemplateMultiError, or nil if none found.
func (m *EKSAccessEntryTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *EKSAccessEntryTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EKSAccessEntryTemplateValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EKSAccessEntryTemplateValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EKSAccessEntryTemplateValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetClusterAccessPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EKSAccessEntryTemplateValidationError{
						field:  fmt.Sprintf("ClusterAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EKSAccessEntryTemplateValidationError{
						field:  fmt.Sprintf("ClusterAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EKSAccessEntryTemplateValidationError{
					field:  fmt.Sprintf("ClusterAccessPolicies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNamespaceAccessPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EKSAccessEntryTemplateValidationError{
						field:  fmt.Sprintf("NamespaceAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EKSAccessEntryTemplateValidationError{
						field:  fmt.Sprintf("NamespaceAccessPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EKSAccessEntryTemplateValidationError{
					field:  fmt.Sprintf("NamespaceAccessPolicies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EKSAccessEntryTemplateMultiError(errors)
	}

	return nil
}

// EKSAccessEntryTemplateMultiError is an error wrapping multiple validation
// errors returned by EKSAccessEntryTemplate.ValidateAll() if the designated
// constraints aren't met.
type EKSAccessEntryTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EKSAccessEntryTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EKSAccessEntryTemplateMultiError) AllErrors() []error { return m }

// EKSAccessEntryTemplateValidationError is the validation error returned by
// EKSAccessEntryTemplate.Validate if the designated constraints aren't met.
type EKSAccessEntryTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EKSAccessEntryTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EKSAccessEntryTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EKSAccessEntryTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EKSAccessEntryTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EKSAccessEntryTemplateValidationError) ErrorName() string {
	return "EKSAccessEntryTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e EKSAccessEntryTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEKSAccessEntryTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EKSAccessEntryTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EKSAccessEntryTemplateValidationError{}

// Validate checks the field values on CreateEKSAccessEntryTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateEKSAccessEntryTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEKSAccessEntryTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateEKSAccessEntryTemplateResponseMultiError, or nil if none found.
func (m *CreateEKSAccessEntryTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEKSAccessEntryTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccessEntryTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEKSAccessEntryTemplateResponseValidationError{
					field:  "AccessEntryTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEKSAccessEntryTemplateResponseValidationError{
					field:  "AccessEntryTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessEntryTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEKSAccessEntryTemplateResponseValidationError{
				field:  "AccessEntryTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEKSAccessEntryTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateEKSAccessEntryTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateEKSAccessEntryTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEKSAccessEntryTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEKSAccessEntryTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEKSAccessEntryTemplateResponseMultiError) AllErrors() []error { return m }

// CreateEKSAccessEntryTemplateResponseValidationError is the validation error
// returned by CreateEKSAccessEntryTemplateResponse.Validate if the designated
// constraints aren't met.
type CreateEKSAccessEntryTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEKSAccessEntryTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEKSAccessEntryTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEKSAccessEntryTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEKSAccessEntryTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEKSAccessEntryTemplateResponseValidationError) ErrorName() string {
	return "CreateEKSAccessEntryTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEKSAccessEntryTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEKSAccessEntryTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEKSAccessEntryTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEKSAccessEntryTemplateResponseValidationError{}

// Validate checks the field values on GetEKSAccessEntryTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetEKSAccessEntryTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEKSAccessEntryTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEKSAccessEntryTemplateRequestMultiError, or nil if none found.
func (m *GetEKSAccessEntryTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEKSAccessEntryTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetEKSAccessEntryTemplateRequestMultiError(errors)
	}

	return nil
}

// GetEKSAccessEntryTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetEKSAccessEntryTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEKSAccessEntryTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEKSAccessEntryTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEKSAccessEntryTemplateRequestMultiError) AllErrors() []error { return m }

// GetEKSAccessEntryTemplateRequestValidationError is the validation error
// returned by GetEKSAccessEntryTemplateRequest.Validate if the designated
// constraints aren't met.
type GetEKSAccessEntryTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEKSAccessEntryTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEKSAccessEntryTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEKSAccessEntryTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEKSAccessEntryTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEKSAccessEntryTemplateRequestValidationError) ErrorName() string {
	return "GetEKSAccessEntryTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEKSAccessEntryTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEKSAccessEntryTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEKSAccessEntryTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEKSAccessEntryTemplateRequestValidationError{}

// Validate checks the field values on GetEKSAccessEntryTemplateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetEKSAccessEntryTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEKSAccessEntryTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetEKSAccessEntryTemplateResponseMultiError, or nil if none found.
func (m *GetEKSAccessEntryTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEKSAccessEntryTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccessEntryTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEKSAccessEntryTemplateResponseValidationError{
					field:  "AccessEntryTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEKSAccessEntryTemplateResponseValidationError{
					field:  "AccessEntryTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessEntryTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEKSAccessEntryTemplateResponseValidationError{
				field:  "AccessEntryTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEKSAccessEntryTemplateResponseMultiError(errors)
	}

	return nil
}

// GetEKSAccessEntryTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetEKSAccessEntryTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEKSAccessEntryTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEKSAccessEntryTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEKSAccessEntryTemplateResponseMultiError) AllErrors() []error { return m }

// GetEKSAccessEntryTemplateResponseValidationError is the validation error
// returned by GetEKSAccessEntryTemplateResponse.Validate if the designated
// constraints aren't met.
type GetEKSAccessEntryTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEKSAccessEntryTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEKSAccessEntryTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEKSAccessEntryTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEKSAccessEntryTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEKSAccessEntryTemplateResponseValidationError) ErrorName() string {
	return "GetEKSAccessEntryTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEKSAccessEntryTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEKSAccessEntryTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEKSAccessEntryTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEKSAccessEntryTemplateResponseValidationError{}

// Validate checks the field values on UpdateEKSAccessEntryTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEKSAccessEntryTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEKSAccessEntryTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEKSAccessEntryTemplateRequestMultiError, or nil if none found.
func (m *UpdateEKSAccessEntryTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEKSAccessEntryTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccessEntryTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEKSAccessEntryTemplateRequestValidationError{
					field:  "AccessEntryTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEKSAccessEntryTemplateRequestValidationError{
					field:  "AccessEntryTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessEntryTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEKSAccessEntryTemplateRequestValidationError{
				field:  "AccessEntryTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEKSAccessEntryTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateEKSAccessEntryTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEKSAccessEntryTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEKSAccessEntryTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEKSAccessEntryTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEKSAccessEntryTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateEKSAccessEntryTemplateRequestValidationError is the validation error
// returned by UpdateEKSAccessEntryTemplateRequest.Validate if the designated
// constraints aren't met.
type UpdateEKSAccessEntryTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEKSAccessEntryTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEKSAccessEntryTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEKSAccessEntryTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEKSAccessEntryTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEKSAccessEntryTemplateRequestValidationError) ErrorName() string {
	return "UpdateEKSAccessEntryTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEKSAccessEntryTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEKSAccessEntryTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEKSAccessEntryTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEKSAccessEntryTemplateRequestValidationError{}

// Validate checks the field values on UpdateEKSAccessEntryTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateEKSAccessEntryTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEKSAccessEntryTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEKSAccessEntryTemplateResponseMultiError, or nil if none found.
func (m *UpdateEKSAccessEntryTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEKSAccessEntryTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccessEntryTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEKSAccessEntryTemplateResponseValidationError{
					field:  "AccessEntryTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEKSAccessEntryTemplateResponseValidationError{
					field:  "AccessEntryTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessEntryTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEKSAccessEntryTemplateResponseValidationError{
				field:  "AccessEntryTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEKSAccessEntryTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdateEKSAccessEntryTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEKSAccessEntryTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEKSAccessEntryTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEKSAccessEntryTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEKSAccessEntryTemplateResponseMultiError) AllErrors() []error { return m }

// UpdateEKSAccessEntryTemplateResponseValidationError is the validation error
// returned by UpdateEKSAccessEntryTemplateResponse.Validate if the designated
// constraints aren't met.
type UpdateEKSAccessEntryTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEKSAccessEntryTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEKSAccessEntryTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEKSAccessEntryTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEKSAccessEntryTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEKSAccessEntryTemplateResponseValidationError) ErrorName() string {
	return "UpdateEKSAccessEntryTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEKSAccessEntryTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEKSAccessEntryTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEKSAccessEntryTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEKSAccessEntryTemplateResponseValidationError{}

// Validate checks the field values on DeleteEKSAccessEntryTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteEKSAccessEntryTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEKSAccessEntryTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEKSAccessEntryTemplateRequestMultiError, or nil if none found.
func (m *DeleteEKSAccessEntryTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEKSAccessEntryTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteEKSAccessEntryTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteEKSAccessEntryTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEKSAccessEntryTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEKSAccessEntryTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEKSAccessEntryTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEKSAccessEntryTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteEKSAccessEntryTemplateRequestValidationError is the validation error
// returned by DeleteEKSAccessEntryTemplateRequest.Validate if the designated
// constraints aren't met.
type DeleteEKSAccessEntryTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEKSAccessEntryTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEKSAccessEntryTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEKSAccessEntryTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEKSAccessEntryTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEKSAccessEntryTemplateRequestValidationError) ErrorName() string {
	return "DeleteEKSAccessEntryTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEKSAccessEntryTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEKSAccessEntryTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEKSAccessEntryTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEKSAccessEntryTemplateRequestValidationError{}

// Validate checks the field values on DeleteEKSAccessEntryTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteEKSAccessEntryTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEKSAccessEntryTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEKSAccessEntryTemplateResponseMultiError, or nil if none found.
func (m *DeleteEKSAccessEntryTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEKSAccessEntryTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteEKSAccessEntryTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteEKSAccessEntryTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEKSAccessEntryTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteEKSAccessEntryTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEKSAccessEntryTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEKSAccessEntryTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteEKSAccessEntryTemplateResponseValidationError is the validation error
// returned by DeleteEKSAccessEntryTemplateResponse.Validate if the designated
// constraints aren't met.
type DeleteEKSAccessEntryTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEKSAccessEntryTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEKSAccessEntryTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEKSAccessEntryTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEKSAccessEntryTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEKSAccessEntryTemplateResponseValidationError) ErrorName() string {
	return "DeleteEKSAccessEntryTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEKSAccessEntryTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEKSAccessEntryTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEKSAccessEntryTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEKSAccessEntryTemplateResponseValidationError{}
