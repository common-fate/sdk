// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/config/v1alpha1/aws_resource_scanner.proto

package configv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAWSResourceScannerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAWSResourceScannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAWSResourceScannerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAWSResourceScannerRequestMultiError, or nil if none found.
func (m *CreateAWSResourceScannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAWSResourceScannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for RoleName

	if len(errors) > 0 {
		return CreateAWSResourceScannerRequestMultiError(errors)
	}

	return nil
}

// CreateAWSResourceScannerRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAWSResourceScannerRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateAWSResourceScannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAWSResourceScannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAWSResourceScannerRequestMultiError) AllErrors() []error { return m }

// CreateAWSResourceScannerRequestValidationError is the validation error
// returned by CreateAWSResourceScannerRequest.Validate if the designated
// constraints aren't met.
type CreateAWSResourceScannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAWSResourceScannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAWSResourceScannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAWSResourceScannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAWSResourceScannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAWSResourceScannerRequestValidationError) ErrorName() string {
	return "CreateAWSResourceScannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAWSResourceScannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAWSResourceScannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAWSResourceScannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAWSResourceScannerRequestValidationError{}

// Validate checks the field values on AWSResourceScanner with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AWSResourceScanner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSResourceScanner with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AWSResourceScannerMultiError, or nil if none found.
func (m *AWSResourceScanner) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSResourceScanner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IntegrationId

	// no validation rules for RoleName

	if len(errors) > 0 {
		return AWSResourceScannerMultiError(errors)
	}

	return nil
}

// AWSResourceScannerMultiError is an error wrapping multiple validation errors
// returned by AWSResourceScanner.ValidateAll() if the designated constraints
// aren't met.
type AWSResourceScannerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSResourceScannerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSResourceScannerMultiError) AllErrors() []error { return m }

// AWSResourceScannerValidationError is the validation error returned by
// AWSResourceScanner.Validate if the designated constraints aren't met.
type AWSResourceScannerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSResourceScannerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSResourceScannerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSResourceScannerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSResourceScannerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSResourceScannerValidationError) ErrorName() string {
	return "AWSResourceScannerValidationError"
}

// Error satisfies the builtin error interface
func (e AWSResourceScannerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSResourceScanner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSResourceScannerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSResourceScannerValidationError{}

// Validate checks the field values on CreateAWSResourceScannerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateAWSResourceScannerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAWSResourceScannerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAWSResourceScannerResponseMultiError, or nil if none found.
func (m *CreateAWSResourceScannerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAWSResourceScannerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceScanner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAWSResourceScannerResponseValidationError{
					field:  "ResourceScanner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAWSResourceScannerResponseValidationError{
					field:  "ResourceScanner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceScanner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAWSResourceScannerResponseValidationError{
				field:  "ResourceScanner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAWSResourceScannerResponseMultiError(errors)
	}

	return nil
}

// CreateAWSResourceScannerResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateAWSResourceScannerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAWSResourceScannerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAWSResourceScannerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAWSResourceScannerResponseMultiError) AllErrors() []error { return m }

// CreateAWSResourceScannerResponseValidationError is the validation error
// returned by CreateAWSResourceScannerResponse.Validate if the designated
// constraints aren't met.
type CreateAWSResourceScannerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAWSResourceScannerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAWSResourceScannerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAWSResourceScannerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAWSResourceScannerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAWSResourceScannerResponseValidationError) ErrorName() string {
	return "CreateAWSResourceScannerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAWSResourceScannerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAWSResourceScannerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAWSResourceScannerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAWSResourceScannerResponseValidationError{}

// Validate checks the field values on GetAWSResourceScannerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAWSResourceScannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAWSResourceScannerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAWSResourceScannerRequestMultiError, or nil if none found.
func (m *GetAWSResourceScannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAWSResourceScannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAWSResourceScannerRequestMultiError(errors)
	}

	return nil
}

// GetAWSResourceScannerRequestMultiError is an error wrapping multiple
// validation errors returned by GetAWSResourceScannerRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAWSResourceScannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAWSResourceScannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAWSResourceScannerRequestMultiError) AllErrors() []error { return m }

// GetAWSResourceScannerRequestValidationError is the validation error returned
// by GetAWSResourceScannerRequest.Validate if the designated constraints
// aren't met.
type GetAWSResourceScannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAWSResourceScannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAWSResourceScannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAWSResourceScannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAWSResourceScannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAWSResourceScannerRequestValidationError) ErrorName() string {
	return "GetAWSResourceScannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAWSResourceScannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAWSResourceScannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAWSResourceScannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAWSResourceScannerRequestValidationError{}

// Validate checks the field values on GetAWSResourceScannerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAWSResourceScannerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAWSResourceScannerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAWSResourceScannerResponseMultiError, or nil if none found.
func (m *GetAWSResourceScannerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAWSResourceScannerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceScanner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAWSResourceScannerResponseValidationError{
					field:  "ResourceScanner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAWSResourceScannerResponseValidationError{
					field:  "ResourceScanner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceScanner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAWSResourceScannerResponseValidationError{
				field:  "ResourceScanner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAWSResourceScannerResponseMultiError(errors)
	}

	return nil
}

// GetAWSResourceScannerResponseMultiError is an error wrapping multiple
// validation errors returned by GetAWSResourceScannerResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAWSResourceScannerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAWSResourceScannerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAWSResourceScannerResponseMultiError) AllErrors() []error { return m }

// GetAWSResourceScannerResponseValidationError is the validation error
// returned by GetAWSResourceScannerResponse.Validate if the designated
// constraints aren't met.
type GetAWSResourceScannerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAWSResourceScannerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAWSResourceScannerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAWSResourceScannerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAWSResourceScannerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAWSResourceScannerResponseValidationError) ErrorName() string {
	return "GetAWSResourceScannerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAWSResourceScannerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAWSResourceScannerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAWSResourceScannerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAWSResourceScannerResponseValidationError{}

// Validate checks the field values on UpdateAWSResourceScannerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAWSResourceScannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAWSResourceScannerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAWSResourceScannerRequestMultiError, or nil if none found.
func (m *UpdateAWSResourceScannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAWSResourceScannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceScanner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAWSResourceScannerRequestValidationError{
					field:  "ResourceScanner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAWSResourceScannerRequestValidationError{
					field:  "ResourceScanner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceScanner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAWSResourceScannerRequestValidationError{
				field:  "ResourceScanner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAWSResourceScannerRequestMultiError(errors)
	}

	return nil
}

// UpdateAWSResourceScannerRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAWSResourceScannerRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAWSResourceScannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAWSResourceScannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAWSResourceScannerRequestMultiError) AllErrors() []error { return m }

// UpdateAWSResourceScannerRequestValidationError is the validation error
// returned by UpdateAWSResourceScannerRequest.Validate if the designated
// constraints aren't met.
type UpdateAWSResourceScannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAWSResourceScannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAWSResourceScannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAWSResourceScannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAWSResourceScannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAWSResourceScannerRequestValidationError) ErrorName() string {
	return "UpdateAWSResourceScannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAWSResourceScannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAWSResourceScannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAWSResourceScannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAWSResourceScannerRequestValidationError{}

// Validate checks the field values on UpdateAWSResourceScannerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateAWSResourceScannerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAWSResourceScannerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAWSResourceScannerResponseMultiError, or nil if none found.
func (m *UpdateAWSResourceScannerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAWSResourceScannerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceScanner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAWSResourceScannerResponseValidationError{
					field:  "ResourceScanner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAWSResourceScannerResponseValidationError{
					field:  "ResourceScanner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceScanner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAWSResourceScannerResponseValidationError{
				field:  "ResourceScanner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAWSResourceScannerResponseMultiError(errors)
	}

	return nil
}

// UpdateAWSResourceScannerResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateAWSResourceScannerResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAWSResourceScannerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAWSResourceScannerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAWSResourceScannerResponseMultiError) AllErrors() []error { return m }

// UpdateAWSResourceScannerResponseValidationError is the validation error
// returned by UpdateAWSResourceScannerResponse.Validate if the designated
// constraints aren't met.
type UpdateAWSResourceScannerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAWSResourceScannerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAWSResourceScannerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAWSResourceScannerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAWSResourceScannerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAWSResourceScannerResponseValidationError) ErrorName() string {
	return "UpdateAWSResourceScannerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAWSResourceScannerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAWSResourceScannerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAWSResourceScannerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAWSResourceScannerResponseValidationError{}

// Validate checks the field values on DeleteAWSResourceScannerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAWSResourceScannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAWSResourceScannerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAWSResourceScannerRequestMultiError, or nil if none found.
func (m *DeleteAWSResourceScannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAWSResourceScannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAWSResourceScannerRequestMultiError(errors)
	}

	return nil
}

// DeleteAWSResourceScannerRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAWSResourceScannerRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteAWSResourceScannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAWSResourceScannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAWSResourceScannerRequestMultiError) AllErrors() []error { return m }

// DeleteAWSResourceScannerRequestValidationError is the validation error
// returned by DeleteAWSResourceScannerRequest.Validate if the designated
// constraints aren't met.
type DeleteAWSResourceScannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAWSResourceScannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAWSResourceScannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAWSResourceScannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAWSResourceScannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAWSResourceScannerRequestValidationError) ErrorName() string {
	return "DeleteAWSResourceScannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAWSResourceScannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAWSResourceScannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAWSResourceScannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAWSResourceScannerRequestValidationError{}

// Validate checks the field values on DeleteAWSResourceScannerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteAWSResourceScannerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAWSResourceScannerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAWSResourceScannerResponseMultiError, or nil if none found.
func (m *DeleteAWSResourceScannerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAWSResourceScannerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAWSResourceScannerResponseMultiError(errors)
	}

	return nil
}

// DeleteAWSResourceScannerResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteAWSResourceScannerResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAWSResourceScannerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAWSResourceScannerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAWSResourceScannerResponseMultiError) AllErrors() []error { return m }

// DeleteAWSResourceScannerResponseValidationError is the validation error
// returned by DeleteAWSResourceScannerResponse.Validate if the designated
// constraints aren't met.
type DeleteAWSResourceScannerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAWSResourceScannerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAWSResourceScannerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAWSResourceScannerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAWSResourceScannerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAWSResourceScannerResponseValidationError) ErrorName() string {
	return "DeleteAWSResourceScannerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAWSResourceScannerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAWSResourceScannerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAWSResourceScannerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAWSResourceScannerResponseValidationError{}
