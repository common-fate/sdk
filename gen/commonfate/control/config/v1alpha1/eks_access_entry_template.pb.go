// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: commonfate/control/config/v1alpha1/eks_access_entry_template.proto

package configv1alpha1

import (
	_ "github.com/common-fate/sdk/gen/buf/validate"
	_ "github.com/common-fate/sdk/gen/commonfate/authz/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateEKSAccessEntryTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	KubernetesGroups        []string                    `protobuf:"bytes,2,rep,name=kubernetes_groups,json=kubernetesGroups,proto3" json:"kubernetes_groups,omitempty"`
	Tags                    []*EKSAccessEntryTag        `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	ClusterAccessPolicies   []*EKSClusterAccessPolicy   `protobuf:"bytes,4,rep,name=cluster_access_policies,json=clusterAccessPolicies,proto3" json:"cluster_access_policies,omitempty"`
	NamespaceAccessPolicies []*EKSNamespaceAccessPolicy `protobuf:"bytes,5,rep,name=namespace_access_policies,json=namespaceAccessPolicies,proto3" json:"namespace_access_policies,omitempty"`
}

func (x *CreateEKSAccessEntryTemplateRequest) Reset() {
	*x = CreateEKSAccessEntryTemplateRequest{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEKSAccessEntryTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEKSAccessEntryTemplateRequest) ProtoMessage() {}

func (x *CreateEKSAccessEntryTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEKSAccessEntryTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateEKSAccessEntryTemplateRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{0}
}

func (x *CreateEKSAccessEntryTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEKSAccessEntryTemplateRequest) GetKubernetesGroups() []string {
	if x != nil {
		return x.KubernetesGroups
	}
	return nil
}

func (x *CreateEKSAccessEntryTemplateRequest) GetTags() []*EKSAccessEntryTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateEKSAccessEntryTemplateRequest) GetClusterAccessPolicies() []*EKSClusterAccessPolicy {
	if x != nil {
		return x.ClusterAccessPolicies
	}
	return nil
}

func (x *CreateEKSAccessEntryTemplateRequest) GetNamespaceAccessPolicies() []*EKSNamespaceAccessPolicy {
	if x != nil {
		return x.NamespaceAccessPolicies
	}
	return nil
}

type EKSClusterAccessPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyArn string `protobuf:"bytes,1,opt,name=policy_arn,json=policyArn,proto3" json:"policy_arn,omitempty"`
}

func (x *EKSClusterAccessPolicy) Reset() {
	*x = EKSClusterAccessPolicy{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EKSClusterAccessPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSClusterAccessPolicy) ProtoMessage() {}

func (x *EKSClusterAccessPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSClusterAccessPolicy.ProtoReflect.Descriptor instead.
func (*EKSClusterAccessPolicy) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{1}
}

func (x *EKSClusterAccessPolicy) GetPolicyArn() string {
	if x != nil {
		return x.PolicyArn
	}
	return ""
}

type EKSNamespaceAccessPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	PolicyArn  string   `protobuf:"bytes,2,opt,name=policy_arn,json=policyArn,proto3" json:"policy_arn,omitempty"`
}

func (x *EKSNamespaceAccessPolicy) Reset() {
	*x = EKSNamespaceAccessPolicy{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EKSNamespaceAccessPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSNamespaceAccessPolicy) ProtoMessage() {}

func (x *EKSNamespaceAccessPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSNamespaceAccessPolicy.ProtoReflect.Descriptor instead.
func (*EKSNamespaceAccessPolicy) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{2}
}

func (x *EKSNamespaceAccessPolicy) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *EKSNamespaceAccessPolicy) GetPolicyArn() string {
	if x != nil {
		return x.PolicyArn
	}
	return ""
}

type EKSAccessEntryTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EKSAccessEntryTag) Reset() {
	*x = EKSAccessEntryTag{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EKSAccessEntryTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSAccessEntryTag) ProtoMessage() {}

func (x *EKSAccessEntryTag) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSAccessEntryTag.ProtoReflect.Descriptor instead.
func (*EKSAccessEntryTag) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{3}
}

func (x *EKSAccessEntryTag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EKSAccessEntryTag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EKSAccessEntryTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                    string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	KubernetesGroups        []string                    `protobuf:"bytes,3,rep,name=kubernetes_groups,json=kubernetesGroups,proto3" json:"kubernetes_groups,omitempty"`
	Tags                    []*EKSAccessEntryTag        `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	ClusterAccessPolicies   []*EKSClusterAccessPolicy   `protobuf:"bytes,5,rep,name=cluster_access_policies,json=clusterAccessPolicies,proto3" json:"cluster_access_policies,omitempty"`
	NamespaceAccessPolicies []*EKSNamespaceAccessPolicy `protobuf:"bytes,6,rep,name=namespace_access_policies,json=namespaceAccessPolicies,proto3" json:"namespace_access_policies,omitempty"`
}

func (x *EKSAccessEntryTemplate) Reset() {
	*x = EKSAccessEntryTemplate{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EKSAccessEntryTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSAccessEntryTemplate) ProtoMessage() {}

func (x *EKSAccessEntryTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSAccessEntryTemplate.ProtoReflect.Descriptor instead.
func (*EKSAccessEntryTemplate) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{4}
}

func (x *EKSAccessEntryTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EKSAccessEntryTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EKSAccessEntryTemplate) GetKubernetesGroups() []string {
	if x != nil {
		return x.KubernetesGroups
	}
	return nil
}

func (x *EKSAccessEntryTemplate) GetTags() []*EKSAccessEntryTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EKSAccessEntryTemplate) GetClusterAccessPolicies() []*EKSClusterAccessPolicy {
	if x != nil {
		return x.ClusterAccessPolicies
	}
	return nil
}

func (x *EKSAccessEntryTemplate) GetNamespaceAccessPolicies() []*EKSNamespaceAccessPolicy {
	if x != nil {
		return x.NamespaceAccessPolicies
	}
	return nil
}

type CreateEKSAccessEntryTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessEntryTemplate *EKSAccessEntryTemplate `protobuf:"bytes,1,opt,name=access_entry_template,json=accessEntryTemplate,proto3" json:"access_entry_template,omitempty"`
}

func (x *CreateEKSAccessEntryTemplateResponse) Reset() {
	*x = CreateEKSAccessEntryTemplateResponse{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEKSAccessEntryTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEKSAccessEntryTemplateResponse) ProtoMessage() {}

func (x *CreateEKSAccessEntryTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEKSAccessEntryTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateEKSAccessEntryTemplateResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{5}
}

func (x *CreateEKSAccessEntryTemplateResponse) GetAccessEntryTemplate() *EKSAccessEntryTemplate {
	if x != nil {
		return x.AccessEntryTemplate
	}
	return nil
}

type GetEKSAccessEntryTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEKSAccessEntryTemplateRequest) Reset() {
	*x = GetEKSAccessEntryTemplateRequest{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEKSAccessEntryTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEKSAccessEntryTemplateRequest) ProtoMessage() {}

func (x *GetEKSAccessEntryTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEKSAccessEntryTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetEKSAccessEntryTemplateRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{6}
}

func (x *GetEKSAccessEntryTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetEKSAccessEntryTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessEntryTemplate *EKSAccessEntryTemplate `protobuf:"bytes,1,opt,name=access_entry_template,json=accessEntryTemplate,proto3" json:"access_entry_template,omitempty"`
}

func (x *GetEKSAccessEntryTemplateResponse) Reset() {
	*x = GetEKSAccessEntryTemplateResponse{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEKSAccessEntryTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEKSAccessEntryTemplateResponse) ProtoMessage() {}

func (x *GetEKSAccessEntryTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEKSAccessEntryTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetEKSAccessEntryTemplateResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{7}
}

func (x *GetEKSAccessEntryTemplateResponse) GetAccessEntryTemplate() *EKSAccessEntryTemplate {
	if x != nil {
		return x.AccessEntryTemplate
	}
	return nil
}

type UpdateEKSAccessEntryTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessEntryTemplate *EKSAccessEntryTemplate `protobuf:"bytes,1,opt,name=access_entry_template,json=accessEntryTemplate,proto3" json:"access_entry_template,omitempty"`
}

func (x *UpdateEKSAccessEntryTemplateRequest) Reset() {
	*x = UpdateEKSAccessEntryTemplateRequest{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEKSAccessEntryTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEKSAccessEntryTemplateRequest) ProtoMessage() {}

func (x *UpdateEKSAccessEntryTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEKSAccessEntryTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateEKSAccessEntryTemplateRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateEKSAccessEntryTemplateRequest) GetAccessEntryTemplate() *EKSAccessEntryTemplate {
	if x != nil {
		return x.AccessEntryTemplate
	}
	return nil
}

type UpdateEKSAccessEntryTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessEntryTemplate *EKSAccessEntryTemplate `protobuf:"bytes,1,opt,name=access_entry_template,json=accessEntryTemplate,proto3" json:"access_entry_template,omitempty"`
}

func (x *UpdateEKSAccessEntryTemplateResponse) Reset() {
	*x = UpdateEKSAccessEntryTemplateResponse{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEKSAccessEntryTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEKSAccessEntryTemplateResponse) ProtoMessage() {}

func (x *UpdateEKSAccessEntryTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEKSAccessEntryTemplateResponse.ProtoReflect.Descriptor instead.
func (*UpdateEKSAccessEntryTemplateResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateEKSAccessEntryTemplateResponse) GetAccessEntryTemplate() *EKSAccessEntryTemplate {
	if x != nil {
		return x.AccessEntryTemplate
	}
	return nil
}

type DeleteEKSAccessEntryTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEKSAccessEntryTemplateRequest) Reset() {
	*x = DeleteEKSAccessEntryTemplateRequest{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEKSAccessEntryTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEKSAccessEntryTemplateRequest) ProtoMessage() {}

func (x *DeleteEKSAccessEntryTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEKSAccessEntryTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteEKSAccessEntryTemplateRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteEKSAccessEntryTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteEKSAccessEntryTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEKSAccessEntryTemplateResponse) Reset() {
	*x = DeleteEKSAccessEntryTemplateResponse{}
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEKSAccessEntryTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEKSAccessEntryTemplateResponse) ProtoMessage() {}

func (x *DeleteEKSAccessEntryTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEKSAccessEntryTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteEKSAccessEntryTemplateResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteEKSAccessEntryTemplateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_commonfate_control_config_v1alpha1_eks_access_entry_template_proto protoreflect.FileDescriptor

var file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDesc = []byte{
	0x0a, 0x42, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x6b, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9f, 0x03, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x4b, 0x53,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x72, 0x0a, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x19, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x4b, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x17, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x22, 0xfc, 0x02, 0x0a, 0x16, 0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xe1, 0x02,
	0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xc1, 0x02, 0xba, 0x48, 0xbd, 0x02, 0x72, 0xba, 0x02, 0x52, 0x3b, 0x61, 0x72,
	0x6e, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b, 0x53, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x42, 0x61, 0x72, 0x6e, 0x3a, 0x61,
	0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x3f, 0x61,
	0x72, 0x6e, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77, 0x73, 0x3a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b, 0x53, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x3a,
	0x61, 0x72, 0x6e, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77, 0x73,
	0x3a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b, 0x53,
	0x45, 0x64, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x3a, 0x61, 0x72, 0x6e, 0x3a,
	0x61, 0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b, 0x53, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x72,
	0x6e, 0x22, 0x9e, 0x03, 0x0a, 0x18, 0x45, 0x4b, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0xe1,
	0x02, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xc1, 0x02, 0xba, 0x48, 0xbd, 0x02, 0x72, 0xba, 0x02, 0x52, 0x3b, 0x61,
	0x72, 0x6e, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77, 0x73, 0x3a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b, 0x53, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x42, 0x61, 0x72, 0x6e, 0x3a,
	0x61, 0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x3f,
	0x61, 0x72, 0x6e, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77, 0x73,
	0x3a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b, 0x53,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x3a, 0x61, 0x72, 0x6e, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77,
	0x73, 0x3a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b,
	0x53, 0x45, 0x64, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x3a, 0x61, 0x72, 0x6e,
	0x3a, 0x61, 0x77, 0x73, 0x3a, 0x65, 0x6b, 0x73, 0x3a, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x4b, 0x53, 0x56, 0x69, 0x65,
	0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41,
	0x72, 0x6e, 0x22, 0x3b, 0x0a, 0x11, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xa2, 0x03, 0x0a, 0x16, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x72, 0x0a, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x4b, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x19, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x17, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x32, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66,
	0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6e, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0x96, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x4b, 0x53,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x35, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x36, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xf2, 0x05, 0x0a, 0x1d, 0x45, 0x4b, 0x53, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x47, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xae, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x44, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x4b, 0x53, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01,
	0x12, 0xb3, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x4b, 0x53,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x4b, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x4b, 0x53, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xc2, 0x02, 0x0a,
	0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x1b, 0x45, 0x6b, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x73,
	0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x43, 0xaa, 0x02,
	0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0xca, 0x02, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x25, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a,
	0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescOnce sync.Once
	file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescData = file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDesc
)

func file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescGZIP() []byte {
	file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescOnce.Do(func() {
		file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescData)
	})
	return file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDescData
}

var file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_goTypes = []any{
	(*CreateEKSAccessEntryTemplateRequest)(nil),  // 0: commonfate.control.config.v1alpha1.CreateEKSAccessEntryTemplateRequest
	(*EKSClusterAccessPolicy)(nil),               // 1: commonfate.control.config.v1alpha1.EKSClusterAccessPolicy
	(*EKSNamespaceAccessPolicy)(nil),             // 2: commonfate.control.config.v1alpha1.EKSNamespaceAccessPolicy
	(*EKSAccessEntryTag)(nil),                    // 3: commonfate.control.config.v1alpha1.EKSAccessEntryTag
	(*EKSAccessEntryTemplate)(nil),               // 4: commonfate.control.config.v1alpha1.EKSAccessEntryTemplate
	(*CreateEKSAccessEntryTemplateResponse)(nil), // 5: commonfate.control.config.v1alpha1.CreateEKSAccessEntryTemplateResponse
	(*GetEKSAccessEntryTemplateRequest)(nil),     // 6: commonfate.control.config.v1alpha1.GetEKSAccessEntryTemplateRequest
	(*GetEKSAccessEntryTemplateResponse)(nil),    // 7: commonfate.control.config.v1alpha1.GetEKSAccessEntryTemplateResponse
	(*UpdateEKSAccessEntryTemplateRequest)(nil),  // 8: commonfate.control.config.v1alpha1.UpdateEKSAccessEntryTemplateRequest
	(*UpdateEKSAccessEntryTemplateResponse)(nil), // 9: commonfate.control.config.v1alpha1.UpdateEKSAccessEntryTemplateResponse
	(*DeleteEKSAccessEntryTemplateRequest)(nil),  // 10: commonfate.control.config.v1alpha1.DeleteEKSAccessEntryTemplateRequest
	(*DeleteEKSAccessEntryTemplateResponse)(nil), // 11: commonfate.control.config.v1alpha1.DeleteEKSAccessEntryTemplateResponse
}
var file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_depIdxs = []int32{
	3,  // 0: commonfate.control.config.v1alpha1.CreateEKSAccessEntryTemplateRequest.tags:type_name -> commonfate.control.config.v1alpha1.EKSAccessEntryTag
	1,  // 1: commonfate.control.config.v1alpha1.CreateEKSAccessEntryTemplateRequest.cluster_access_policies:type_name -> commonfate.control.config.v1alpha1.EKSClusterAccessPolicy
	2,  // 2: commonfate.control.config.v1alpha1.CreateEKSAccessEntryTemplateRequest.namespace_access_policies:type_name -> commonfate.control.config.v1alpha1.EKSNamespaceAccessPolicy
	3,  // 3: commonfate.control.config.v1alpha1.EKSAccessEntryTemplate.tags:type_name -> commonfate.control.config.v1alpha1.EKSAccessEntryTag
	1,  // 4: commonfate.control.config.v1alpha1.EKSAccessEntryTemplate.cluster_access_policies:type_name -> commonfate.control.config.v1alpha1.EKSClusterAccessPolicy
	2,  // 5: commonfate.control.config.v1alpha1.EKSAccessEntryTemplate.namespace_access_policies:type_name -> commonfate.control.config.v1alpha1.EKSNamespaceAccessPolicy
	4,  // 6: commonfate.control.config.v1alpha1.CreateEKSAccessEntryTemplateResponse.access_entry_template:type_name -> commonfate.control.config.v1alpha1.EKSAccessEntryTemplate
	4,  // 7: commonfate.control.config.v1alpha1.GetEKSAccessEntryTemplateResponse.access_entry_template:type_name -> commonfate.control.config.v1alpha1.EKSAccessEntryTemplate
	4,  // 8: commonfate.control.config.v1alpha1.UpdateEKSAccessEntryTemplateRequest.access_entry_template:type_name -> commonfate.control.config.v1alpha1.EKSAccessEntryTemplate
	4,  // 9: commonfate.control.config.v1alpha1.UpdateEKSAccessEntryTemplateResponse.access_entry_template:type_name -> commonfate.control.config.v1alpha1.EKSAccessEntryTemplate
	0,  // 10: commonfate.control.config.v1alpha1.EKSAccessEntryTemplateService.CreateEKSAccessEntryTemplate:input_type -> commonfate.control.config.v1alpha1.CreateEKSAccessEntryTemplateRequest
	6,  // 11: commonfate.control.config.v1alpha1.EKSAccessEntryTemplateService.GetEKSAccessEntryTemplate:input_type -> commonfate.control.config.v1alpha1.GetEKSAccessEntryTemplateRequest
	8,  // 12: commonfate.control.config.v1alpha1.EKSAccessEntryTemplateService.UpdateEKSAccessEntryTemplate:input_type -> commonfate.control.config.v1alpha1.UpdateEKSAccessEntryTemplateRequest
	10, // 13: commonfate.control.config.v1alpha1.EKSAccessEntryTemplateService.DeleteEKSAccessEntryTemplate:input_type -> commonfate.control.config.v1alpha1.DeleteEKSAccessEntryTemplateRequest
	5,  // 14: commonfate.control.config.v1alpha1.EKSAccessEntryTemplateService.CreateEKSAccessEntryTemplate:output_type -> commonfate.control.config.v1alpha1.CreateEKSAccessEntryTemplateResponse
	7,  // 15: commonfate.control.config.v1alpha1.EKSAccessEntryTemplateService.GetEKSAccessEntryTemplate:output_type -> commonfate.control.config.v1alpha1.GetEKSAccessEntryTemplateResponse
	9,  // 16: commonfate.control.config.v1alpha1.EKSAccessEntryTemplateService.UpdateEKSAccessEntryTemplate:output_type -> commonfate.control.config.v1alpha1.UpdateEKSAccessEntryTemplateResponse
	11, // 17: commonfate.control.config.v1alpha1.EKSAccessEntryTemplateService.DeleteEKSAccessEntryTemplate:output_type -> commonfate.control.config.v1alpha1.DeleteEKSAccessEntryTemplateResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_init() }
func file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_init() {
	if File_commonfate_control_config_v1alpha1_eks_access_entry_template_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_goTypes,
		DependencyIndexes: file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_depIdxs,
		MessageInfos:      file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_msgTypes,
	}.Build()
	File_commonfate_control_config_v1alpha1_eks_access_entry_template_proto = out.File
	file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_rawDesc = nil
	file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_goTypes = nil
	file_commonfate_control_config_v1alpha1_eks_access_entry_template_proto_depIdxs = nil
}
