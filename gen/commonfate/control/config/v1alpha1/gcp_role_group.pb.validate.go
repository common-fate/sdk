// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/config/v1alpha1/gcp_role_group.proto

package configv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateGCPRoleGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGCPRoleGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGCPRoleGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGCPRoleGroupRequestMultiError, or nil if none found.
func (m *CreateGCPRoleGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGCPRoleGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return CreateGCPRoleGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGCPRoleGroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateGCPRoleGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateGCPRoleGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGCPRoleGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGCPRoleGroupRequestMultiError) AllErrors() []error { return m }

// CreateGCPRoleGroupRequestValidationError is the validation error returned by
// CreateGCPRoleGroupRequest.Validate if the designated constraints aren't met.
type CreateGCPRoleGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGCPRoleGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGCPRoleGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGCPRoleGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGCPRoleGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGCPRoleGroupRequestValidationError) ErrorName() string {
	return "CreateGCPRoleGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGCPRoleGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGCPRoleGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGCPRoleGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGCPRoleGroupRequestValidationError{}

// Validate checks the field values on GCPRoleGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GCPRoleGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GCPRoleGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GCPRoleGroupMultiError, or
// nil if none found.
func (m *GCPRoleGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *GCPRoleGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return GCPRoleGroupMultiError(errors)
	}

	return nil
}

// GCPRoleGroupMultiError is an error wrapping multiple validation errors
// returned by GCPRoleGroup.ValidateAll() if the designated constraints aren't met.
type GCPRoleGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GCPRoleGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GCPRoleGroupMultiError) AllErrors() []error { return m }

// GCPRoleGroupValidationError is the validation error returned by
// GCPRoleGroup.Validate if the designated constraints aren't met.
type GCPRoleGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCPRoleGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCPRoleGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCPRoleGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCPRoleGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCPRoleGroupValidationError) ErrorName() string { return "GCPRoleGroupValidationError" }

// Error satisfies the builtin error interface
func (e GCPRoleGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCPRoleGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCPRoleGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCPRoleGroupValidationError{}

// Validate checks the field values on CreateGCPRoleGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGCPRoleGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGCPRoleGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGCPRoleGroupResponseMultiError, or nil if none found.
func (m *CreateGCPRoleGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGCPRoleGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGCPRoleGroupResponseValidationError{
					field:  "RoleGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGCPRoleGroupResponseValidationError{
					field:  "RoleGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGCPRoleGroupResponseValidationError{
				field:  "RoleGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGCPRoleGroupResponseMultiError(errors)
	}

	return nil
}

// CreateGCPRoleGroupResponseMultiError is an error wrapping multiple
// validation errors returned by CreateGCPRoleGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateGCPRoleGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGCPRoleGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGCPRoleGroupResponseMultiError) AllErrors() []error { return m }

// CreateGCPRoleGroupResponseValidationError is the validation error returned
// by CreateGCPRoleGroupResponse.Validate if the designated constraints aren't met.
type CreateGCPRoleGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGCPRoleGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGCPRoleGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGCPRoleGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGCPRoleGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGCPRoleGroupResponseValidationError) ErrorName() string {
	return "CreateGCPRoleGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGCPRoleGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGCPRoleGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGCPRoleGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGCPRoleGroupResponseValidationError{}

// Validate checks the field values on GetGCPRoleGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGCPRoleGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGCPRoleGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGCPRoleGroupRequestMultiError, or nil if none found.
func (m *GetGCPRoleGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGCPRoleGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetGCPRoleGroupRequestMultiError(errors)
	}

	return nil
}

// GetGCPRoleGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetGCPRoleGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGCPRoleGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGCPRoleGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGCPRoleGroupRequestMultiError) AllErrors() []error { return m }

// GetGCPRoleGroupRequestValidationError is the validation error returned by
// GetGCPRoleGroupRequest.Validate if the designated constraints aren't met.
type GetGCPRoleGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGCPRoleGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGCPRoleGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGCPRoleGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGCPRoleGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGCPRoleGroupRequestValidationError) ErrorName() string {
	return "GetGCPRoleGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGCPRoleGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGCPRoleGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGCPRoleGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGCPRoleGroupRequestValidationError{}

// Validate checks the field values on GetGCPRoleGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGCPRoleGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGCPRoleGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGCPRoleGroupResponseMultiError, or nil if none found.
func (m *GetGCPRoleGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGCPRoleGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGCPRoleGroupResponseValidationError{
					field:  "RoleGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGCPRoleGroupResponseValidationError{
					field:  "RoleGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGCPRoleGroupResponseValidationError{
				field:  "RoleGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGCPRoleGroupResponseMultiError(errors)
	}

	return nil
}

// GetGCPRoleGroupResponseMultiError is an error wrapping multiple validation
// errors returned by GetGCPRoleGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGCPRoleGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGCPRoleGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGCPRoleGroupResponseMultiError) AllErrors() []error { return m }

// GetGCPRoleGroupResponseValidationError is the validation error returned by
// GetGCPRoleGroupResponse.Validate if the designated constraints aren't met.
type GetGCPRoleGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGCPRoleGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGCPRoleGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGCPRoleGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGCPRoleGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGCPRoleGroupResponseValidationError) ErrorName() string {
	return "GetGCPRoleGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGCPRoleGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGCPRoleGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGCPRoleGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGCPRoleGroupResponseValidationError{}

// Validate checks the field values on UpdateGCPRoleGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGCPRoleGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGCPRoleGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGCPRoleGroupRequestMultiError, or nil if none found.
func (m *UpdateGCPRoleGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGCPRoleGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGCPRoleGroupRequestValidationError{
					field:  "RoleGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGCPRoleGroupRequestValidationError{
					field:  "RoleGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGCPRoleGroupRequestValidationError{
				field:  "RoleGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGCPRoleGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateGCPRoleGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGCPRoleGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateGCPRoleGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGCPRoleGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGCPRoleGroupRequestMultiError) AllErrors() []error { return m }

// UpdateGCPRoleGroupRequestValidationError is the validation error returned by
// UpdateGCPRoleGroupRequest.Validate if the designated constraints aren't met.
type UpdateGCPRoleGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGCPRoleGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGCPRoleGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGCPRoleGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGCPRoleGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGCPRoleGroupRequestValidationError) ErrorName() string {
	return "UpdateGCPRoleGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGCPRoleGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGCPRoleGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGCPRoleGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGCPRoleGroupRequestValidationError{}

// Validate checks the field values on UpdateGCPRoleGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGCPRoleGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGCPRoleGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGCPRoleGroupResponseMultiError, or nil if none found.
func (m *UpdateGCPRoleGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGCPRoleGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGCPRoleGroupResponseValidationError{
					field:  "RoleGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGCPRoleGroupResponseValidationError{
					field:  "RoleGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGCPRoleGroupResponseValidationError{
				field:  "RoleGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGCPRoleGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateGCPRoleGroupResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateGCPRoleGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateGCPRoleGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGCPRoleGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGCPRoleGroupResponseMultiError) AllErrors() []error { return m }

// UpdateGCPRoleGroupResponseValidationError is the validation error returned
// by UpdateGCPRoleGroupResponse.Validate if the designated constraints aren't met.
type UpdateGCPRoleGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGCPRoleGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGCPRoleGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGCPRoleGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGCPRoleGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGCPRoleGroupResponseValidationError) ErrorName() string {
	return "UpdateGCPRoleGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGCPRoleGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGCPRoleGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGCPRoleGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGCPRoleGroupResponseValidationError{}

// Validate checks the field values on DeleteGCPRoleGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGCPRoleGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGCPRoleGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGCPRoleGroupRequestMultiError, or nil if none found.
func (m *DeleteGCPRoleGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGCPRoleGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGCPRoleGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGCPRoleGroupRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteGCPRoleGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteGCPRoleGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGCPRoleGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGCPRoleGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGCPRoleGroupRequestValidationError is the validation error returned by
// DeleteGCPRoleGroupRequest.Validate if the designated constraints aren't met.
type DeleteGCPRoleGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGCPRoleGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGCPRoleGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGCPRoleGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGCPRoleGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGCPRoleGroupRequestValidationError) ErrorName() string {
	return "DeleteGCPRoleGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGCPRoleGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGCPRoleGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGCPRoleGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGCPRoleGroupRequestValidationError{}

// Validate checks the field values on DeleteGCPRoleGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGCPRoleGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGCPRoleGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGCPRoleGroupResponseMultiError, or nil if none found.
func (m *DeleteGCPRoleGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGCPRoleGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGCPRoleGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteGCPRoleGroupResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteGCPRoleGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteGCPRoleGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGCPRoleGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGCPRoleGroupResponseMultiError) AllErrors() []error { return m }

// DeleteGCPRoleGroupResponseValidationError is the validation error returned
// by DeleteGCPRoleGroupResponse.Validate if the designated constraints aren't met.
type DeleteGCPRoleGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGCPRoleGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGCPRoleGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGCPRoleGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGCPRoleGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGCPRoleGroupResponseValidationError) ErrorName() string {
	return "DeleteGCPRoleGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGCPRoleGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGCPRoleGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGCPRoleGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGCPRoleGroupResponseValidationError{}
