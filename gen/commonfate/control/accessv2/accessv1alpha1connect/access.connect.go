// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/accessv2/access.proto

package accessv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/access/v1alpha1"
	accessv2 "github.com/common-fate/sdk/gen/commonfate/control/accessv2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccessV2ServiceName is the fully-qualified name of the AccessV2Service service.
	AccessV2ServiceName = "commonfate.access.v1alpha1.AccessV2Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccessV2ServiceQueryAvailabilitiesV2Procedure is the fully-qualified name of the
	// AccessV2Service's QueryAvailabilitiesV2 RPC.
	AccessV2ServiceQueryAvailabilitiesV2Procedure = "/commonfate.access.v1alpha1.AccessV2Service/QueryAvailabilitiesV2"
	// AccessV2ServiceQueryEntitlementsV2Procedure is the fully-qualified name of the AccessV2Service's
	// QueryEntitlementsV2 RPC.
	AccessV2ServiceQueryEntitlementsV2Procedure = "/commonfate.access.v1alpha1.AccessV2Service/QueryEntitlementsV2"
	// AccessV2ServiceQueryApproversV2Procedure is the fully-qualified name of the AccessV2Service's
	// QueryApproversV2 RPC.
	AccessV2ServiceQueryApproversV2Procedure = "/commonfate.access.v1alpha1.AccessV2Service/QueryApproversV2"
	// AccessV2ServicePreviewUserAccessV2Procedure is the fully-qualified name of the AccessV2Service's
	// PreviewUserAccessV2 RPC.
	AccessV2ServicePreviewUserAccessV2Procedure = "/commonfate.access.v1alpha1.AccessV2Service/PreviewUserAccessV2"
	// AccessV2ServicePreviewEntitlementAccessV2Procedure is the fully-qualified name of the
	// AccessV2Service's PreviewEntitlementAccessV2 RPC.
	AccessV2ServicePreviewEntitlementAccessV2Procedure = "/commonfate.access.v1alpha1.AccessV2Service/PreviewEntitlementAccessV2"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accessV2ServiceServiceDescriptor                          = accessv2.File_commonfate_control_accessv2_access_proto.Services().ByName("AccessV2Service")
	accessV2ServiceQueryAvailabilitiesV2MethodDescriptor      = accessV2ServiceServiceDescriptor.Methods().ByName("QueryAvailabilitiesV2")
	accessV2ServiceQueryEntitlementsV2MethodDescriptor        = accessV2ServiceServiceDescriptor.Methods().ByName("QueryEntitlementsV2")
	accessV2ServiceQueryApproversV2MethodDescriptor           = accessV2ServiceServiceDescriptor.Methods().ByName("QueryApproversV2")
	accessV2ServicePreviewUserAccessV2MethodDescriptor        = accessV2ServiceServiceDescriptor.Methods().ByName("PreviewUserAccessV2")
	accessV2ServicePreviewEntitlementAccessV2MethodDescriptor = accessV2ServiceServiceDescriptor.Methods().ByName("PreviewEntitlementAccessV2")
)

// AccessV2ServiceClient is a client for the commonfate.access.v1alpha1.AccessV2Service service.
type AccessV2ServiceClient interface {
	// Query for JIT availabilities.
	QueryAvailabilitiesV2(context.Context, *connect.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v1alpha1.QueryAvailabilitiesResponse], error)
	QueryEntitlementsV2(context.Context, *connect.Request[v1alpha1.QueryEntitlementsRequest]) (*connect.Response[v1alpha1.QueryEntitlementsResponse], error)
	QueryApproversV2(context.Context, *connect.Request[v1alpha1.QueryApproversRequest]) (*connect.Response[v1alpha1.QueryApproversResponse], error)
	PreviewUserAccessV2(context.Context, *connect.Request[v1alpha1.PreviewUserAccessRequest]) (*connect.Response[v1alpha1.PreviewUserAccessResponse], error)
	PreviewEntitlementAccessV2(context.Context, *connect.Request[v1alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v1alpha1.PreviewEntitlementAccessResponse], error)
}

// NewAccessV2ServiceClient constructs a client for the commonfate.access.v1alpha1.AccessV2Service
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccessV2ServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccessV2ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accessV2ServiceClient{
		queryAvailabilitiesV2: connect.NewClient[v1alpha1.QueryAvailabilitiesRequest, v1alpha1.QueryAvailabilitiesResponse](
			httpClient,
			baseURL+AccessV2ServiceQueryAvailabilitiesV2Procedure,
			connect.WithSchema(accessV2ServiceQueryAvailabilitiesV2MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryEntitlementsV2: connect.NewClient[v1alpha1.QueryEntitlementsRequest, v1alpha1.QueryEntitlementsResponse](
			httpClient,
			baseURL+AccessV2ServiceQueryEntitlementsV2Procedure,
			connect.WithSchema(accessV2ServiceQueryEntitlementsV2MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryApproversV2: connect.NewClient[v1alpha1.QueryApproversRequest, v1alpha1.QueryApproversResponse](
			httpClient,
			baseURL+AccessV2ServiceQueryApproversV2Procedure,
			connect.WithSchema(accessV2ServiceQueryApproversV2MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		previewUserAccessV2: connect.NewClient[v1alpha1.PreviewUserAccessRequest, v1alpha1.PreviewUserAccessResponse](
			httpClient,
			baseURL+AccessV2ServicePreviewUserAccessV2Procedure,
			connect.WithSchema(accessV2ServicePreviewUserAccessV2MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		previewEntitlementAccessV2: connect.NewClient[v1alpha1.PreviewEntitlementAccessRequest, v1alpha1.PreviewEntitlementAccessResponse](
			httpClient,
			baseURL+AccessV2ServicePreviewEntitlementAccessV2Procedure,
			connect.WithSchema(accessV2ServicePreviewEntitlementAccessV2MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accessV2ServiceClient implements AccessV2ServiceClient.
type accessV2ServiceClient struct {
	queryAvailabilitiesV2      *connect.Client[v1alpha1.QueryAvailabilitiesRequest, v1alpha1.QueryAvailabilitiesResponse]
	queryEntitlementsV2        *connect.Client[v1alpha1.QueryEntitlementsRequest, v1alpha1.QueryEntitlementsResponse]
	queryApproversV2           *connect.Client[v1alpha1.QueryApproversRequest, v1alpha1.QueryApproversResponse]
	previewUserAccessV2        *connect.Client[v1alpha1.PreviewUserAccessRequest, v1alpha1.PreviewUserAccessResponse]
	previewEntitlementAccessV2 *connect.Client[v1alpha1.PreviewEntitlementAccessRequest, v1alpha1.PreviewEntitlementAccessResponse]
}

// QueryAvailabilitiesV2 calls commonfate.access.v1alpha1.AccessV2Service.QueryAvailabilitiesV2.
func (c *accessV2ServiceClient) QueryAvailabilitiesV2(ctx context.Context, req *connect.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v1alpha1.QueryAvailabilitiesResponse], error) {
	return c.queryAvailabilitiesV2.CallUnary(ctx, req)
}

// QueryEntitlementsV2 calls commonfate.access.v1alpha1.AccessV2Service.QueryEntitlementsV2.
func (c *accessV2ServiceClient) QueryEntitlementsV2(ctx context.Context, req *connect.Request[v1alpha1.QueryEntitlementsRequest]) (*connect.Response[v1alpha1.QueryEntitlementsResponse], error) {
	return c.queryEntitlementsV2.CallUnary(ctx, req)
}

// QueryApproversV2 calls commonfate.access.v1alpha1.AccessV2Service.QueryApproversV2.
func (c *accessV2ServiceClient) QueryApproversV2(ctx context.Context, req *connect.Request[v1alpha1.QueryApproversRequest]) (*connect.Response[v1alpha1.QueryApproversResponse], error) {
	return c.queryApproversV2.CallUnary(ctx, req)
}

// PreviewUserAccessV2 calls commonfate.access.v1alpha1.AccessV2Service.PreviewUserAccessV2.
func (c *accessV2ServiceClient) PreviewUserAccessV2(ctx context.Context, req *connect.Request[v1alpha1.PreviewUserAccessRequest]) (*connect.Response[v1alpha1.PreviewUserAccessResponse], error) {
	return c.previewUserAccessV2.CallUnary(ctx, req)
}

// PreviewEntitlementAccessV2 calls
// commonfate.access.v1alpha1.AccessV2Service.PreviewEntitlementAccessV2.
func (c *accessV2ServiceClient) PreviewEntitlementAccessV2(ctx context.Context, req *connect.Request[v1alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v1alpha1.PreviewEntitlementAccessResponse], error) {
	return c.previewEntitlementAccessV2.CallUnary(ctx, req)
}

// AccessV2ServiceHandler is an implementation of the commonfate.access.v1alpha1.AccessV2Service
// service.
type AccessV2ServiceHandler interface {
	// Query for JIT availabilities.
	QueryAvailabilitiesV2(context.Context, *connect.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v1alpha1.QueryAvailabilitiesResponse], error)
	QueryEntitlementsV2(context.Context, *connect.Request[v1alpha1.QueryEntitlementsRequest]) (*connect.Response[v1alpha1.QueryEntitlementsResponse], error)
	QueryApproversV2(context.Context, *connect.Request[v1alpha1.QueryApproversRequest]) (*connect.Response[v1alpha1.QueryApproversResponse], error)
	PreviewUserAccessV2(context.Context, *connect.Request[v1alpha1.PreviewUserAccessRequest]) (*connect.Response[v1alpha1.PreviewUserAccessResponse], error)
	PreviewEntitlementAccessV2(context.Context, *connect.Request[v1alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v1alpha1.PreviewEntitlementAccessResponse], error)
}

// NewAccessV2ServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccessV2ServiceHandler(svc AccessV2ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accessV2ServiceQueryAvailabilitiesV2Handler := connect.NewUnaryHandler(
		AccessV2ServiceQueryAvailabilitiesV2Procedure,
		svc.QueryAvailabilitiesV2,
		connect.WithSchema(accessV2ServiceQueryAvailabilitiesV2MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessV2ServiceQueryEntitlementsV2Handler := connect.NewUnaryHandler(
		AccessV2ServiceQueryEntitlementsV2Procedure,
		svc.QueryEntitlementsV2,
		connect.WithSchema(accessV2ServiceQueryEntitlementsV2MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessV2ServiceQueryApproversV2Handler := connect.NewUnaryHandler(
		AccessV2ServiceQueryApproversV2Procedure,
		svc.QueryApproversV2,
		connect.WithSchema(accessV2ServiceQueryApproversV2MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessV2ServicePreviewUserAccessV2Handler := connect.NewUnaryHandler(
		AccessV2ServicePreviewUserAccessV2Procedure,
		svc.PreviewUserAccessV2,
		connect.WithSchema(accessV2ServicePreviewUserAccessV2MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accessV2ServicePreviewEntitlementAccessV2Handler := connect.NewUnaryHandler(
		AccessV2ServicePreviewEntitlementAccessV2Procedure,
		svc.PreviewEntitlementAccessV2,
		connect.WithSchema(accessV2ServicePreviewEntitlementAccessV2MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.access.v1alpha1.AccessV2Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccessV2ServiceQueryAvailabilitiesV2Procedure:
			accessV2ServiceQueryAvailabilitiesV2Handler.ServeHTTP(w, r)
		case AccessV2ServiceQueryEntitlementsV2Procedure:
			accessV2ServiceQueryEntitlementsV2Handler.ServeHTTP(w, r)
		case AccessV2ServiceQueryApproversV2Procedure:
			accessV2ServiceQueryApproversV2Handler.ServeHTTP(w, r)
		case AccessV2ServicePreviewUserAccessV2Procedure:
			accessV2ServicePreviewUserAccessV2Handler.ServeHTTP(w, r)
		case AccessV2ServicePreviewEntitlementAccessV2Procedure:
			accessV2ServicePreviewEntitlementAccessV2Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccessV2ServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccessV2ServiceHandler struct{}

func (UnimplementedAccessV2ServiceHandler) QueryAvailabilitiesV2(context.Context, *connect.Request[v1alpha1.QueryAvailabilitiesRequest]) (*connect.Response[v1alpha1.QueryAvailabilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.QueryAvailabilitiesV2 is not implemented"))
}

func (UnimplementedAccessV2ServiceHandler) QueryEntitlementsV2(context.Context, *connect.Request[v1alpha1.QueryEntitlementsRequest]) (*connect.Response[v1alpha1.QueryEntitlementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.QueryEntitlementsV2 is not implemented"))
}

func (UnimplementedAccessV2ServiceHandler) QueryApproversV2(context.Context, *connect.Request[v1alpha1.QueryApproversRequest]) (*connect.Response[v1alpha1.QueryApproversResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.QueryApproversV2 is not implemented"))
}

func (UnimplementedAccessV2ServiceHandler) PreviewUserAccessV2(context.Context, *connect.Request[v1alpha1.PreviewUserAccessRequest]) (*connect.Response[v1alpha1.PreviewUserAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.PreviewUserAccessV2 is not implemented"))
}

func (UnimplementedAccessV2ServiceHandler) PreviewEntitlementAccessV2(context.Context, *connect.Request[v1alpha1.PreviewEntitlementAccessRequest]) (*connect.Response[v1alpha1.PreviewEntitlementAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.access.v1alpha1.AccessV2Service.PreviewEntitlementAccessV2 is not implemented"))
}
