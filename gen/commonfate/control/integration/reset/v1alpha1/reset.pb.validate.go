// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/integration/reset/v1alpha1/reset.proto

package resetv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ResetEntraUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetEntraUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetEntraUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetEntraUsersRequestMultiError, or nil if none found.
func (m *ResetEntraUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetEntraUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DryRun

	if len(errors) > 0 {
		return ResetEntraUsersRequestMultiError(errors)
	}

	return nil
}

// ResetEntraUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ResetEntraUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetEntraUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetEntraUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetEntraUsersRequestMultiError) AllErrors() []error { return m }

// ResetEntraUsersRequestValidationError is the validation error returned by
// ResetEntraUsersRequest.Validate if the designated constraints aren't met.
type ResetEntraUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetEntraUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetEntraUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetEntraUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetEntraUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetEntraUsersRequestValidationError) ErrorName() string {
	return "ResetEntraUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetEntraUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetEntraUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetEntraUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetEntraUsersRequestValidationError{}

// Validate checks the field values on ResetEntraUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetEntraUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetEntraUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetEntraUsersResponseMultiError, or nil if none found.
func (m *ResetEntraUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetEntraUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeletedEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResetEntraUsersResponseValidationError{
						field:  fmt.Sprintf("DeletedEntities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResetEntraUsersResponseValidationError{
						field:  fmt.Sprintf("DeletedEntities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResetEntraUsersResponseValidationError{
					field:  fmt.Sprintf("DeletedEntities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResetEntraUsersResponseMultiError(errors)
	}

	return nil
}

// ResetEntraUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ResetEntraUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ResetEntraUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetEntraUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetEntraUsersResponseMultiError) AllErrors() []error { return m }

// ResetEntraUsersResponseValidationError is the validation error returned by
// ResetEntraUsersResponse.Validate if the designated constraints aren't met.
type ResetEntraUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetEntraUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetEntraUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetEntraUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetEntraUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetEntraUsersResponseValidationError) ErrorName() string {
	return "ResetEntraUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetEntraUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetEntraUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetEntraUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetEntraUsersResponseValidationError{}

// Validate checks the field values on RelinkEntraUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelinkEntraUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelinkEntraUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelinkEntraUsersRequestMultiError, or nil if none found.
func (m *RelinkEntraUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RelinkEntraUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RelinkEntraUsersRequestMultiError(errors)
	}

	return nil
}

// RelinkEntraUsersRequestMultiError is an error wrapping multiple validation
// errors returned by RelinkEntraUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type RelinkEntraUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelinkEntraUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelinkEntraUsersRequestMultiError) AllErrors() []error { return m }

// RelinkEntraUsersRequestValidationError is the validation error returned by
// RelinkEntraUsersRequest.Validate if the designated constraints aren't met.
type RelinkEntraUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelinkEntraUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelinkEntraUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelinkEntraUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelinkEntraUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelinkEntraUsersRequestValidationError) ErrorName() string {
	return "RelinkEntraUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelinkEntraUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelinkEntraUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelinkEntraUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelinkEntraUsersRequestValidationError{}

// Validate checks the field values on RelinkEntraUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelinkEntraUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelinkEntraUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelinkEntraUsersResponseMultiError, or nil if none found.
func (m *RelinkEntraUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RelinkEntraUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RelinkEntraUsersResponseMultiError(errors)
	}

	return nil
}

// RelinkEntraUsersResponseMultiError is an error wrapping multiple validation
// errors returned by RelinkEntraUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type RelinkEntraUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelinkEntraUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelinkEntraUsersResponseMultiError) AllErrors() []error { return m }

// RelinkEntraUsersResponseValidationError is the validation error returned by
// RelinkEntraUsersResponse.Validate if the designated constraints aren't met.
type RelinkEntraUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelinkEntraUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelinkEntraUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelinkEntraUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelinkEntraUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelinkEntraUsersResponseValidationError) ErrorName() string {
	return "RelinkEntraUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RelinkEntraUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelinkEntraUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelinkEntraUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelinkEntraUsersResponseValidationError{}

// Validate checks the field values on RemoveOAuthTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOAuthTokenRequestMultiError, or nil if none found.
func (m *RemoveOAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveOAuthTokenRequestMultiError(errors)
	}

	return nil
}

// RemoveOAuthTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveOAuthTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveOAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOAuthTokenRequestMultiError) AllErrors() []error { return m }

// RemoveOAuthTokenRequestValidationError is the validation error returned by
// RemoveOAuthTokenRequest.Validate if the designated constraints aren't met.
type RemoveOAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOAuthTokenRequestValidationError) ErrorName() string {
	return "RemoveOAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOAuthTokenRequestValidationError{}

// Validate checks the field values on RemoveOAuthTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOAuthTokenResponseMultiError, or nil if none found.
func (m *RemoveOAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveOAuthTokenResponseMultiError(errors)
	}

	return nil
}

// RemoveOAuthTokenResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveOAuthTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveOAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOAuthTokenResponseMultiError) AllErrors() []error { return m }

// RemoveOAuthTokenResponseValidationError is the validation error returned by
// RemoveOAuthTokenResponse.Validate if the designated constraints aren't met.
type RemoveOAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOAuthTokenResponseValidationError) ErrorName() string {
	return "RemoveOAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOAuthTokenResponseValidationError{}

// Validate checks the field values on CancelBackgroundJobRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelBackgroundJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelBackgroundJobRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelBackgroundJobRequestMultiError, or nil if none found.
func (m *CancelBackgroundJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBackgroundJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CancelBackgroundJobRequestMultiError(errors)
	}

	return nil
}

// CancelBackgroundJobRequestMultiError is an error wrapping multiple
// validation errors returned by CancelBackgroundJobRequest.ValidateAll() if
// the designated constraints aren't met.
type CancelBackgroundJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBackgroundJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBackgroundJobRequestMultiError) AllErrors() []error { return m }

// CancelBackgroundJobRequestValidationError is the validation error returned
// by CancelBackgroundJobRequest.Validate if the designated constraints aren't met.
type CancelBackgroundJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBackgroundJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBackgroundJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBackgroundJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBackgroundJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBackgroundJobRequestValidationError) ErrorName() string {
	return "CancelBackgroundJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBackgroundJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBackgroundJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBackgroundJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBackgroundJobRequestValidationError{}

// Validate checks the field values on CancelBackgroundJobResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelBackgroundJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelBackgroundJobResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelBackgroundJobResponseMultiError, or nil if none found.
func (m *CancelBackgroundJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBackgroundJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelBackgroundJobResponseMultiError(errors)
	}

	return nil
}

// CancelBackgroundJobResponseMultiError is an error wrapping multiple
// validation errors returned by CancelBackgroundJobResponse.ValidateAll() if
// the designated constraints aren't met.
type CancelBackgroundJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBackgroundJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBackgroundJobResponseMultiError) AllErrors() []error { return m }

// CancelBackgroundJobResponseValidationError is the validation error returned
// by CancelBackgroundJobResponse.Validate if the designated constraints
// aren't met.
type CancelBackgroundJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBackgroundJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBackgroundJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBackgroundJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBackgroundJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBackgroundJobResponseValidationError) ErrorName() string {
	return "CancelBackgroundJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBackgroundJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBackgroundJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBackgroundJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBackgroundJobResponseValidationError{}

// Validate checks the field values on RetryBackgroundJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetryBackgroundJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryBackgroundJobRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetryBackgroundJobRequestMultiError, or nil if none found.
func (m *RetryBackgroundJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryBackgroundJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RetryBackgroundJobRequestMultiError(errors)
	}

	return nil
}

// RetryBackgroundJobRequestMultiError is an error wrapping multiple validation
// errors returned by RetryBackgroundJobRequest.ValidateAll() if the
// designated constraints aren't met.
type RetryBackgroundJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryBackgroundJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryBackgroundJobRequestMultiError) AllErrors() []error { return m }

// RetryBackgroundJobRequestValidationError is the validation error returned by
// RetryBackgroundJobRequest.Validate if the designated constraints aren't met.
type RetryBackgroundJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryBackgroundJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryBackgroundJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryBackgroundJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryBackgroundJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryBackgroundJobRequestValidationError) ErrorName() string {
	return "RetryBackgroundJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetryBackgroundJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryBackgroundJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryBackgroundJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryBackgroundJobRequestValidationError{}

// Validate checks the field values on RetryBackgroundJobResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetryBackgroundJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryBackgroundJobResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetryBackgroundJobResponseMultiError, or nil if none found.
func (m *RetryBackgroundJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryBackgroundJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RetryBackgroundJobResponseMultiError(errors)
	}

	return nil
}

// RetryBackgroundJobResponseMultiError is an error wrapping multiple
// validation errors returned by RetryBackgroundJobResponse.ValidateAll() if
// the designated constraints aren't met.
type RetryBackgroundJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryBackgroundJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryBackgroundJobResponseMultiError) AllErrors() []error { return m }

// RetryBackgroundJobResponseValidationError is the validation error returned
// by RetryBackgroundJobResponse.Validate if the designated constraints aren't met.
type RetryBackgroundJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryBackgroundJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryBackgroundJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryBackgroundJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryBackgroundJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryBackgroundJobResponseValidationError) ErrorName() string {
	return "RetryBackgroundJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetryBackgroundJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryBackgroundJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryBackgroundJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryBackgroundJobResponseValidationError{}
