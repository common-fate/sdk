// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/integration/v1alpha1/proxy_resource.proto

package integrationv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Resource.(type) {
	case *Resource_AwsRdsDatabase:
		if v == nil {
			err := ResourceValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsRdsDatabase()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  "AwsRdsDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  "AwsRdsDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsRdsDatabase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  "AwsRdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on CreateProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProxyResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProxyResourceRequestMultiError, or nil if none found.
func (m *CreateProxyResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProxyResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProxyResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProxyResourceRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProxyResourceRequestMultiError(errors)
	}

	return nil
}

// CreateProxyResourceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProxyResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProxyResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyResourceRequestMultiError) AllErrors() []error { return m }

// CreateProxyResourceRequestValidationError is the validation error returned
// by CreateProxyResourceRequest.Validate if the designated constraints aren't met.
type CreateProxyResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyResourceRequestValidationError) ErrorName() string {
	return "CreateProxyResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyResourceRequestValidationError{}

// Validate checks the field values on CreateProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProxyResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProxyResourceResponseMultiError, or nil if none found.
func (m *CreateProxyResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProxyResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProxyResourceResponseMultiError(errors)
	}

	return nil
}

// CreateProxyResourceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProxyResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateProxyResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyResourceResponseMultiError) AllErrors() []error { return m }

// CreateProxyResourceResponseValidationError is the validation error returned
// by CreateProxyResourceResponse.Validate if the designated constraints
// aren't met.
type CreateProxyResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyResourceResponseValidationError) ErrorName() string {
	return "CreateProxyResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyResourceResponseValidationError{}

// Validate checks the field values on GetProxyResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProxyResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyResourceRequestMultiError, or nil if none found.
func (m *GetProxyResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if len(errors) > 0 {
		return GetProxyResourceRequestMultiError(errors)
	}

	return nil
}

// GetProxyResourceRequestMultiError is an error wrapping multiple validation
// errors returned by GetProxyResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProxyResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyResourceRequestMultiError) AllErrors() []error { return m }

// GetProxyResourceRequestValidationError is the validation error returned by
// GetProxyResourceRequest.Validate if the designated constraints aren't met.
type GetProxyResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyResourceRequestValidationError) ErrorName() string {
	return "GetProxyResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyResourceRequestValidationError{}

// Validate checks the field values on GetProxyResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProxyResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyResourceResponseMultiError, or nil if none found.
func (m *GetProxyResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProxyResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProxyResourceResponseMultiError(errors)
	}

	return nil
}

// GetProxyResourceResponseMultiError is an error wrapping multiple validation
// errors returned by GetProxyResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProxyResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyResourceResponseMultiError) AllErrors() []error { return m }

// GetProxyResourceResponseValidationError is the validation error returned by
// GetProxyResourceResponse.Validate if the designated constraints aren't met.
type GetProxyResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyResourceResponseValidationError) ErrorName() string {
	return "GetProxyResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyResourceResponseValidationError{}

// Validate checks the field values on UpdateProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProxyResourceRequestMultiError, or nil if none found.
func (m *UpdateProxyResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyResourceRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProxyResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateProxyResourceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProxyResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProxyResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyResourceRequestMultiError) AllErrors() []error { return m }

// UpdateProxyResourceRequestValidationError is the validation error returned
// by UpdateProxyResourceRequest.Validate if the designated constraints aren't met.
type UpdateProxyResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyResourceRequestValidationError) ErrorName() string {
	return "UpdateProxyResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyResourceRequestValidationError{}

// Validate checks the field values on UpdateProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProxyResourceResponseMultiError, or nil if none found.
func (m *UpdateProxyResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProxyResourceResponseMultiError(errors)
	}

	return nil
}

// UpdateProxyResourceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProxyResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateProxyResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyResourceResponseMultiError) AllErrors() []error { return m }

// UpdateProxyResourceResponseValidationError is the validation error returned
// by UpdateProxyResourceResponse.Validate if the designated constraints
// aren't met.
type UpdateProxyResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyResourceResponseValidationError) ErrorName() string {
	return "UpdateProxyResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyResourceResponseValidationError{}

// Validate checks the field values on DeleteProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProxyResourceRequestMultiError, or nil if none found.
func (m *DeleteProxyResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteProxyResourceRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProxyResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProxyResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyResourceRequestMultiError) AllErrors() []error { return m }

// DeleteProxyResourceRequestValidationError is the validation error returned
// by DeleteProxyResourceRequest.Validate if the designated constraints aren't met.
type DeleteProxyResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyResourceRequestValidationError) ErrorName() string {
	return "DeleteProxyResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyResourceRequestValidationError{}

// Validate checks the field values on DeleteProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProxyResourceResponseMultiError, or nil if none found.
func (m *DeleteProxyResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyResourceResponseMultiError(errors)
	}

	return nil
}

// DeleteProxyResourceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProxyResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteProxyResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyResourceResponseMultiError) AllErrors() []error { return m }

// DeleteProxyResourceResponseValidationError is the validation error returned
// by DeleteProxyResourceResponse.Validate if the designated constraints
// aren't met.
type DeleteProxyResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyResourceResponseValidationError) ErrorName() string {
	return "DeleteProxyResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyResourceResponseValidationError{}

// Validate checks the field values on ListProxyResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProxyResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProxyResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProxyResourcesRequestMultiError, or nil if none found.
func (m *ListProxyResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProxyResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	if len(errors) > 0 {
		return ListProxyResourcesRequestMultiError(errors)
	}

	return nil
}

// ListProxyResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by ListProxyResourcesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListProxyResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProxyResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProxyResourcesRequestMultiError) AllErrors() []error { return m }

// ListProxyResourcesRequestValidationError is the validation error returned by
// ListProxyResourcesRequest.Validate if the designated constraints aren't met.
type ListProxyResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProxyResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProxyResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProxyResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProxyResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProxyResourcesRequestValidationError) ErrorName() string {
	return "ListProxyResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProxyResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProxyResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProxyResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProxyResourcesRequestValidationError{}

// Validate checks the field values on ListProxyResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProxyResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProxyResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProxyResourcesResponseMultiError, or nil if none found.
func (m *ListProxyResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProxyResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProxyResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProxyResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProxyResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProxyResourcesResponseMultiError(errors)
	}

	return nil
}

// ListProxyResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by ListProxyResourcesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProxyResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProxyResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProxyResourcesResponseMultiError) AllErrors() []error { return m }

// ListProxyResourcesResponseValidationError is the validation error returned
// by ListProxyResourcesResponse.Validate if the designated constraints aren't met.
type ListProxyResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProxyResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProxyResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProxyResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProxyResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProxyResourcesResponseValidationError) ErrorName() string {
	return "ListProxyResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProxyResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProxyResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProxyResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProxyResourcesResponseValidationError{}
