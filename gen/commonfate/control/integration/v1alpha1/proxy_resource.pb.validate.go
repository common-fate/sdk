// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/integration/v1alpha1/proxy_resource.proto

package integrationv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Resource.(type) {
	case *Resource_AwsRdsDatabase:
		if v == nil {
			err := ResourceValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsRdsDatabase()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  "AwsRdsDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  "AwsRdsDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsRdsDatabase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  "AwsRdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on RegisterProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterProxyResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterProxyResourceRequestMultiError, or nil if none found.
func (m *RegisterProxyResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterProxyResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterProxyResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterProxyResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterProxyResourceRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterProxyResourceRequestMultiError(errors)
	}

	return nil
}

// RegisterProxyResourceRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterProxyResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterProxyResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterProxyResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterProxyResourceRequestMultiError) AllErrors() []error { return m }

// RegisterProxyResourceRequestValidationError is the validation error returned
// by RegisterProxyResourceRequest.Validate if the designated constraints
// aren't met.
type RegisterProxyResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterProxyResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterProxyResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterProxyResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterProxyResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterProxyResourceRequestValidationError) ErrorName() string {
	return "RegisterProxyResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterProxyResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterProxyResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterProxyResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterProxyResourceRequestValidationError{}

// Validate checks the field values on RegisterProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterProxyResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterProxyResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterProxyResourceResponseMultiError, or nil if none found.
func (m *RegisterProxyResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterProxyResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterProxyResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProxyRoleArn

	// no validation rules for ProxySecurityGroupArn

	if len(errors) > 0 {
		return RegisterProxyResourceResponseMultiError(errors)
	}

	return nil
}

// RegisterProxyResourceResponseMultiError is an error wrapping multiple
// validation errors returned by RegisterProxyResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type RegisterProxyResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterProxyResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterProxyResourceResponseMultiError) AllErrors() []error { return m }

// RegisterProxyResourceResponseValidationError is the validation error
// returned by RegisterProxyResourceResponse.Validate if the designated
// constraints aren't met.
type RegisterProxyResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterProxyResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterProxyResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterProxyResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterProxyResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterProxyResourceResponseValidationError) ErrorName() string {
	return "RegisterProxyResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterProxyResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterProxyResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterProxyResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterProxyResourceResponseValidationError{}

// Validate checks the field values on GetProxyResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProxyResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyResourceRequestMultiError, or nil if none found.
func (m *GetProxyResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if len(errors) > 0 {
		return GetProxyResourceRequestMultiError(errors)
	}

	return nil
}

// GetProxyResourceRequestMultiError is an error wrapping multiple validation
// errors returned by GetProxyResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProxyResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyResourceRequestMultiError) AllErrors() []error { return m }

// GetProxyResourceRequestValidationError is the validation error returned by
// GetProxyResourceRequest.Validate if the designated constraints aren't met.
type GetProxyResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyResourceRequestValidationError) ErrorName() string {
	return "GetProxyResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyResourceRequestValidationError{}

// Validate checks the field values on GetProxyResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProxyResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyResourceResponseMultiError, or nil if none found.
func (m *GetProxyResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProxyResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProxyRoleArn

	// no validation rules for ProxySecurityGroupArn

	if len(errors) > 0 {
		return GetProxyResourceResponseMultiError(errors)
	}

	return nil
}

// GetProxyResourceResponseMultiError is an error wrapping multiple validation
// errors returned by GetProxyResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProxyResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyResourceResponseMultiError) AllErrors() []error { return m }

// GetProxyResourceResponseValidationError is the validation error returned by
// GetProxyResourceResponse.Validate if the designated constraints aren't met.
type GetProxyResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyResourceResponseValidationError) ErrorName() string {
	return "GetProxyResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyResourceResponseValidationError{}

// Validate checks the field values on UpdateProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProxyResourceRequestMultiError, or nil if none found.
func (m *UpdateProxyResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyResourceRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProxyResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateProxyResourceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProxyResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProxyResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyResourceRequestMultiError) AllErrors() []error { return m }

// UpdateProxyResourceRequestValidationError is the validation error returned
// by UpdateProxyResourceRequest.Validate if the designated constraints aren't met.
type UpdateProxyResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyResourceRequestValidationError) ErrorName() string {
	return "UpdateProxyResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyResourceRequestValidationError{}

// Validate checks the field values on UpdateProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProxyResourceResponseMultiError, or nil if none found.
func (m *UpdateProxyResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProxyRoleArn

	// no validation rules for ProxySecurityGroupArn

	if len(errors) > 0 {
		return UpdateProxyResourceResponseMultiError(errors)
	}

	return nil
}

// UpdateProxyResourceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProxyResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateProxyResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyResourceResponseMultiError) AllErrors() []error { return m }

// UpdateProxyResourceResponseValidationError is the validation error returned
// by UpdateProxyResourceResponse.Validate if the designated constraints
// aren't met.
type UpdateProxyResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyResourceResponseValidationError) ErrorName() string {
	return "UpdateProxyResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyResourceResponseValidationError{}

// Validate checks the field values on DeleteProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProxyResourceRequestMultiError, or nil if none found.
func (m *DeleteProxyResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteProxyResourceRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProxyResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProxyResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyResourceRequestMultiError) AllErrors() []error { return m }

// DeleteProxyResourceRequestValidationError is the validation error returned
// by DeleteProxyResourceRequest.Validate if the designated constraints aren't met.
type DeleteProxyResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyResourceRequestValidationError) ErrorName() string {
	return "DeleteProxyResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyResourceRequestValidationError{}

// Validate checks the field values on DeleteProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProxyResourceResponseMultiError, or nil if none found.
func (m *DeleteProxyResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyResourceResponseMultiError(errors)
	}

	return nil
}

// DeleteProxyResourceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProxyResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteProxyResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyResourceResponseMultiError) AllErrors() []error { return m }

// DeleteProxyResourceResponseValidationError is the validation error returned
// by DeleteProxyResourceResponse.Validate if the designated constraints
// aren't met.
type DeleteProxyResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyResourceResponseValidationError) ErrorName() string {
	return "DeleteProxyResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyResourceResponseValidationError{}

// Validate checks the field values on DescribeProxyResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeProxyResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeProxyResourcesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeProxyResourcesRequestMultiError, or nil if none found.
func (m *DescribeProxyResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeProxyResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	if len(errors) > 0 {
		return DescribeProxyResourcesRequestMultiError(errors)
	}

	return nil
}

// DescribeProxyResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeProxyResourcesRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeProxyResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeProxyResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeProxyResourcesRequestMultiError) AllErrors() []error { return m }

// DescribeProxyResourcesRequestValidationError is the validation error
// returned by DescribeProxyResourcesRequest.Validate if the designated
// constraints aren't met.
type DescribeProxyResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeProxyResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeProxyResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeProxyResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeProxyResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeProxyResourcesRequestValidationError) ErrorName() string {
	return "DescribeProxyResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeProxyResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeProxyResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeProxyResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeProxyResourcesRequestValidationError{}

// Validate checks the field values on DescribeProxyResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeProxyResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeProxyResourcesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeProxyResourcesResponseMultiError, or nil if none found.
func (m *DescribeProxyResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeProxyResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeProxyResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeProxyResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeProxyResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ProxyRoleArn

	// no validation rules for ProxySecurityGroupArn

	if len(errors) > 0 {
		return DescribeProxyResourcesResponseMultiError(errors)
	}

	return nil
}

// DescribeProxyResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by DescribeProxyResourcesResponse.ValidateAll()
// if the designated constraints aren't met.
type DescribeProxyResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeProxyResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeProxyResourcesResponseMultiError) AllErrors() []error { return m }

// DescribeProxyResourcesResponseValidationError is the validation error
// returned by DescribeProxyResourcesResponse.Validate if the designated
// constraints aren't met.
type DescribeProxyResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeProxyResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeProxyResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeProxyResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeProxyResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeProxyResourcesResponseValidationError) ErrorName() string {
	return "DescribeProxyResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeProxyResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeProxyResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeProxyResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeProxyResourcesResponseValidationError{}
