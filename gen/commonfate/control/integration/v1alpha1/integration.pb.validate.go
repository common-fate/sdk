// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/integration/v1alpha1/integration.proto

package integrationv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSecretRequestMultiError, or nil if none found.
func (m *CreateSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Secret

	if len(errors) > 0 {
		return CreateSecretRequestMultiError(errors)
	}

	return nil
}

// CreateSecretRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSecretRequestMultiError) AllErrors() []error { return m }

// CreateSecretRequestValidationError is the validation error returned by
// CreateSecretRequest.Validate if the designated constraints aren't met.
type CreateSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSecretRequestValidationError) ErrorName() string {
	return "CreateSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSecretRequestValidationError{}

// Validate checks the field values on CreateSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSecretResponseMultiError, or nil if none found.
func (m *CreateSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSecretResponseMultiError(errors)
	}

	return nil
}

// CreateSecretResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSecretResponseMultiError) AllErrors() []error { return m }

// CreateSecretResponseValidationError is the validation error returned by
// CreateSecretResponse.Validate if the designated constraints aren't met.
type CreateSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSecretResponseValidationError) ErrorName() string {
	return "CreateSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSecretResponseValidationError{}

// Validate checks the field values on DeleteSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSecretRequestMultiError, or nil if none found.
func (m *DeleteSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSecretRequestMultiError(errors)
	}

	return nil
}

// DeleteSecretRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSecretRequestMultiError) AllErrors() []error { return m }

// DeleteSecretRequestValidationError is the validation error returned by
// DeleteSecretRequest.Validate if the designated constraints aren't met.
type DeleteSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSecretRequestValidationError) ErrorName() string {
	return "DeleteSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSecretRequestValidationError{}

// Validate checks the field values on DeleteSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSecretResponseMultiError, or nil if none found.
func (m *DeleteSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSecretResponseMultiError(errors)
	}

	return nil
}

// DeleteSecretResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSecretResponseMultiError) AllErrors() []error { return m }

// DeleteSecretResponseValidationError is the validation error returned by
// DeleteSecretResponse.Validate if the designated constraints aren't met.
type DeleteSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSecretResponseValidationError) ErrorName() string {
	return "DeleteSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSecretResponseValidationError{}

// Validate checks the field values on ListSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecretsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretsRequestMultiError, or nil if none found.
func (m *ListSecretsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSecretsRequestMultiError(errors)
	}

	return nil
}

// ListSecretsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSecretsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSecretsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretsRequestMultiError) AllErrors() []error { return m }

// ListSecretsRequestValidationError is the validation error returned by
// ListSecretsRequest.Validate if the designated constraints aren't met.
type ListSecretsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsRequestValidationError) ErrorName() string {
	return "ListSecretsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsRequestValidationError{}

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Secret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SecretMultiError, or nil if none found.
func (m *Secret) ValidateAll() error {
	return m.validate(true)
}

func (m *Secret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Path

	if len(errors) > 0 {
		return SecretMultiError(errors)
	}

	return nil
}

// SecretMultiError is an error wrapping multiple validation errors returned by
// Secret.ValidateAll() if the designated constraints aren't met.
type SecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretMultiError) AllErrors() []error { return m }

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}

// Validate checks the field values on ListSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecretsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretsResponseMultiError, or nil if none found.
func (m *ListSecretsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecretsResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSecretsResponseMultiError(errors)
	}

	return nil
}

// ListSecretsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSecretsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSecretsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretsResponseMultiError) AllErrors() []error { return m }

// ListSecretsResponseValidationError is the validation error returned by
// ListSecretsResponse.Validate if the designated constraints aren't met.
type ListSecretsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsResponseValidationError) ErrorName() string {
	return "ListSecretsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsResponseValidationError{}

// Validate checks the field values on ListIntegrationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrationsRequestMultiError, or nil if none found.
func (m *ListIntegrationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListIntegrationsRequestMultiError(errors)
	}

	return nil
}

// ListIntegrationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListIntegrationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListIntegrationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrationsRequestMultiError) AllErrors() []error { return m }

// ListIntegrationsRequestValidationError is the validation error returned by
// ListIntegrationsRequest.Validate if the designated constraints aren't met.
type ListIntegrationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrationsRequestValidationError) ErrorName() string {
	return "ListIntegrationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrationsRequestValidationError{}

// Validate checks the field values on ListIntegrationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrationsResponseMultiError, or nil if none found.
func (m *ListIntegrationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIntegrations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIntegrationsResponseValidationError{
						field:  fmt.Sprintf("Integrations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIntegrationsResponseValidationError{
						field:  fmt.Sprintf("Integrations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIntegrationsResponseValidationError{
					field:  fmt.Sprintf("Integrations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListIntegrationsResponseMultiError(errors)
	}

	return nil
}

// ListIntegrationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListIntegrationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListIntegrationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrationsResponseMultiError) AllErrors() []error { return m }

// ListIntegrationsResponseValidationError is the validation error returned by
// ListIntegrationsResponse.Validate if the designated constraints aren't met.
type ListIntegrationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrationsResponseValidationError) ErrorName() string {
	return "ListIntegrationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrationsResponseValidationError{}

// Validate checks the field values on RegisterProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterProxyRequestMultiError, or nil if none found.
func (m *RegisterProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterProxyRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterProxyRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterProxyRequestValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.InstanceConfig.(type) {
	case *RegisterProxyRequest_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := RegisterProxyRequestValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterProxyRequestValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RegisterProxyRequestMultiError(errors)
	}

	return nil
}

// RegisterProxyRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterProxyRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterProxyRequestMultiError) AllErrors() []error { return m }

// RegisterProxyRequestValidationError is the validation error returned by
// RegisterProxyRequest.Validate if the designated constraints aren't met.
type RegisterProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterProxyRequestValidationError) ErrorName() string {
	return "RegisterProxyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterProxyRequestValidationError{}

// Validate checks the field values on RegisterProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterProxyResponseMultiError, or nil if none found.
func (m *RegisterProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterProxyResponseMultiError(errors)
	}

	return nil
}

// RegisterProxyResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterProxyResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterProxyResponseMultiError) AllErrors() []error { return m }

// RegisterProxyResponseValidationError is the validation error returned by
// RegisterProxyResponse.Validate if the designated constraints aren't met.
type RegisterProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterProxyResponseValidationError) ErrorName() string {
	return "RegisterProxyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterProxyResponseValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Resource.(type) {
	case *Resource_AwsRdsDatabase:
		if v == nil {
			err := ResourceValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsRdsDatabase()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  "AwsRdsDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  "AwsRdsDatabase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsRdsDatabase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  "AwsRdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on CreateIntegrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIntegrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIntegrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIntegrationRequestMultiError, or nil if none found.
func (m *CreateIntegrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIntegrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateIntegrationRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateIntegrationRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIntegrationRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateIntegrationRequestMultiError(errors)
	}

	return nil
}

// CreateIntegrationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateIntegrationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateIntegrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIntegrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIntegrationRequestMultiError) AllErrors() []error { return m }

// CreateIntegrationRequestValidationError is the validation error returned by
// CreateIntegrationRequest.Validate if the designated constraints aren't met.
type CreateIntegrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIntegrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIntegrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIntegrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIntegrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIntegrationRequestValidationError) ErrorName() string {
	return "CreateIntegrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIntegrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIntegrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIntegrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIntegrationRequestValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *Config_Gcp:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGcp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Gcp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Gcp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGcp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Gcp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_AwsIdc:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsIdc()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "AwsIdc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "AwsIdc",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsIdc()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "AwsIdc",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_Slack:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSlack()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Slack",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Slack",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSlack()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Slack",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_Pagerduty:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPagerduty()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Pagerduty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Pagerduty",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagerduty()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Pagerduty",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_Opsgenie:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOpsgenie()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Opsgenie",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Opsgenie",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpsgenie()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Opsgenie",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_Entra:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEntra()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Entra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Entra",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEntra()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Entra",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_Okta:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOkta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Okta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Okta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOkta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Okta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_Datastax:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDatastax()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Datastax",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Datastax",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDatastax()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Datastax",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_Webhook:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWebhook()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Webhook",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Webhook",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_Auth0:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAuth0()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Auth0",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Auth0",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuth0()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Auth0",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_S3LogDestination:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetS3LogDestination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "S3LogDestination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "S3LogDestination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetS3LogDestination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "S3LogDestination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_AwsProxy:
		if v == nil {
			err := ConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsProxy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "AwsProxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "AwsProxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsProxy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "AwsProxy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on Integration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Integration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Integration with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntegrationMultiError, or
// nil if none found.
func (m *Integration) ValidateAll() error {
	return m.validate(true)
}

func (m *Integration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	for idx, item := range m.GetDiagnostics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationValidationError{
					field:  fmt.Sprintf("Diagnostics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SetupUrl

	if len(errors) > 0 {
		return IntegrationMultiError(errors)
	}

	return nil
}

// IntegrationMultiError is an error wrapping multiple validation errors
// returned by Integration.ValidateAll() if the designated constraints aren't met.
type IntegrationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationMultiError) AllErrors() []error { return m }

// IntegrationValidationError is the validation error returned by
// Integration.Validate if the designated constraints aren't met.
type IntegrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationValidationError) ErrorName() string { return "IntegrationValidationError" }

// Error satisfies the builtin error interface
func (e IntegrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationValidationError{}

// Validate checks the field values on CreateIntegrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIntegrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIntegrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIntegrationResponseMultiError, or nil if none found.
func (m *CreateIntegrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIntegrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIntegration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateIntegrationResponseValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateIntegrationResponseValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIntegrationResponseValidationError{
				field:  "Integration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateIntegrationResponseMultiError(errors)
	}

	return nil
}

// CreateIntegrationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateIntegrationResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateIntegrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIntegrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIntegrationResponseMultiError) AllErrors() []error { return m }

// CreateIntegrationResponseValidationError is the validation error returned by
// CreateIntegrationResponse.Validate if the designated constraints aren't met.
type CreateIntegrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIntegrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIntegrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIntegrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIntegrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIntegrationResponseValidationError) ErrorName() string {
	return "CreateIntegrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIntegrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIntegrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIntegrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIntegrationResponseValidationError{}

// Validate checks the field values on GetIntegrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntegrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntegrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIntegrationRequestMultiError, or nil if none found.
func (m *GetIntegrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntegrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetIntegrationRequestMultiError(errors)
	}

	return nil
}

// GetIntegrationRequestMultiError is an error wrapping multiple validation
// errors returned by GetIntegrationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetIntegrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntegrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntegrationRequestMultiError) AllErrors() []error { return m }

// GetIntegrationRequestValidationError is the validation error returned by
// GetIntegrationRequest.Validate if the designated constraints aren't met.
type GetIntegrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntegrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntegrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntegrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntegrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntegrationRequestValidationError) ErrorName() string {
	return "GetIntegrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntegrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntegrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntegrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntegrationRequestValidationError{}

// Validate checks the field values on GetIntegrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntegrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntegrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIntegrationResponseMultiError, or nil if none found.
func (m *GetIntegrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntegrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIntegration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIntegrationResponseValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIntegrationResponseValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntegrationResponseValidationError{
				field:  "Integration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIntegrationResponseMultiError(errors)
	}

	return nil
}

// GetIntegrationResponseMultiError is an error wrapping multiple validation
// errors returned by GetIntegrationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIntegrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntegrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntegrationResponseMultiError) AllErrors() []error { return m }

// GetIntegrationResponseValidationError is the validation error returned by
// GetIntegrationResponse.Validate if the designated constraints aren't met.
type GetIntegrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntegrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntegrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntegrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntegrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntegrationResponseValidationError) ErrorName() string {
	return "GetIntegrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntegrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntegrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntegrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntegrationResponseValidationError{}

// Validate checks the field values on UpdateIntegrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIntegrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIntegrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIntegrationRequestMultiError, or nil if none found.
func (m *UpdateIntegrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIntegrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIntegration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateIntegrationRequestValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateIntegrationRequestValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIntegrationRequestValidationError{
				field:  "Integration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateIntegrationRequestMultiError(errors)
	}

	return nil
}

// UpdateIntegrationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateIntegrationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateIntegrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIntegrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIntegrationRequestMultiError) AllErrors() []error { return m }

// UpdateIntegrationRequestValidationError is the validation error returned by
// UpdateIntegrationRequest.Validate if the designated constraints aren't met.
type UpdateIntegrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIntegrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIntegrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIntegrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIntegrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIntegrationRequestValidationError) ErrorName() string {
	return "UpdateIntegrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIntegrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIntegrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIntegrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIntegrationRequestValidationError{}

// Validate checks the field values on UpdateIntegrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIntegrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIntegrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIntegrationResponseMultiError, or nil if none found.
func (m *UpdateIntegrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIntegrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIntegration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateIntegrationResponseValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateIntegrationResponseValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIntegrationResponseValidationError{
				field:  "Integration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateIntegrationResponseMultiError(errors)
	}

	return nil
}

// UpdateIntegrationResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateIntegrationResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateIntegrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIntegrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIntegrationResponseMultiError) AllErrors() []error { return m }

// UpdateIntegrationResponseValidationError is the validation error returned by
// UpdateIntegrationResponse.Validate if the designated constraints aren't met.
type UpdateIntegrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIntegrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIntegrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIntegrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIntegrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIntegrationResponseValidationError) ErrorName() string {
	return "UpdateIntegrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIntegrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIntegrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIntegrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIntegrationResponseValidationError{}

// Validate checks the field values on DeleteIntegrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIntegrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIntegrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIntegrationRequestMultiError, or nil if none found.
func (m *DeleteIntegrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIntegrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteIntegrationRequestMultiError(errors)
	}

	return nil
}

// DeleteIntegrationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteIntegrationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteIntegrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIntegrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIntegrationRequestMultiError) AllErrors() []error { return m }

// DeleteIntegrationRequestValidationError is the validation error returned by
// DeleteIntegrationRequest.Validate if the designated constraints aren't met.
type DeleteIntegrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIntegrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIntegrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIntegrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIntegrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIntegrationRequestValidationError) ErrorName() string {
	return "DeleteIntegrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIntegrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIntegrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIntegrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIntegrationRequestValidationError{}

// Validate checks the field values on DeleteIntegrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIntegrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIntegrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIntegrationResponseMultiError, or nil if none found.
func (m *DeleteIntegrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIntegrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteIntegrationResponseMultiError(errors)
	}

	return nil
}

// DeleteIntegrationResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteIntegrationResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteIntegrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIntegrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIntegrationResponseMultiError) AllErrors() []error { return m }

// DeleteIntegrationResponseValidationError is the validation error returned by
// DeleteIntegrationResponse.Validate if the designated constraints aren't met.
type DeleteIntegrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIntegrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIntegrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIntegrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIntegrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIntegrationResponseValidationError) ErrorName() string {
	return "DeleteIntegrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIntegrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIntegrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIntegrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIntegrationResponseValidationError{}
