// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/integration/v1alpha1/proxy.proto

package integrationv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProxyRequestMultiError, or nil if none found.
func (m *CreateProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProxyRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProxyRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProxyRequestValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Id

	switch v := m.InstanceConfig.(type) {
	case *CreateProxyRequest_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := CreateProxyRequestValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProxyRequestValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateProxyRequestMultiError(errors)
	}

	return nil
}

// CreateProxyRequestMultiError is an error wrapping multiple validation errors
// returned by CreateProxyRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyRequestMultiError) AllErrors() []error { return m }

// CreateProxyRequestValidationError is the validation error returned by
// CreateProxyRequest.Validate if the designated constraints aren't met.
type CreateProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyRequestValidationError) ErrorName() string {
	return "CreateProxyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyRequestValidationError{}

// Validate checks the field values on CreateProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProxyResponseMultiError, or nil if none found.
func (m *CreateProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IntegrationId

	switch v := m.InstanceConfig.(type) {
	case *CreateProxyResponse_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := CreateProxyResponseValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProxyResponseValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateProxyResponseMultiError(errors)
	}

	return nil
}

// CreateProxyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProxyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyResponseMultiError) AllErrors() []error { return m }

// CreateProxyResponseValidationError is the validation error returned by
// CreateProxyResponse.Validate if the designated constraints aren't met.
type CreateProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyResponseValidationError) ErrorName() string {
	return "CreateProxyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyResponseValidationError{}

// Validate checks the field values on GetProxyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyRequestMultiError, or nil if none found.
func (m *GetProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProxyRequestMultiError(errors)
	}

	return nil
}

// GetProxyRequestMultiError is an error wrapping multiple validation errors
// returned by GetProxyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyRequestMultiError) AllErrors() []error { return m }

// GetProxyRequestValidationError is the validation error returned by
// GetProxyRequest.Validate if the designated constraints aren't met.
type GetProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyRequestValidationError) ErrorName() string { return "GetProxyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyRequestValidationError{}

// Validate checks the field values on GetProxyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyResponseMultiError, or nil if none found.
func (m *GetProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.InstanceConfig.(type) {
	case *GetProxyResponse_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := GetProxyResponseValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProxyResponseValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetProxyResponseMultiError(errors)
	}

	return nil
}

// GetProxyResponseMultiError is an error wrapping multiple validation errors
// returned by GetProxyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyResponseMultiError) AllErrors() []error { return m }

// GetProxyResponseValidationError is the validation error returned by
// GetProxyResponse.Validate if the designated constraints aren't met.
type GetProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyResponseValidationError) ErrorName() string { return "GetProxyResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyResponseValidationError{}

// Validate checks the field values on UpdateProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProxyRequestMultiError, or nil if none found.
func (m *UpdateProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.InstanceConfig.(type) {
	case *UpdateProxyRequest_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := UpdateProxyRequestValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateProxyRequestValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateProxyRequestMultiError(errors)
	}

	return nil
}

// UpdateProxyRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateProxyRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyRequestMultiError) AllErrors() []error { return m }

// UpdateProxyRequestValidationError is the validation error returned by
// UpdateProxyRequest.Validate if the designated constraints aren't met.
type UpdateProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyRequestValidationError) ErrorName() string {
	return "UpdateProxyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyRequestValidationError{}

// Validate checks the field values on UpdateProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProxyResponseMultiError, or nil if none found.
func (m *UpdateProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.InstanceConfig.(type) {
	case *UpdateProxyResponse_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := UpdateProxyResponseValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateProxyResponseValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateProxyResponseMultiError(errors)
	}

	return nil
}

// UpdateProxyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProxyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyResponseMultiError) AllErrors() []error { return m }

// UpdateProxyResponseValidationError is the validation error returned by
// UpdateProxyResponse.Validate if the designated constraints aren't met.
type UpdateProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyResponseValidationError) ErrorName() string {
	return "UpdateProxyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyResponseValidationError{}

// Validate checks the field values on DeleteProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProxyRequestMultiError, or nil if none found.
func (m *DeleteProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyRequestMultiError(errors)
	}

	return nil
}

// DeleteProxyRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteProxyRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyRequestMultiError) AllErrors() []error { return m }

// DeleteProxyRequestValidationError is the validation error returned by
// DeleteProxyRequest.Validate if the designated constraints aren't met.
type DeleteProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyRequestValidationError) ErrorName() string {
	return "DeleteProxyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyRequestValidationError{}

// Validate checks the field values on DeleteProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProxyResponseMultiError, or nil if none found.
func (m *DeleteProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyResponseMultiError(errors)
	}

	return nil
}

// DeleteProxyResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProxyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyResponseMultiError) AllErrors() []error { return m }

// DeleteProxyResponseValidationError is the validation error returned by
// DeleteProxyResponse.Validate if the designated constraints aren't met.
type DeleteProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyResponseValidationError) ErrorName() string {
	return "DeleteProxyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyResponseValidationError{}

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetEcsTaskMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingRequestValidationError{
					field:  "EcsTaskMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingRequestValidationError{
					field:  "EcsTaskMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEcsTaskMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingRequestValidationError{
				field:  "EcsTaskMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDiagnostics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PingRequestValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PingRequestValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PingRequestValidationError{
					field:  fmt.Sprintf("Diagnostics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on ECSTaskMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ECSTaskMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ECSTaskMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ECSTaskMetadataMultiError, or nil if none found.
func (m *ECSTaskMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ECSTaskMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskArn

	// no validation rules for ClusterArn

	// no validation rules for AvailabilityZone

	// no validation rules for CpuLimit

	// no validation rules for MemoryLimit

	// no validation rules for LaunchType

	if len(errors) > 0 {
		return ECSTaskMetadataMultiError(errors)
	}

	return nil
}

// ECSTaskMetadataMultiError is an error wrapping multiple validation errors
// returned by ECSTaskMetadata.ValidateAll() if the designated constraints
// aren't met.
type ECSTaskMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ECSTaskMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ECSTaskMetadataMultiError) AllErrors() []error { return m }

// ECSTaskMetadataValidationError is the validation error returned by
// ECSTaskMetadata.Validate if the designated constraints aren't met.
type ECSTaskMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ECSTaskMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ECSTaskMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ECSTaskMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ECSTaskMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ECSTaskMetadataValidationError) ErrorName() string { return "ECSTaskMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ECSTaskMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sECSTaskMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ECSTaskMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ECSTaskMetadataValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "NextPing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "NextPing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingResponseValidationError{
				field:  "NextPing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}
