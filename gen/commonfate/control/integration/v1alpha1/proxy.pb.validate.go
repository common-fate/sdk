// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/control/integration/v1alpha1/proxy.proto

package integrationv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProxyRequestMultiError, or nil if none found.
func (m *CreateProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProxyRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProxyRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProxyRequestValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Id

	switch v := m.InstanceConfig.(type) {
	case *CreateProxyRequest_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := CreateProxyRequestValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProxyRequestValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateProxyRequestMultiError(errors)
	}

	return nil
}

// CreateProxyRequestMultiError is an error wrapping multiple validation errors
// returned by CreateProxyRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyRequestMultiError) AllErrors() []error { return m }

// CreateProxyRequestValidationError is the validation error returned by
// CreateProxyRequest.Validate if the designated constraints aren't met.
type CreateProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyRequestValidationError) ErrorName() string {
	return "CreateProxyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyRequestValidationError{}

// Validate checks the field values on CreateProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProxyResponseMultiError, or nil if none found.
func (m *CreateProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IntegrationId

	switch v := m.InstanceConfig.(type) {
	case *CreateProxyResponse_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := CreateProxyResponseValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProxyResponseValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateProxyResponseMultiError(errors)
	}

	return nil
}

// CreateProxyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProxyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyResponseMultiError) AllErrors() []error { return m }

// CreateProxyResponseValidationError is the validation error returned by
// CreateProxyResponse.Validate if the designated constraints aren't met.
type CreateProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyResponseValidationError) ErrorName() string {
	return "CreateProxyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyResponseValidationError{}

// Validate checks the field values on GetProxyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyRequestMultiError, or nil if none found.
func (m *GetProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProxyRequestMultiError(errors)
	}

	return nil
}

// GetProxyRequestMultiError is an error wrapping multiple validation errors
// returned by GetProxyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyRequestMultiError) AllErrors() []error { return m }

// GetProxyRequestValidationError is the validation error returned by
// GetProxyRequest.Validate if the designated constraints aren't met.
type GetProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyRequestValidationError) ErrorName() string { return "GetProxyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyRequestValidationError{}

// Validate checks the field values on GetProxyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyResponseMultiError, or nil if none found.
func (m *GetProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.InstanceConfig.(type) {
	case *GetProxyResponse_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := GetProxyResponseValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProxyResponseValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetProxyResponseMultiError(errors)
	}

	return nil
}

// GetProxyResponseMultiError is an error wrapping multiple validation errors
// returned by GetProxyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyResponseMultiError) AllErrors() []error { return m }

// GetProxyResponseValidationError is the validation error returned by
// GetProxyResponse.Validate if the designated constraints aren't met.
type GetProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyResponseValidationError) ErrorName() string { return "GetProxyResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyResponseValidationError{}

// Validate checks the field values on UpdateProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProxyRequestMultiError, or nil if none found.
func (m *UpdateProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.InstanceConfig.(type) {
	case *UpdateProxyRequest_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := UpdateProxyRequestValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateProxyRequestValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateProxyRequestValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateProxyRequestMultiError(errors)
	}

	return nil
}

// UpdateProxyRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateProxyRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyRequestMultiError) AllErrors() []error { return m }

// UpdateProxyRequestValidationError is the validation error returned by
// UpdateProxyRequest.Validate if the designated constraints aren't met.
type UpdateProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyRequestValidationError) ErrorName() string {
	return "UpdateProxyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyRequestValidationError{}

// Validate checks the field values on UpdateProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProxyResponseMultiError, or nil if none found.
func (m *UpdateProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.InstanceConfig.(type) {
	case *UpdateProxyResponse_AwsEcsProxyInstanceConfig:
		if v == nil {
			err := UpdateProxyResponseValidationError{
				field:  "InstanceConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsEcsProxyInstanceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateProxyResponseValidationError{
						field:  "AwsEcsProxyInstanceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsEcsProxyInstanceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateProxyResponseValidationError{
					field:  "AwsEcsProxyInstanceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateProxyResponseMultiError(errors)
	}

	return nil
}

// UpdateProxyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProxyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyResponseMultiError) AllErrors() []error { return m }

// UpdateProxyResponseValidationError is the validation error returned by
// UpdateProxyResponse.Validate if the designated constraints aren't met.
type UpdateProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyResponseValidationError) ErrorName() string {
	return "UpdateProxyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyResponseValidationError{}

// Validate checks the field values on DeleteProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProxyRequestMultiError, or nil if none found.
func (m *DeleteProxyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyRequestMultiError(errors)
	}

	return nil
}

// DeleteProxyRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteProxyRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteProxyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyRequestMultiError) AllErrors() []error { return m }

// DeleteProxyRequestValidationError is the validation error returned by
// DeleteProxyRequest.Validate if the designated constraints aren't met.
type DeleteProxyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyRequestValidationError) ErrorName() string {
	return "DeleteProxyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyRequestValidationError{}

// Validate checks the field values on DeleteProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProxyResponseMultiError, or nil if none found.
func (m *DeleteProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyResponseMultiError(errors)
	}

	return nil
}

// DeleteProxyResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProxyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyResponseMultiError) AllErrors() []error { return m }

// DeleteProxyResponseValidationError is the validation error returned by
// DeleteProxyResponse.Validate if the designated constraints aren't met.
type DeleteProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyResponseValidationError) ErrorName() string {
	return "DeleteProxyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyResponseValidationError{}

// Validate checks the field values on ListProxyResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProxyResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProxyResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProxyResourcesRequestMultiError, or nil if none found.
func (m *ListProxyResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProxyResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	if len(errors) > 0 {
		return ListProxyResourcesRequestMultiError(errors)
	}

	return nil
}

// ListProxyResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by ListProxyResourcesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListProxyResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProxyResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProxyResourcesRequestMultiError) AllErrors() []error { return m }

// ListProxyResourcesRequestValidationError is the validation error returned by
// ListProxyResourcesRequest.Validate if the designated constraints aren't met.
type ListProxyResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProxyResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProxyResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProxyResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProxyResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProxyResourcesRequestValidationError) ErrorName() string {
	return "ListProxyResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProxyResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProxyResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProxyResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProxyResourcesRequestValidationError{}

// Validate checks the field values on ListProxyResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProxyResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProxyResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProxyResourcesResponseMultiError, or nil if none found.
func (m *ListProxyResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProxyResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProxyResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProxyResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProxyResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProxyResourcesResponseMultiError(errors)
	}

	return nil
}

// ListProxyResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by ListProxyResourcesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProxyResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProxyResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProxyResourcesResponseMultiError) AllErrors() []error { return m }

// ListProxyResourcesResponseValidationError is the validation error returned
// by ListProxyResourcesResponse.Validate if the designated constraints aren't met.
type ListProxyResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProxyResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProxyResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProxyResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProxyResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProxyResourcesResponseValidationError) ErrorName() string {
	return "ListProxyResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProxyResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProxyResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProxyResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProxyResourcesResponseValidationError{}

// Validate checks the field values on CreateProxyRdsResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProxyRdsResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyRdsResourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProxyRdsResourceRequestMultiError, or nil if none found.
func (m *CreateProxyRdsResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyRdsResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetRdsDatabase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProxyRdsResourceRequestValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProxyRdsResourceRequestValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRdsDatabase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProxyRdsResourceRequestValidationError{
				field:  "RdsDatabase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProxyRdsResourceRequestMultiError(errors)
	}

	return nil
}

// CreateProxyRdsResourceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProxyRdsResourceRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateProxyRdsResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyRdsResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyRdsResourceRequestMultiError) AllErrors() []error { return m }

// CreateProxyRdsResourceRequestValidationError is the validation error
// returned by CreateProxyRdsResourceRequest.Validate if the designated
// constraints aren't met.
type CreateProxyRdsResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyRdsResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyRdsResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyRdsResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyRdsResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyRdsResourceRequestValidationError) ErrorName() string {
	return "CreateProxyRdsResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyRdsResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyRdsResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyRdsResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyRdsResourceRequestValidationError{}

// Validate checks the field values on CreateProxyRdsResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProxyRdsResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyRdsResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProxyRdsResourceResponseMultiError, or nil if none found.
func (m *CreateProxyRdsResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyRdsResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetRdsDatabase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProxyRdsResourceResponseValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProxyRdsResourceResponseValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRdsDatabase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProxyRdsResourceResponseValidationError{
				field:  "RdsDatabase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProxyRdsResourceResponseMultiError(errors)
	}

	return nil
}

// CreateProxyRdsResourceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProxyRdsResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateProxyRdsResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyRdsResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyRdsResourceResponseMultiError) AllErrors() []error { return m }

// CreateProxyRdsResourceResponseValidationError is the validation error
// returned by CreateProxyRdsResourceResponse.Validate if the designated
// constraints aren't met.
type CreateProxyRdsResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyRdsResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyRdsResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyRdsResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyRdsResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyRdsResourceResponseValidationError) ErrorName() string {
	return "CreateProxyRdsResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyRdsResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyRdsResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyRdsResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyRdsResourceResponseValidationError{}

// Validate checks the field values on GetProxyRdsResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProxyRdsResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyRdsResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyRdsResourceRequestMultiError, or nil if none found.
func (m *GetProxyRdsResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyRdsResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProxyRdsResourceRequestMultiError(errors)
	}

	return nil
}

// GetProxyRdsResourceRequestMultiError is an error wrapping multiple
// validation errors returned by GetProxyRdsResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProxyRdsResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyRdsResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyRdsResourceRequestMultiError) AllErrors() []error { return m }

// GetProxyRdsResourceRequestValidationError is the validation error returned
// by GetProxyRdsResourceRequest.Validate if the designated constraints aren't met.
type GetProxyRdsResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyRdsResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyRdsResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyRdsResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyRdsResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyRdsResourceRequestValidationError) ErrorName() string {
	return "GetProxyRdsResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyRdsResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyRdsResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyRdsResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyRdsResourceRequestValidationError{}

// Validate checks the field values on GetProxyRdsResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProxyRdsResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyRdsResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProxyRdsResourceResponseMultiError, or nil if none found.
func (m *GetProxyRdsResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyRdsResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRdsDatabase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProxyRdsResourceResponseValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProxyRdsResourceResponseValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRdsDatabase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProxyRdsResourceResponseValidationError{
				field:  "RdsDatabase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProxyRdsResourceResponseMultiError(errors)
	}

	return nil
}

// GetProxyRdsResourceResponseMultiError is an error wrapping multiple
// validation errors returned by GetProxyRdsResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetProxyRdsResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyRdsResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyRdsResourceResponseMultiError) AllErrors() []error { return m }

// GetProxyRdsResourceResponseValidationError is the validation error returned
// by GetProxyRdsResourceResponse.Validate if the designated constraints
// aren't met.
type GetProxyRdsResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyRdsResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyRdsResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyRdsResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyRdsResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyRdsResourceResponseValidationError) ErrorName() string {
	return "GetProxyRdsResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyRdsResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyRdsResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyRdsResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyRdsResourceResponseValidationError{}

// Validate checks the field values on UpdateProxyRdsResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyRdsResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyRdsResourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProxyRdsResourceRequestMultiError, or nil if none found.
func (m *UpdateProxyRdsResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyRdsResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetRdsDatabase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyRdsResourceRequestValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyRdsResourceRequestValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRdsDatabase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyRdsResourceRequestValidationError{
				field:  "RdsDatabase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProxyRdsResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateProxyRdsResourceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProxyRdsResourceRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateProxyRdsResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyRdsResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyRdsResourceRequestMultiError) AllErrors() []error { return m }

// UpdateProxyRdsResourceRequestValidationError is the validation error
// returned by UpdateProxyRdsResourceRequest.Validate if the designated
// constraints aren't met.
type UpdateProxyRdsResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyRdsResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyRdsResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyRdsResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyRdsResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyRdsResourceRequestValidationError) ErrorName() string {
	return "UpdateProxyRdsResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyRdsResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyRdsResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyRdsResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyRdsResourceRequestValidationError{}

// Validate checks the field values on UpdateProxyRdsResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProxyRdsResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyRdsResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProxyRdsResourceResponseMultiError, or nil if none found.
func (m *UpdateProxyRdsResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyRdsResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetRdsDatabase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyRdsResourceResponseValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyRdsResourceResponseValidationError{
					field:  "RdsDatabase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRdsDatabase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyRdsResourceResponseValidationError{
				field:  "RdsDatabase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProxyRdsResourceResponseMultiError(errors)
	}

	return nil
}

// UpdateProxyRdsResourceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProxyRdsResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProxyRdsResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyRdsResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyRdsResourceResponseMultiError) AllErrors() []error { return m }

// UpdateProxyRdsResourceResponseValidationError is the validation error
// returned by UpdateProxyRdsResourceResponse.Validate if the designated
// constraints aren't met.
type UpdateProxyRdsResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyRdsResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyRdsResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyRdsResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyRdsResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyRdsResourceResponseValidationError) ErrorName() string {
	return "UpdateProxyRdsResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyRdsResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyRdsResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyRdsResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyRdsResourceResponseValidationError{}

// Validate checks the field values on DeleteProxyRdsResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyRdsResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyRdsResourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProxyRdsResourceRequestMultiError, or nil if none found.
func (m *DeleteProxyRdsResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyRdsResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyRdsResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteProxyRdsResourceRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProxyRdsResourceRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteProxyRdsResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyRdsResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyRdsResourceRequestMultiError) AllErrors() []error { return m }

// DeleteProxyRdsResourceRequestValidationError is the validation error
// returned by DeleteProxyRdsResourceRequest.Validate if the designated
// constraints aren't met.
type DeleteProxyRdsResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyRdsResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyRdsResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyRdsResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyRdsResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyRdsResourceRequestValidationError) ErrorName() string {
	return "DeleteProxyRdsResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyRdsResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyRdsResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyRdsResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyRdsResourceRequestValidationError{}

// Validate checks the field values on DeleteProxyRdsResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProxyRdsResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyRdsResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProxyRdsResourceResponseMultiError, or nil if none found.
func (m *DeleteProxyRdsResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyRdsResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyRdsResourceResponseMultiError(errors)
	}

	return nil
}

// DeleteProxyRdsResourceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProxyRdsResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteProxyRdsResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyRdsResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyRdsResourceResponseMultiError) AllErrors() []error { return m }

// DeleteProxyRdsResourceResponseValidationError is the validation error
// returned by DeleteProxyRdsResourceResponse.Validate if the designated
// constraints aren't met.
type DeleteProxyRdsResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyRdsResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyRdsResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyRdsResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyRdsResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyRdsResourceResponseValidationError) ErrorName() string {
	return "DeleteProxyRdsResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyRdsResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyRdsResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyRdsResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyRdsResourceResponseValidationError{}

// Validate checks the field values on CreateProxyEksClusterResourceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateProxyEksClusterResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyEksClusterResourceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateProxyEksClusterResourceRequestMultiError, or nil if none found.
func (m *CreateProxyEksClusterResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyEksClusterResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetEksCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProxyEksClusterResourceRequestValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProxyEksClusterResourceRequestValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEksCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProxyEksClusterResourceRequestValidationError{
				field:  "EksCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProxyEksClusterResourceRequestMultiError(errors)
	}

	return nil
}

// CreateProxyEksClusterResourceRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateProxyEksClusterResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProxyEksClusterResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyEksClusterResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyEksClusterResourceRequestMultiError) AllErrors() []error { return m }

// CreateProxyEksClusterResourceRequestValidationError is the validation error
// returned by CreateProxyEksClusterResourceRequest.Validate if the designated
// constraints aren't met.
type CreateProxyEksClusterResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyEksClusterResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyEksClusterResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyEksClusterResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyEksClusterResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyEksClusterResourceRequestValidationError) ErrorName() string {
	return "CreateProxyEksClusterResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyEksClusterResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyEksClusterResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyEksClusterResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyEksClusterResourceRequestValidationError{}

// Validate checks the field values on CreateProxyEksClusterResourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateProxyEksClusterResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyEksClusterResourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateProxyEksClusterResourceResponseMultiError, or nil if none found.
func (m *CreateProxyEksClusterResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyEksClusterResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetEksCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProxyEksClusterResourceResponseValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProxyEksClusterResourceResponseValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEksCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProxyEksClusterResourceResponseValidationError{
				field:  "EksCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProxyEksClusterResourceResponseMultiError(errors)
	}

	return nil
}

// CreateProxyEksClusterResourceResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateProxyEksClusterResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProxyEksClusterResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyEksClusterResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyEksClusterResourceResponseMultiError) AllErrors() []error { return m }

// CreateProxyEksClusterResourceResponseValidationError is the validation error
// returned by CreateProxyEksClusterResourceResponse.Validate if the
// designated constraints aren't met.
type CreateProxyEksClusterResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyEksClusterResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyEksClusterResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyEksClusterResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyEksClusterResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyEksClusterResourceResponseValidationError) ErrorName() string {
	return "CreateProxyEksClusterResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyEksClusterResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyEksClusterResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyEksClusterResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyEksClusterResourceResponseValidationError{}

// Validate checks the field values on GetProxyEksClusterResourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProxyEksClusterResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyEksClusterResourceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetProxyEksClusterResourceRequestMultiError, or nil if none found.
func (m *GetProxyEksClusterResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyEksClusterResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProxyEksClusterResourceRequestMultiError(errors)
	}

	return nil
}

// GetProxyEksClusterResourceRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetProxyEksClusterResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProxyEksClusterResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyEksClusterResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyEksClusterResourceRequestMultiError) AllErrors() []error { return m }

// GetProxyEksClusterResourceRequestValidationError is the validation error
// returned by GetProxyEksClusterResourceRequest.Validate if the designated
// constraints aren't met.
type GetProxyEksClusterResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyEksClusterResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyEksClusterResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyEksClusterResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyEksClusterResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyEksClusterResourceRequestValidationError) ErrorName() string {
	return "GetProxyEksClusterResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyEksClusterResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyEksClusterResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyEksClusterResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyEksClusterResourceRequestValidationError{}

// Validate checks the field values on GetProxyEksClusterResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProxyEksClusterResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyEksClusterResourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetProxyEksClusterResourceResponseMultiError, or nil if none found.
func (m *GetProxyEksClusterResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyEksClusterResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetEksCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProxyEksClusterResourceResponseValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProxyEksClusterResourceResponseValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEksCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProxyEksClusterResourceResponseValidationError{
				field:  "EksCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProxyEksClusterResourceResponseMultiError(errors)
	}

	return nil
}

// GetProxyEksClusterResourceResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetProxyEksClusterResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProxyEksClusterResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyEksClusterResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyEksClusterResourceResponseMultiError) AllErrors() []error { return m }

// GetProxyEksClusterResourceResponseValidationError is the validation error
// returned by GetProxyEksClusterResourceResponse.Validate if the designated
// constraints aren't met.
type GetProxyEksClusterResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyEksClusterResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyEksClusterResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyEksClusterResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyEksClusterResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyEksClusterResourceResponseValidationError) ErrorName() string {
	return "GetProxyEksClusterResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyEksClusterResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyEksClusterResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyEksClusterResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyEksClusterResourceResponseValidationError{}

// Validate checks the field values on UpdateProxyEksClusterResourceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateProxyEksClusterResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyEksClusterResourceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateProxyEksClusterResourceRequestMultiError, or nil if none found.
func (m *UpdateProxyEksClusterResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyEksClusterResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetEksCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyEksClusterResourceRequestValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyEksClusterResourceRequestValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEksCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyEksClusterResourceRequestValidationError{
				field:  "EksCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProxyEksClusterResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateProxyEksClusterResourceRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProxyEksClusterResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProxyEksClusterResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyEksClusterResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyEksClusterResourceRequestMultiError) AllErrors() []error { return m }

// UpdateProxyEksClusterResourceRequestValidationError is the validation error
// returned by UpdateProxyEksClusterResourceRequest.Validate if the designated
// constraints aren't met.
type UpdateProxyEksClusterResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyEksClusterResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyEksClusterResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyEksClusterResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyEksClusterResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyEksClusterResourceRequestValidationError) ErrorName() string {
	return "UpdateProxyEksClusterResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyEksClusterResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyEksClusterResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyEksClusterResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyEksClusterResourceRequestValidationError{}

// Validate checks the field values on UpdateProxyEksClusterResourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateProxyEksClusterResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyEksClusterResourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateProxyEksClusterResourceResponseMultiError, or nil if none found.
func (m *UpdateProxyEksClusterResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyEksClusterResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetEksCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyEksClusterResourceResponseValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyEksClusterResourceResponseValidationError{
					field:  "EksCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEksCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyEksClusterResourceResponseValidationError{
				field:  "EksCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProxyEksClusterResourceResponseMultiError(errors)
	}

	return nil
}

// UpdateProxyEksClusterResourceResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateProxyEksClusterResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProxyEksClusterResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyEksClusterResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyEksClusterResourceResponseMultiError) AllErrors() []error { return m }

// UpdateProxyEksClusterResourceResponseValidationError is the validation error
// returned by UpdateProxyEksClusterResourceResponse.Validate if the
// designated constraints aren't met.
type UpdateProxyEksClusterResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyEksClusterResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyEksClusterResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyEksClusterResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyEksClusterResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyEksClusterResourceResponseValidationError) ErrorName() string {
	return "UpdateProxyEksClusterResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyEksClusterResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyEksClusterResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyEksClusterResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyEksClusterResourceResponseValidationError{}

// Validate checks the field values on DeleteProxyEksClusterResourceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteProxyEksClusterResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyEksClusterResourceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteProxyEksClusterResourceRequestMultiError, or nil if none found.
func (m *DeleteProxyEksClusterResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyEksClusterResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyEksClusterResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteProxyEksClusterResourceRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProxyEksClusterResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProxyEksClusterResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyEksClusterResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyEksClusterResourceRequestMultiError) AllErrors() []error { return m }

// DeleteProxyEksClusterResourceRequestValidationError is the validation error
// returned by DeleteProxyEksClusterResourceRequest.Validate if the designated
// constraints aren't met.
type DeleteProxyEksClusterResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyEksClusterResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyEksClusterResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyEksClusterResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyEksClusterResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyEksClusterResourceRequestValidationError) ErrorName() string {
	return "DeleteProxyEksClusterResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyEksClusterResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyEksClusterResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyEksClusterResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyEksClusterResourceRequestValidationError{}

// Validate checks the field values on DeleteProxyEksClusterResourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteProxyEksClusterResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyEksClusterResourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteProxyEksClusterResourceResponseMultiError, or nil if none found.
func (m *DeleteProxyEksClusterResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyEksClusterResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyEksClusterResourceResponseMultiError(errors)
	}

	return nil
}

// DeleteProxyEksClusterResourceResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteProxyEksClusterResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProxyEksClusterResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyEksClusterResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyEksClusterResourceResponseMultiError) AllErrors() []error { return m }

// DeleteProxyEksClusterResourceResponseValidationError is the validation error
// returned by DeleteProxyEksClusterResourceResponse.Validate if the
// designated constraints aren't met.
type DeleteProxyEksClusterResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyEksClusterResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyEksClusterResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyEksClusterResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyEksClusterResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyEksClusterResourceResponseValidationError) ErrorName() string {
	return "DeleteProxyEksClusterResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyEksClusterResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyEksClusterResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyEksClusterResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyEksClusterResourceResponseValidationError{}

// Validate checks the field values on CreateProxyEksServiceAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateProxyEksServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyEksServiceAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateProxyEksServiceAccountRequestMultiError, or nil if none found.
func (m *CreateProxyEksServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyEksServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetServiceAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProxyEksServiceAccountRequestValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProxyEksServiceAccountRequestValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProxyEksServiceAccountRequestValidationError{
				field:  "ServiceAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProxyEksServiceAccountRequestMultiError(errors)
	}

	return nil
}

// CreateProxyEksServiceAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateProxyEksServiceAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProxyEksServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyEksServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyEksServiceAccountRequestMultiError) AllErrors() []error { return m }

// CreateProxyEksServiceAccountRequestValidationError is the validation error
// returned by CreateProxyEksServiceAccountRequest.Validate if the designated
// constraints aren't met.
type CreateProxyEksServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyEksServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyEksServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyEksServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyEksServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyEksServiceAccountRequestValidationError) ErrorName() string {
	return "CreateProxyEksServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyEksServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyEksServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyEksServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyEksServiceAccountRequestValidationError{}

// Validate checks the field values on CreateProxyEksServiceAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateProxyEksServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProxyEksServiceAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateProxyEksServiceAccountResponseMultiError, or nil if none found.
func (m *CreateProxyEksServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProxyEksServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetServiceAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProxyEksServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProxyEksServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProxyEksServiceAccountResponseValidationError{
				field:  "ServiceAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProxyEksServiceAccountResponseMultiError(errors)
	}

	return nil
}

// CreateProxyEksServiceAccountResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateProxyEksServiceAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProxyEksServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProxyEksServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProxyEksServiceAccountResponseMultiError) AllErrors() []error { return m }

// CreateProxyEksServiceAccountResponseValidationError is the validation error
// returned by CreateProxyEksServiceAccountResponse.Validate if the designated
// constraints aren't met.
type CreateProxyEksServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProxyEksServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProxyEksServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProxyEksServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProxyEksServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProxyEksServiceAccountResponseValidationError) ErrorName() string {
	return "CreateProxyEksServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProxyEksServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProxyEksServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProxyEksServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProxyEksServiceAccountResponseValidationError{}

// Validate checks the field values on GetProxyEksServiceAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProxyEksServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyEksServiceAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProxyEksServiceAccountRequestMultiError, or nil if none found.
func (m *GetProxyEksServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyEksServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProxyEksServiceAccountRequestMultiError(errors)
	}

	return nil
}

// GetProxyEksServiceAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetProxyEksServiceAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProxyEksServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyEksServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyEksServiceAccountRequestMultiError) AllErrors() []error { return m }

// GetProxyEksServiceAccountRequestValidationError is the validation error
// returned by GetProxyEksServiceAccountRequest.Validate if the designated
// constraints aren't met.
type GetProxyEksServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyEksServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyEksServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyEksServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyEksServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyEksServiceAccountRequestValidationError) ErrorName() string {
	return "GetProxyEksServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyEksServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyEksServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyEksServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyEksServiceAccountRequestValidationError{}

// Validate checks the field values on GetProxyEksServiceAccountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProxyEksServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProxyEksServiceAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetProxyEksServiceAccountResponseMultiError, or nil if none found.
func (m *GetProxyEksServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProxyEksServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetServiceAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProxyEksServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProxyEksServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProxyEksServiceAccountResponseValidationError{
				field:  "ServiceAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProxyEksServiceAccountResponseMultiError(errors)
	}

	return nil
}

// GetProxyEksServiceAccountResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetProxyEksServiceAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProxyEksServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProxyEksServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProxyEksServiceAccountResponseMultiError) AllErrors() []error { return m }

// GetProxyEksServiceAccountResponseValidationError is the validation error
// returned by GetProxyEksServiceAccountResponse.Validate if the designated
// constraints aren't met.
type GetProxyEksServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProxyEksServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProxyEksServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProxyEksServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProxyEksServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProxyEksServiceAccountResponseValidationError) ErrorName() string {
	return "GetProxyEksServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProxyEksServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProxyEksServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProxyEksServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProxyEksServiceAccountResponseValidationError{}

// Validate checks the field values on UpdateProxyEksServiceAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateProxyEksServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyEksServiceAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateProxyEksServiceAccountRequestMultiError, or nil if none found.
func (m *UpdateProxyEksServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyEksServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetServiceAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyEksServiceAccountRequestValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyEksServiceAccountRequestValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyEksServiceAccountRequestValidationError{
				field:  "ServiceAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProxyEksServiceAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateProxyEksServiceAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProxyEksServiceAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProxyEksServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyEksServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyEksServiceAccountRequestMultiError) AllErrors() []error { return m }

// UpdateProxyEksServiceAccountRequestValidationError is the validation error
// returned by UpdateProxyEksServiceAccountRequest.Validate if the designated
// constraints aren't met.
type UpdateProxyEksServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyEksServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyEksServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyEksServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyEksServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyEksServiceAccountRequestValidationError) ErrorName() string {
	return "UpdateProxyEksServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyEksServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyEksServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyEksServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyEksServiceAccountRequestValidationError{}

// Validate checks the field values on UpdateProxyEksServiceAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateProxyEksServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProxyEksServiceAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateProxyEksServiceAccountResponseMultiError, or nil if none found.
func (m *UpdateProxyEksServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProxyEksServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProxyId

	if all {
		switch v := interface{}(m.GetServiceAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProxyEksServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProxyEksServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProxyEksServiceAccountResponseValidationError{
				field:  "ServiceAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProxyEksServiceAccountResponseMultiError(errors)
	}

	return nil
}

// UpdateProxyEksServiceAccountResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProxyEksServiceAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProxyEksServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProxyEksServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProxyEksServiceAccountResponseMultiError) AllErrors() []error { return m }

// UpdateProxyEksServiceAccountResponseValidationError is the validation error
// returned by UpdateProxyEksServiceAccountResponse.Validate if the designated
// constraints aren't met.
type UpdateProxyEksServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProxyEksServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProxyEksServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProxyEksServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProxyEksServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProxyEksServiceAccountResponseValidationError) ErrorName() string {
	return "UpdateProxyEksServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProxyEksServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProxyEksServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProxyEksServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProxyEksServiceAccountResponseValidationError{}

// Validate checks the field values on DeleteProxyEksServiceAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteProxyEksServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyEksServiceAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteProxyEksServiceAccountRequestMultiError, or nil if none found.
func (m *DeleteProxyEksServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyEksServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyEksServiceAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteProxyEksServiceAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProxyEksServiceAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProxyEksServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyEksServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyEksServiceAccountRequestMultiError) AllErrors() []error { return m }

// DeleteProxyEksServiceAccountRequestValidationError is the validation error
// returned by DeleteProxyEksServiceAccountRequest.Validate if the designated
// constraints aren't met.
type DeleteProxyEksServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyEksServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyEksServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyEksServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyEksServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyEksServiceAccountRequestValidationError) ErrorName() string {
	return "DeleteProxyEksServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyEksServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyEksServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyEksServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyEksServiceAccountRequestValidationError{}

// Validate checks the field values on DeleteProxyEksServiceAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteProxyEksServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProxyEksServiceAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteProxyEksServiceAccountResponseMultiError, or nil if none found.
func (m *DeleteProxyEksServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProxyEksServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProxyEksServiceAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteProxyEksServiceAccountResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProxyEksServiceAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProxyEksServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProxyEksServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProxyEksServiceAccountResponseMultiError) AllErrors() []error { return m }

// DeleteProxyEksServiceAccountResponseValidationError is the validation error
// returned by DeleteProxyEksServiceAccountResponse.Validate if the designated
// constraints aren't met.
type DeleteProxyEksServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProxyEksServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProxyEksServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProxyEksServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProxyEksServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProxyEksServiceAccountResponseValidationError) ErrorName() string {
	return "DeleteProxyEksServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProxyEksServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProxyEksServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProxyEksServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProxyEksServiceAccountResponseValidationError{}
