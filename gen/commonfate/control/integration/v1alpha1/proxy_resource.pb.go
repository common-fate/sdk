// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: commonfate/control/integration/v1alpha1/proxy_resource.proto

package integrationv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//
	//	*Resource_AwsRdsDatabase
	//	*Resource_AwsEksCluster
	Resource isResource_Resource `protobuf_oneof:"resource"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescGZIP(), []int{0}
}

func (m *Resource) GetResource() isResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *Resource) GetAwsRdsDatabase() *AWSRDSDatabase {
	if x, ok := x.GetResource().(*Resource_AwsRdsDatabase); ok {
		return x.AwsRdsDatabase
	}
	return nil
}

func (x *Resource) GetAwsEksCluster() *AWSEKSCluster {
	if x, ok := x.GetResource().(*Resource_AwsEksCluster); ok {
		return x.AwsEksCluster
	}
	return nil
}

type isResource_Resource interface {
	isResource_Resource()
}

type Resource_AwsRdsDatabase struct {
	AwsRdsDatabase *AWSRDSDatabase `protobuf:"bytes,1,opt,name=aws_rds_database,json=awsRdsDatabase,proto3,oneof"`
}

type Resource_AwsEksCluster struct {
	AwsEksCluster *AWSEKSCluster `protobuf:"bytes,2,opt,name=aws_eks_cluster,json=awsEksCluster,proto3,oneof"`
}

func (*Resource_AwsRdsDatabase) isResource_Resource() {}

func (*Resource_AwsEksCluster) isResource_Resource() {}

type AWSRDSDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Engine     string                `protobuf:"bytes,2,opt,name=engine,proto3" json:"engine,omitempty"`
	Region     string                `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Account    string                `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	InstanceId string                `protobuf:"bytes,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Database   string                `protobuf:"bytes,6,opt,name=database,proto3" json:"database,omitempty"`
	Users      []*AWSRDSDatabaseUser `protobuf:"bytes,7,rep,name=users,proto3" json:"users,omitempty"`
	Endpoint   string                `protobuf:"bytes,8,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *AWSRDSDatabase) Reset() {
	*x = AWSRDSDatabase{}
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSRDSDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRDSDatabase) ProtoMessage() {}

func (x *AWSRDSDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRDSDatabase.ProtoReflect.Descriptor instead.
func (*AWSRDSDatabase) Descriptor() ([]byte, []int) {
	return file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescGZIP(), []int{1}
}

func (x *AWSRDSDatabase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSRDSDatabase) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *AWSRDSDatabase) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSRDSDatabase) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AWSRDSDatabase) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AWSRDSDatabase) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *AWSRDSDatabase) GetUsers() []*AWSRDSDatabaseUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *AWSRDSDatabase) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type AWSRDSDatabaseUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Username                  string  `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	PasswordSecretsManagerArn string  `protobuf:"bytes,3,opt,name=password_secrets_manager_arn,json=passwordSecretsManagerArn,proto3" json:"password_secrets_manager_arn,omitempty"`
	Endpoint                  *string `protobuf:"bytes,4,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
}

func (x *AWSRDSDatabaseUser) Reset() {
	*x = AWSRDSDatabaseUser{}
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSRDSDatabaseUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRDSDatabaseUser) ProtoMessage() {}

func (x *AWSRDSDatabaseUser) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRDSDatabaseUser.ProtoReflect.Descriptor instead.
func (*AWSRDSDatabaseUser) Descriptor() ([]byte, []int) {
	return file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescGZIP(), []int{2}
}

func (x *AWSRDSDatabaseUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSRDSDatabaseUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AWSRDSDatabaseUser) GetPasswordSecretsManagerArn() string {
	if x != nil {
		return x.PasswordSecretsManagerArn
	}
	return ""
}

func (x *AWSRDSDatabaseUser) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

type AWSEKSCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Region      string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Account     string `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	ClusterName string `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The name of the IAM role which is used to access the cluster when the proxy is running outside of the cluster itself, for example on ECS.
	ClusterAccessRoleName *string `protobuf:"bytes,6,opt,name=cluster_access_role_name,json=clusterAccessRoleName,proto3,oneof" json:"cluster_access_role_name,omitempty"`
	// The endpoint of the cluster will be looked up by the proxy using the cluster name.
	ClusterEndpoint  *string `protobuf:"bytes,7,opt,name=cluster_endpoint,json=clusterEndpoint,proto3,oneof" json:"cluster_endpoint,omitempty"`
	ClusterAuthority *string `protobuf:"bytes,8,opt,name=cluster_authority,json=clusterAuthority,proto3,oneof" json:"cluster_authority,omitempty"`
}

func (x *AWSEKSCluster) Reset() {
	*x = AWSEKSCluster{}
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSEKSCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSEKSCluster) ProtoMessage() {}

func (x *AWSEKSCluster) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSEKSCluster.ProtoReflect.Descriptor instead.
func (*AWSEKSCluster) Descriptor() ([]byte, []int) {
	return file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescGZIP(), []int{3}
}

func (x *AWSEKSCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSEKSCluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSEKSCluster) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AWSEKSCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AWSEKSCluster) GetClusterAccessRoleName() string {
	if x != nil && x.ClusterAccessRoleName != nil {
		return *x.ClusterAccessRoleName
	}
	return ""
}

func (x *AWSEKSCluster) GetClusterEndpoint() string {
	if x != nil && x.ClusterEndpoint != nil {
		return *x.ClusterEndpoint
	}
	return ""
}

func (x *AWSEKSCluster) GetClusterAuthority() string {
	if x != nil && x.ClusterAuthority != nil {
		return *x.ClusterAuthority
	}
	return ""
}

type AWSEKSServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServiceAccountName string `protobuf:"bytes,2,opt,name=service_account_name,json=serviceAccountName,proto3" json:"service_account_name,omitempty"`
}

func (x *AWSEKSServiceAccount) Reset() {
	*x = AWSEKSServiceAccount{}
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSEKSServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSEKSServiceAccount) ProtoMessage() {}

func (x *AWSEKSServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSEKSServiceAccount.ProtoReflect.Descriptor instead.
func (*AWSEKSServiceAccount) Descriptor() ([]byte, []int) {
	return file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescGZIP(), []int{4}
}

func (x *AWSEKSServiceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSEKSServiceAccount) GetServiceAccountName() string {
	if x != nil {
		return x.ServiceAccountName
	}
	return ""
}

var File_commonfate_control_integration_v1alpha1_proxy_resource_proto protoreflect.FileDescriptor

var file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0xdd, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x64, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x52, 0x64,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x61, 0x77, 0x73,
	0x5f, 0x65, 0x6b, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x57, 0x53,
	0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x77,
	0x73, 0x45, 0x6b, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x52,
	0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x57, 0x53, 0x52, 0x44, 0x53, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x41, 0x57, 0x53, 0x52, 0x44, 0x53, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xe0, 0x02, 0x0a, 0x0d, 0x41,
	0x57, 0x53, 0x45, 0x4b, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5c, 0x0a,
	0x14, 0x41, 0x57, 0x53, 0x45, 0x4b, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0xdc, 0x02, 0x0a, 0x2b,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x12, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03,
	0x43, 0x43, 0x49, 0xaa, 0x02, 0x27, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x27,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x33, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x3a, 0x3a, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescOnce sync.Once
	file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescData = file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDesc
)

func file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescGZIP() []byte {
	file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescOnce.Do(func() {
		file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescData)
	})
	return file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDescData
}

var file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_commonfate_control_integration_v1alpha1_proxy_resource_proto_goTypes = []any{
	(*Resource)(nil),             // 0: commonfate.control.integration.v1alpha1.Resource
	(*AWSRDSDatabase)(nil),       // 1: commonfate.control.integration.v1alpha1.AWSRDSDatabase
	(*AWSRDSDatabaseUser)(nil),   // 2: commonfate.control.integration.v1alpha1.AWSRDSDatabaseUser
	(*AWSEKSCluster)(nil),        // 3: commonfate.control.integration.v1alpha1.AWSEKSCluster
	(*AWSEKSServiceAccount)(nil), // 4: commonfate.control.integration.v1alpha1.AWSEKSServiceAccount
}
var file_commonfate_control_integration_v1alpha1_proxy_resource_proto_depIdxs = []int32{
	1, // 0: commonfate.control.integration.v1alpha1.Resource.aws_rds_database:type_name -> commonfate.control.integration.v1alpha1.AWSRDSDatabase
	3, // 1: commonfate.control.integration.v1alpha1.Resource.aws_eks_cluster:type_name -> commonfate.control.integration.v1alpha1.AWSEKSCluster
	2, // 2: commonfate.control.integration.v1alpha1.AWSRDSDatabase.users:type_name -> commonfate.control.integration.v1alpha1.AWSRDSDatabaseUser
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_commonfate_control_integration_v1alpha1_proxy_resource_proto_init() }
func file_commonfate_control_integration_v1alpha1_proxy_resource_proto_init() {
	if File_commonfate_control_integration_v1alpha1_proxy_resource_proto != nil {
		return
	}
	file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[0].OneofWrappers = []any{
		(*Resource_AwsRdsDatabase)(nil),
		(*Resource_AwsEksCluster)(nil),
	}
	file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[2].OneofWrappers = []any{}
	file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commonfate_control_integration_v1alpha1_proxy_resource_proto_goTypes,
		DependencyIndexes: file_commonfate_control_integration_v1alpha1_proxy_resource_proto_depIdxs,
		MessageInfos:      file_commonfate_control_integration_v1alpha1_proxy_resource_proto_msgTypes,
	}.Build()
	File_commonfate_control_integration_v1alpha1_proxy_resource_proto = out.File
	file_commonfate_control_integration_v1alpha1_proxy_resource_proto_rawDesc = nil
	file_commonfate_control_integration_v1alpha1_proxy_resource_proto_goTypes = nil
	file_commonfate_control_integration_v1alpha1_proxy_resource_proto_depIdxs = nil
}
