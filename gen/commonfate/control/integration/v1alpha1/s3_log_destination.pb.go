// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: commonfate/control/integration/v1alpha1/s3_log_destination.proto

package integrationv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The S3 Log Destination integration
// allows audit log events to be written to
// an AWS S3 bucket in [JSONL format](https://jsonlines.org/).
type S3LogDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	RoleArn    string `protobuf:"bytes,2,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	// The object key template to write audit log events
	// to in the bucket.
	//
	// If not provided, defaults to: '{{ .Year }}/{{ .Month }}/{{ .Day }}/{{ .Hour }}_{{ .Minute }}_{{ .Second }}_{{ .ID }}'
	//
	// Available template parameters are:
	//
	// Year - the year the events were written in YYYY format, e.g. 2024
	//
	// Month - the month the events were written in MM format, e.g. 01
	//
	// Day - the calendar day the events were written in DD format, e.g. 15
	//
	// Hour - the hour the events were written in HH format (in UTC), e.g. 22
	//
	// Minute - the minute the events were written in MM format, e.g. 04
	//
	// Second - the second the events were written in SS format, e.g. 02
	//
	// ID - a randomly generated report batch ID.
	//
	// Time - the full timestamp the event report was generated. This can be used
	// if you'd like to customise the time beyond the Year / Month / Day / Hour / Minute / Second
	// variables provided.
	// You can use Go [text template](https://pkg.go.dev/text/template) functions to customise this,
	// for example: {{ .Time.Format "Jan 02, 2006 15:04:05 UTC" }}
	KeyTemplate string `protobuf:"bytes,3,opt,name=key_template,json=keyTemplate,proto3" json:"key_template,omitempty"`
	// The compression algorithm to use on the log events.
	// If empty, events will be written without compression.
	//
	// Specifying 'gzip' will use GZIP compression.
	Compression string `protobuf:"bytes,4,opt,name=compression,proto3" json:"compression,omitempty"`
	// If provided, only the specified actions will be included.
	//
	// For example ["grant.requested", "grant.approved"]
	FilterForActions []string `protobuf:"bytes,5,rep,name=filter_for_actions,json=filterForActions,proto3" json:"filter_for_actions,omitempty"`
	// The frequency in minutes to generate reports at.
	// Must be greater or equal to 5.
	BatchDurationMinutes uint32 `protobuf:"varint,6,opt,name=batch_duration_minutes,json=batchDurationMinutes,proto3" json:"batch_duration_minutes,omitempty"`
	// The maximum number of events to include in a batch.
	// If set to zero, Common Fate will use a default automatic batch size.
	MaximumBatchSize uint32 `protobuf:"varint,7,opt,name=maximum_batch_size,json=maximumBatchSize,proto3" json:"maximum_batch_size,omitempty"`
}

func (x *S3LogDestination) Reset() {
	*x = S3LogDestination{}
	mi := &file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3LogDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3LogDestination) ProtoMessage() {}

func (x *S3LogDestination) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3LogDestination.ProtoReflect.Descriptor instead.
func (*S3LogDestination) Descriptor() ([]byte, []int) {
	return file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDescGZIP(), []int{0}
}

func (x *S3LogDestination) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3LogDestination) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

func (x *S3LogDestination) GetKeyTemplate() string {
	if x != nil {
		return x.KeyTemplate
	}
	return ""
}

func (x *S3LogDestination) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *S3LogDestination) GetFilterForActions() []string {
	if x != nil {
		return x.FilterForActions
	}
	return nil
}

func (x *S3LogDestination) GetBatchDurationMinutes() uint32 {
	if x != nil {
		return x.BatchDurationMinutes
	}
	return 0
}

func (x *S3LogDestination) GetMaximumBatchSize() uint32 {
	if x != nil {
		return x.MaximumBatchSize
	}
	return 0
}

var File_commonfate_control_integration_v1alpha1_s3_log_destination_proto protoreflect.FileDescriptor

var file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDesc = []byte{
	0x0a, 0x40, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x33, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0xa5, 0x02, 0x0a, 0x10,
	0x53, 0x33, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0xdf, 0x02, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x42, 0x15, 0x53, 0x33, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d,
	0x66, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x49, 0xaa, 0x02,
	0x27, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x27, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xe2, 0x02, 0x33, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x3a,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDescOnce sync.Once
	file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDescData = file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDesc
)

func file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDescGZIP() []byte {
	file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDescOnce.Do(func() {
		file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDescData)
	})
	return file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDescData
}

var file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_goTypes = []any{
	(*S3LogDestination)(nil), // 0: commonfate.control.integration.v1alpha1.S3LogDestination
}
var file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_init() }
func file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_init() {
	if File_commonfate_control_integration_v1alpha1_s3_log_destination_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_goTypes,
		DependencyIndexes: file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_depIdxs,
		MessageInfos:      file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_msgTypes,
	}.Build()
	File_commonfate_control_integration_v1alpha1_s3_log_destination_proto = out.File
	file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_rawDesc = nil
	file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_goTypes = nil
	file_commonfate_control_integration_v1alpha1_s3_log_destination_proto_depIdxs = nil
}
