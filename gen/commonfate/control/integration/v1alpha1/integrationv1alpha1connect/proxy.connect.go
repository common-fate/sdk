// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/integration/v1alpha1/proxy.proto

package integrationv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/integration/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProxyServiceName is the fully-qualified name of the ProxyService service.
	ProxyServiceName = "commonfate.control.integration.v1alpha1.ProxyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProxyServiceCreateProxyRdsResourceProcedure is the fully-qualified name of the ProxyService's
	// CreateProxyRdsResource RPC.
	ProxyServiceCreateProxyRdsResourceProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/CreateProxyRdsResource"
	// ProxyServiceUpdateProxyRdsResourceProcedure is the fully-qualified name of the ProxyService's
	// UpdateProxyRdsResource RPC.
	ProxyServiceUpdateProxyRdsResourceProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/UpdateProxyRdsResource"
	// ProxyServiceDeleteProxyRdsResourceProcedure is the fully-qualified name of the ProxyService's
	// DeleteProxyRdsResource RPC.
	ProxyServiceDeleteProxyRdsResourceProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/DeleteProxyRdsResource"
	// ProxyServiceGetProxyRdsResourceProcedure is the fully-qualified name of the ProxyService's
	// GetProxyRdsResource RPC.
	ProxyServiceGetProxyRdsResourceProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/GetProxyRdsResource"
	// ProxyServiceCreateProxyEksClusterResourceProcedure is the fully-qualified name of the
	// ProxyService's CreateProxyEksClusterResource RPC.
	ProxyServiceCreateProxyEksClusterResourceProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/CreateProxyEksClusterResource"
	// ProxyServiceUpdateProxyEksClusterResourceProcedure is the fully-qualified name of the
	// ProxyService's UpdateProxyEksClusterResource RPC.
	ProxyServiceUpdateProxyEksClusterResourceProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/UpdateProxyEksClusterResource"
	// ProxyServiceDeleteProxyEksClusterResourceProcedure is the fully-qualified name of the
	// ProxyService's DeleteProxyEksClusterResource RPC.
	ProxyServiceDeleteProxyEksClusterResourceProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/DeleteProxyEksClusterResource"
	// ProxyServiceGetProxyEksClusterResourceProcedure is the fully-qualified name of the ProxyService's
	// GetProxyEksClusterResource RPC.
	ProxyServiceGetProxyEksClusterResourceProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/GetProxyEksClusterResource"
	// ProxyServiceCreateProxyEksServiceAccountProcedure is the fully-qualified name of the
	// ProxyService's CreateProxyEksServiceAccount RPC.
	ProxyServiceCreateProxyEksServiceAccountProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/CreateProxyEksServiceAccount"
	// ProxyServiceUpdateProxyEksServiceAccountProcedure is the fully-qualified name of the
	// ProxyService's UpdateProxyEksServiceAccount RPC.
	ProxyServiceUpdateProxyEksServiceAccountProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/UpdateProxyEksServiceAccount"
	// ProxyServiceDeleteProxyEksServiceAccountProcedure is the fully-qualified name of the
	// ProxyService's DeleteProxyEksServiceAccount RPC.
	ProxyServiceDeleteProxyEksServiceAccountProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/DeleteProxyEksServiceAccount"
	// ProxyServiceGetProxyEksServiceAccountProcedure is the fully-qualified name of the ProxyService's
	// GetProxyEksServiceAccount RPC.
	ProxyServiceGetProxyEksServiceAccountProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/GetProxyEksServiceAccount"
	// ProxyServiceCreateProxyProcedure is the fully-qualified name of the ProxyService's CreateProxy
	// RPC.
	ProxyServiceCreateProxyProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/CreateProxy"
	// ProxyServiceUpdateProxyProcedure is the fully-qualified name of the ProxyService's UpdateProxy
	// RPC.
	ProxyServiceUpdateProxyProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/UpdateProxy"
	// ProxyServiceDeleteProxyProcedure is the fully-qualified name of the ProxyService's DeleteProxy
	// RPC.
	ProxyServiceDeleteProxyProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/DeleteProxy"
	// ProxyServiceGetProxyProcedure is the fully-qualified name of the ProxyService's GetProxy RPC.
	ProxyServiceGetProxyProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/GetProxy"
	// ProxyServiceListProxyResourcesProcedure is the fully-qualified name of the ProxyService's
	// ListProxyResources RPC.
	ProxyServiceListProxyResourcesProcedure = "/commonfate.control.integration.v1alpha1.ProxyService/ListProxyResources"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	proxyServiceServiceDescriptor                             = v1alpha1.File_commonfate_control_integration_v1alpha1_proxy_proto.Services().ByName("ProxyService")
	proxyServiceCreateProxyRdsResourceMethodDescriptor        = proxyServiceServiceDescriptor.Methods().ByName("CreateProxyRdsResource")
	proxyServiceUpdateProxyRdsResourceMethodDescriptor        = proxyServiceServiceDescriptor.Methods().ByName("UpdateProxyRdsResource")
	proxyServiceDeleteProxyRdsResourceMethodDescriptor        = proxyServiceServiceDescriptor.Methods().ByName("DeleteProxyRdsResource")
	proxyServiceGetProxyRdsResourceMethodDescriptor           = proxyServiceServiceDescriptor.Methods().ByName("GetProxyRdsResource")
	proxyServiceCreateProxyEksClusterResourceMethodDescriptor = proxyServiceServiceDescriptor.Methods().ByName("CreateProxyEksClusterResource")
	proxyServiceUpdateProxyEksClusterResourceMethodDescriptor = proxyServiceServiceDescriptor.Methods().ByName("UpdateProxyEksClusterResource")
	proxyServiceDeleteProxyEksClusterResourceMethodDescriptor = proxyServiceServiceDescriptor.Methods().ByName("DeleteProxyEksClusterResource")
	proxyServiceGetProxyEksClusterResourceMethodDescriptor    = proxyServiceServiceDescriptor.Methods().ByName("GetProxyEksClusterResource")
	proxyServiceCreateProxyEksServiceAccountMethodDescriptor  = proxyServiceServiceDescriptor.Methods().ByName("CreateProxyEksServiceAccount")
	proxyServiceUpdateProxyEksServiceAccountMethodDescriptor  = proxyServiceServiceDescriptor.Methods().ByName("UpdateProxyEksServiceAccount")
	proxyServiceDeleteProxyEksServiceAccountMethodDescriptor  = proxyServiceServiceDescriptor.Methods().ByName("DeleteProxyEksServiceAccount")
	proxyServiceGetProxyEksServiceAccountMethodDescriptor     = proxyServiceServiceDescriptor.Methods().ByName("GetProxyEksServiceAccount")
	proxyServiceCreateProxyMethodDescriptor                   = proxyServiceServiceDescriptor.Methods().ByName("CreateProxy")
	proxyServiceUpdateProxyMethodDescriptor                   = proxyServiceServiceDescriptor.Methods().ByName("UpdateProxy")
	proxyServiceDeleteProxyMethodDescriptor                   = proxyServiceServiceDescriptor.Methods().ByName("DeleteProxy")
	proxyServiceGetProxyMethodDescriptor                      = proxyServiceServiceDescriptor.Methods().ByName("GetProxy")
	proxyServiceListProxyResourcesMethodDescriptor            = proxyServiceServiceDescriptor.Methods().ByName("ListProxyResources")
)

// ProxyServiceClient is a client for the commonfate.control.integration.v1alpha1.ProxyService
// service.
type ProxyServiceClient interface {
	// CRUD operations for proxy resource terraform provider resource
	CreateProxyRdsResource(context.Context, *connect.Request[v1alpha1.CreateProxyRdsResourceRequest]) (*connect.Response[v1alpha1.CreateProxyRdsResourceResponse], error)
	UpdateProxyRdsResource(context.Context, *connect.Request[v1alpha1.UpdateProxyRdsResourceRequest]) (*connect.Response[v1alpha1.UpdateProxyRdsResourceResponse], error)
	DeleteProxyRdsResource(context.Context, *connect.Request[v1alpha1.DeleteProxyRdsResourceRequest]) (*connect.Response[v1alpha1.DeleteProxyRdsResourceResponse], error)
	GetProxyRdsResource(context.Context, *connect.Request[v1alpha1.GetProxyRdsResourceRequest]) (*connect.Response[v1alpha1.GetProxyRdsResourceResponse], error)
	CreateProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.CreateProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.CreateProxyEksClusterResourceResponse], error)
	UpdateProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.UpdateProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.UpdateProxyEksClusterResourceResponse], error)
	DeleteProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.DeleteProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.DeleteProxyEksClusterResourceResponse], error)
	GetProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.GetProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.GetProxyEksClusterResourceResponse], error)
	CreateProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.CreateProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.CreateProxyEksServiceAccountResponse], error)
	UpdateProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.UpdateProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.UpdateProxyEksServiceAccountResponse], error)
	DeleteProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.DeleteProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.DeleteProxyEksServiceAccountResponse], error)
	GetProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.GetProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.GetProxyEksServiceAccountResponse], error)
	// CRUD operations for proxy terraform provider resource
	CreateProxy(context.Context, *connect.Request[v1alpha1.CreateProxyRequest]) (*connect.Response[v1alpha1.CreateProxyResponse], error)
	UpdateProxy(context.Context, *connect.Request[v1alpha1.UpdateProxyRequest]) (*connect.Response[v1alpha1.UpdateProxyResponse], error)
	DeleteProxy(context.Context, *connect.Request[v1alpha1.DeleteProxyRequest]) (*connect.Response[v1alpha1.DeleteProxyResponse], error)
	GetProxy(context.Context, *connect.Request[v1alpha1.GetProxyRequest]) (*connect.Response[v1alpha1.GetProxyResponse], error)
	// Used by the proxy to get resources
	ListProxyResources(context.Context, *connect.Request[v1alpha1.ListProxyResourcesRequest]) (*connect.Response[v1alpha1.ListProxyResourcesResponse], error)
}

// NewProxyServiceClient constructs a client for the
// commonfate.control.integration.v1alpha1.ProxyService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProxyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProxyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &proxyServiceClient{
		createProxyRdsResource: connect.NewClient[v1alpha1.CreateProxyRdsResourceRequest, v1alpha1.CreateProxyRdsResourceResponse](
			httpClient,
			baseURL+ProxyServiceCreateProxyRdsResourceProcedure,
			connect.WithSchema(proxyServiceCreateProxyRdsResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProxyRdsResource: connect.NewClient[v1alpha1.UpdateProxyRdsResourceRequest, v1alpha1.UpdateProxyRdsResourceResponse](
			httpClient,
			baseURL+ProxyServiceUpdateProxyRdsResourceProcedure,
			connect.WithSchema(proxyServiceUpdateProxyRdsResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProxyRdsResource: connect.NewClient[v1alpha1.DeleteProxyRdsResourceRequest, v1alpha1.DeleteProxyRdsResourceResponse](
			httpClient,
			baseURL+ProxyServiceDeleteProxyRdsResourceProcedure,
			connect.WithSchema(proxyServiceDeleteProxyRdsResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProxyRdsResource: connect.NewClient[v1alpha1.GetProxyRdsResourceRequest, v1alpha1.GetProxyRdsResourceResponse](
			httpClient,
			baseURL+ProxyServiceGetProxyRdsResourceProcedure,
			connect.WithSchema(proxyServiceGetProxyRdsResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProxyEksClusterResource: connect.NewClient[v1alpha1.CreateProxyEksClusterResourceRequest, v1alpha1.CreateProxyEksClusterResourceResponse](
			httpClient,
			baseURL+ProxyServiceCreateProxyEksClusterResourceProcedure,
			connect.WithSchema(proxyServiceCreateProxyEksClusterResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProxyEksClusterResource: connect.NewClient[v1alpha1.UpdateProxyEksClusterResourceRequest, v1alpha1.UpdateProxyEksClusterResourceResponse](
			httpClient,
			baseURL+ProxyServiceUpdateProxyEksClusterResourceProcedure,
			connect.WithSchema(proxyServiceUpdateProxyEksClusterResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProxyEksClusterResource: connect.NewClient[v1alpha1.DeleteProxyEksClusterResourceRequest, v1alpha1.DeleteProxyEksClusterResourceResponse](
			httpClient,
			baseURL+ProxyServiceDeleteProxyEksClusterResourceProcedure,
			connect.WithSchema(proxyServiceDeleteProxyEksClusterResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProxyEksClusterResource: connect.NewClient[v1alpha1.GetProxyEksClusterResourceRequest, v1alpha1.GetProxyEksClusterResourceResponse](
			httpClient,
			baseURL+ProxyServiceGetProxyEksClusterResourceProcedure,
			connect.WithSchema(proxyServiceGetProxyEksClusterResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProxyEksServiceAccount: connect.NewClient[v1alpha1.CreateProxyEksServiceAccountRequest, v1alpha1.CreateProxyEksServiceAccountResponse](
			httpClient,
			baseURL+ProxyServiceCreateProxyEksServiceAccountProcedure,
			connect.WithSchema(proxyServiceCreateProxyEksServiceAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProxyEksServiceAccount: connect.NewClient[v1alpha1.UpdateProxyEksServiceAccountRequest, v1alpha1.UpdateProxyEksServiceAccountResponse](
			httpClient,
			baseURL+ProxyServiceUpdateProxyEksServiceAccountProcedure,
			connect.WithSchema(proxyServiceUpdateProxyEksServiceAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProxyEksServiceAccount: connect.NewClient[v1alpha1.DeleteProxyEksServiceAccountRequest, v1alpha1.DeleteProxyEksServiceAccountResponse](
			httpClient,
			baseURL+ProxyServiceDeleteProxyEksServiceAccountProcedure,
			connect.WithSchema(proxyServiceDeleteProxyEksServiceAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProxyEksServiceAccount: connect.NewClient[v1alpha1.GetProxyEksServiceAccountRequest, v1alpha1.GetProxyEksServiceAccountResponse](
			httpClient,
			baseURL+ProxyServiceGetProxyEksServiceAccountProcedure,
			connect.WithSchema(proxyServiceGetProxyEksServiceAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProxy: connect.NewClient[v1alpha1.CreateProxyRequest, v1alpha1.CreateProxyResponse](
			httpClient,
			baseURL+ProxyServiceCreateProxyProcedure,
			connect.WithSchema(proxyServiceCreateProxyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProxy: connect.NewClient[v1alpha1.UpdateProxyRequest, v1alpha1.UpdateProxyResponse](
			httpClient,
			baseURL+ProxyServiceUpdateProxyProcedure,
			connect.WithSchema(proxyServiceUpdateProxyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProxy: connect.NewClient[v1alpha1.DeleteProxyRequest, v1alpha1.DeleteProxyResponse](
			httpClient,
			baseURL+ProxyServiceDeleteProxyProcedure,
			connect.WithSchema(proxyServiceDeleteProxyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProxy: connect.NewClient[v1alpha1.GetProxyRequest, v1alpha1.GetProxyResponse](
			httpClient,
			baseURL+ProxyServiceGetProxyProcedure,
			connect.WithSchema(proxyServiceGetProxyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProxyResources: connect.NewClient[v1alpha1.ListProxyResourcesRequest, v1alpha1.ListProxyResourcesResponse](
			httpClient,
			baseURL+ProxyServiceListProxyResourcesProcedure,
			connect.WithSchema(proxyServiceListProxyResourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// proxyServiceClient implements ProxyServiceClient.
type proxyServiceClient struct {
	createProxyRdsResource        *connect.Client[v1alpha1.CreateProxyRdsResourceRequest, v1alpha1.CreateProxyRdsResourceResponse]
	updateProxyRdsResource        *connect.Client[v1alpha1.UpdateProxyRdsResourceRequest, v1alpha1.UpdateProxyRdsResourceResponse]
	deleteProxyRdsResource        *connect.Client[v1alpha1.DeleteProxyRdsResourceRequest, v1alpha1.DeleteProxyRdsResourceResponse]
	getProxyRdsResource           *connect.Client[v1alpha1.GetProxyRdsResourceRequest, v1alpha1.GetProxyRdsResourceResponse]
	createProxyEksClusterResource *connect.Client[v1alpha1.CreateProxyEksClusterResourceRequest, v1alpha1.CreateProxyEksClusterResourceResponse]
	updateProxyEksClusterResource *connect.Client[v1alpha1.UpdateProxyEksClusterResourceRequest, v1alpha1.UpdateProxyEksClusterResourceResponse]
	deleteProxyEksClusterResource *connect.Client[v1alpha1.DeleteProxyEksClusterResourceRequest, v1alpha1.DeleteProxyEksClusterResourceResponse]
	getProxyEksClusterResource    *connect.Client[v1alpha1.GetProxyEksClusterResourceRequest, v1alpha1.GetProxyEksClusterResourceResponse]
	createProxyEksServiceAccount  *connect.Client[v1alpha1.CreateProxyEksServiceAccountRequest, v1alpha1.CreateProxyEksServiceAccountResponse]
	updateProxyEksServiceAccount  *connect.Client[v1alpha1.UpdateProxyEksServiceAccountRequest, v1alpha1.UpdateProxyEksServiceAccountResponse]
	deleteProxyEksServiceAccount  *connect.Client[v1alpha1.DeleteProxyEksServiceAccountRequest, v1alpha1.DeleteProxyEksServiceAccountResponse]
	getProxyEksServiceAccount     *connect.Client[v1alpha1.GetProxyEksServiceAccountRequest, v1alpha1.GetProxyEksServiceAccountResponse]
	createProxy                   *connect.Client[v1alpha1.CreateProxyRequest, v1alpha1.CreateProxyResponse]
	updateProxy                   *connect.Client[v1alpha1.UpdateProxyRequest, v1alpha1.UpdateProxyResponse]
	deleteProxy                   *connect.Client[v1alpha1.DeleteProxyRequest, v1alpha1.DeleteProxyResponse]
	getProxy                      *connect.Client[v1alpha1.GetProxyRequest, v1alpha1.GetProxyResponse]
	listProxyResources            *connect.Client[v1alpha1.ListProxyResourcesRequest, v1alpha1.ListProxyResourcesResponse]
}

// CreateProxyRdsResource calls
// commonfate.control.integration.v1alpha1.ProxyService.CreateProxyRdsResource.
func (c *proxyServiceClient) CreateProxyRdsResource(ctx context.Context, req *connect.Request[v1alpha1.CreateProxyRdsResourceRequest]) (*connect.Response[v1alpha1.CreateProxyRdsResourceResponse], error) {
	return c.createProxyRdsResource.CallUnary(ctx, req)
}

// UpdateProxyRdsResource calls
// commonfate.control.integration.v1alpha1.ProxyService.UpdateProxyRdsResource.
func (c *proxyServiceClient) UpdateProxyRdsResource(ctx context.Context, req *connect.Request[v1alpha1.UpdateProxyRdsResourceRequest]) (*connect.Response[v1alpha1.UpdateProxyRdsResourceResponse], error) {
	return c.updateProxyRdsResource.CallUnary(ctx, req)
}

// DeleteProxyRdsResource calls
// commonfate.control.integration.v1alpha1.ProxyService.DeleteProxyRdsResource.
func (c *proxyServiceClient) DeleteProxyRdsResource(ctx context.Context, req *connect.Request[v1alpha1.DeleteProxyRdsResourceRequest]) (*connect.Response[v1alpha1.DeleteProxyRdsResourceResponse], error) {
	return c.deleteProxyRdsResource.CallUnary(ctx, req)
}

// GetProxyRdsResource calls
// commonfate.control.integration.v1alpha1.ProxyService.GetProxyRdsResource.
func (c *proxyServiceClient) GetProxyRdsResource(ctx context.Context, req *connect.Request[v1alpha1.GetProxyRdsResourceRequest]) (*connect.Response[v1alpha1.GetProxyRdsResourceResponse], error) {
	return c.getProxyRdsResource.CallUnary(ctx, req)
}

// CreateProxyEksClusterResource calls
// commonfate.control.integration.v1alpha1.ProxyService.CreateProxyEksClusterResource.
func (c *proxyServiceClient) CreateProxyEksClusterResource(ctx context.Context, req *connect.Request[v1alpha1.CreateProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.CreateProxyEksClusterResourceResponse], error) {
	return c.createProxyEksClusterResource.CallUnary(ctx, req)
}

// UpdateProxyEksClusterResource calls
// commonfate.control.integration.v1alpha1.ProxyService.UpdateProxyEksClusterResource.
func (c *proxyServiceClient) UpdateProxyEksClusterResource(ctx context.Context, req *connect.Request[v1alpha1.UpdateProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.UpdateProxyEksClusterResourceResponse], error) {
	return c.updateProxyEksClusterResource.CallUnary(ctx, req)
}

// DeleteProxyEksClusterResource calls
// commonfate.control.integration.v1alpha1.ProxyService.DeleteProxyEksClusterResource.
func (c *proxyServiceClient) DeleteProxyEksClusterResource(ctx context.Context, req *connect.Request[v1alpha1.DeleteProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.DeleteProxyEksClusterResourceResponse], error) {
	return c.deleteProxyEksClusterResource.CallUnary(ctx, req)
}

// GetProxyEksClusterResource calls
// commonfate.control.integration.v1alpha1.ProxyService.GetProxyEksClusterResource.
func (c *proxyServiceClient) GetProxyEksClusterResource(ctx context.Context, req *connect.Request[v1alpha1.GetProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.GetProxyEksClusterResourceResponse], error) {
	return c.getProxyEksClusterResource.CallUnary(ctx, req)
}

// CreateProxyEksServiceAccount calls
// commonfate.control.integration.v1alpha1.ProxyService.CreateProxyEksServiceAccount.
func (c *proxyServiceClient) CreateProxyEksServiceAccount(ctx context.Context, req *connect.Request[v1alpha1.CreateProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.CreateProxyEksServiceAccountResponse], error) {
	return c.createProxyEksServiceAccount.CallUnary(ctx, req)
}

// UpdateProxyEksServiceAccount calls
// commonfate.control.integration.v1alpha1.ProxyService.UpdateProxyEksServiceAccount.
func (c *proxyServiceClient) UpdateProxyEksServiceAccount(ctx context.Context, req *connect.Request[v1alpha1.UpdateProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.UpdateProxyEksServiceAccountResponse], error) {
	return c.updateProxyEksServiceAccount.CallUnary(ctx, req)
}

// DeleteProxyEksServiceAccount calls
// commonfate.control.integration.v1alpha1.ProxyService.DeleteProxyEksServiceAccount.
func (c *proxyServiceClient) DeleteProxyEksServiceAccount(ctx context.Context, req *connect.Request[v1alpha1.DeleteProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.DeleteProxyEksServiceAccountResponse], error) {
	return c.deleteProxyEksServiceAccount.CallUnary(ctx, req)
}

// GetProxyEksServiceAccount calls
// commonfate.control.integration.v1alpha1.ProxyService.GetProxyEksServiceAccount.
func (c *proxyServiceClient) GetProxyEksServiceAccount(ctx context.Context, req *connect.Request[v1alpha1.GetProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.GetProxyEksServiceAccountResponse], error) {
	return c.getProxyEksServiceAccount.CallUnary(ctx, req)
}

// CreateProxy calls commonfate.control.integration.v1alpha1.ProxyService.CreateProxy.
func (c *proxyServiceClient) CreateProxy(ctx context.Context, req *connect.Request[v1alpha1.CreateProxyRequest]) (*connect.Response[v1alpha1.CreateProxyResponse], error) {
	return c.createProxy.CallUnary(ctx, req)
}

// UpdateProxy calls commonfate.control.integration.v1alpha1.ProxyService.UpdateProxy.
func (c *proxyServiceClient) UpdateProxy(ctx context.Context, req *connect.Request[v1alpha1.UpdateProxyRequest]) (*connect.Response[v1alpha1.UpdateProxyResponse], error) {
	return c.updateProxy.CallUnary(ctx, req)
}

// DeleteProxy calls commonfate.control.integration.v1alpha1.ProxyService.DeleteProxy.
func (c *proxyServiceClient) DeleteProxy(ctx context.Context, req *connect.Request[v1alpha1.DeleteProxyRequest]) (*connect.Response[v1alpha1.DeleteProxyResponse], error) {
	return c.deleteProxy.CallUnary(ctx, req)
}

// GetProxy calls commonfate.control.integration.v1alpha1.ProxyService.GetProxy.
func (c *proxyServiceClient) GetProxy(ctx context.Context, req *connect.Request[v1alpha1.GetProxyRequest]) (*connect.Response[v1alpha1.GetProxyResponse], error) {
	return c.getProxy.CallUnary(ctx, req)
}

// ListProxyResources calls commonfate.control.integration.v1alpha1.ProxyService.ListProxyResources.
func (c *proxyServiceClient) ListProxyResources(ctx context.Context, req *connect.Request[v1alpha1.ListProxyResourcesRequest]) (*connect.Response[v1alpha1.ListProxyResourcesResponse], error) {
	return c.listProxyResources.CallUnary(ctx, req)
}

// ProxyServiceHandler is an implementation of the
// commonfate.control.integration.v1alpha1.ProxyService service.
type ProxyServiceHandler interface {
	// CRUD operations for proxy resource terraform provider resource
	CreateProxyRdsResource(context.Context, *connect.Request[v1alpha1.CreateProxyRdsResourceRequest]) (*connect.Response[v1alpha1.CreateProxyRdsResourceResponse], error)
	UpdateProxyRdsResource(context.Context, *connect.Request[v1alpha1.UpdateProxyRdsResourceRequest]) (*connect.Response[v1alpha1.UpdateProxyRdsResourceResponse], error)
	DeleteProxyRdsResource(context.Context, *connect.Request[v1alpha1.DeleteProxyRdsResourceRequest]) (*connect.Response[v1alpha1.DeleteProxyRdsResourceResponse], error)
	GetProxyRdsResource(context.Context, *connect.Request[v1alpha1.GetProxyRdsResourceRequest]) (*connect.Response[v1alpha1.GetProxyRdsResourceResponse], error)
	CreateProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.CreateProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.CreateProxyEksClusterResourceResponse], error)
	UpdateProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.UpdateProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.UpdateProxyEksClusterResourceResponse], error)
	DeleteProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.DeleteProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.DeleteProxyEksClusterResourceResponse], error)
	GetProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.GetProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.GetProxyEksClusterResourceResponse], error)
	CreateProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.CreateProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.CreateProxyEksServiceAccountResponse], error)
	UpdateProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.UpdateProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.UpdateProxyEksServiceAccountResponse], error)
	DeleteProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.DeleteProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.DeleteProxyEksServiceAccountResponse], error)
	GetProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.GetProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.GetProxyEksServiceAccountResponse], error)
	// CRUD operations for proxy terraform provider resource
	CreateProxy(context.Context, *connect.Request[v1alpha1.CreateProxyRequest]) (*connect.Response[v1alpha1.CreateProxyResponse], error)
	UpdateProxy(context.Context, *connect.Request[v1alpha1.UpdateProxyRequest]) (*connect.Response[v1alpha1.UpdateProxyResponse], error)
	DeleteProxy(context.Context, *connect.Request[v1alpha1.DeleteProxyRequest]) (*connect.Response[v1alpha1.DeleteProxyResponse], error)
	GetProxy(context.Context, *connect.Request[v1alpha1.GetProxyRequest]) (*connect.Response[v1alpha1.GetProxyResponse], error)
	// Used by the proxy to get resources
	ListProxyResources(context.Context, *connect.Request[v1alpha1.ListProxyResourcesRequest]) (*connect.Response[v1alpha1.ListProxyResourcesResponse], error)
}

// NewProxyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProxyServiceHandler(svc ProxyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	proxyServiceCreateProxyRdsResourceHandler := connect.NewUnaryHandler(
		ProxyServiceCreateProxyRdsResourceProcedure,
		svc.CreateProxyRdsResource,
		connect.WithSchema(proxyServiceCreateProxyRdsResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceUpdateProxyRdsResourceHandler := connect.NewUnaryHandler(
		ProxyServiceUpdateProxyRdsResourceProcedure,
		svc.UpdateProxyRdsResource,
		connect.WithSchema(proxyServiceUpdateProxyRdsResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceDeleteProxyRdsResourceHandler := connect.NewUnaryHandler(
		ProxyServiceDeleteProxyRdsResourceProcedure,
		svc.DeleteProxyRdsResource,
		connect.WithSchema(proxyServiceDeleteProxyRdsResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceGetProxyRdsResourceHandler := connect.NewUnaryHandler(
		ProxyServiceGetProxyRdsResourceProcedure,
		svc.GetProxyRdsResource,
		connect.WithSchema(proxyServiceGetProxyRdsResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceCreateProxyEksClusterResourceHandler := connect.NewUnaryHandler(
		ProxyServiceCreateProxyEksClusterResourceProcedure,
		svc.CreateProxyEksClusterResource,
		connect.WithSchema(proxyServiceCreateProxyEksClusterResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceUpdateProxyEksClusterResourceHandler := connect.NewUnaryHandler(
		ProxyServiceUpdateProxyEksClusterResourceProcedure,
		svc.UpdateProxyEksClusterResource,
		connect.WithSchema(proxyServiceUpdateProxyEksClusterResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceDeleteProxyEksClusterResourceHandler := connect.NewUnaryHandler(
		ProxyServiceDeleteProxyEksClusterResourceProcedure,
		svc.DeleteProxyEksClusterResource,
		connect.WithSchema(proxyServiceDeleteProxyEksClusterResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceGetProxyEksClusterResourceHandler := connect.NewUnaryHandler(
		ProxyServiceGetProxyEksClusterResourceProcedure,
		svc.GetProxyEksClusterResource,
		connect.WithSchema(proxyServiceGetProxyEksClusterResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceCreateProxyEksServiceAccountHandler := connect.NewUnaryHandler(
		ProxyServiceCreateProxyEksServiceAccountProcedure,
		svc.CreateProxyEksServiceAccount,
		connect.WithSchema(proxyServiceCreateProxyEksServiceAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceUpdateProxyEksServiceAccountHandler := connect.NewUnaryHandler(
		ProxyServiceUpdateProxyEksServiceAccountProcedure,
		svc.UpdateProxyEksServiceAccount,
		connect.WithSchema(proxyServiceUpdateProxyEksServiceAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceDeleteProxyEksServiceAccountHandler := connect.NewUnaryHandler(
		ProxyServiceDeleteProxyEksServiceAccountProcedure,
		svc.DeleteProxyEksServiceAccount,
		connect.WithSchema(proxyServiceDeleteProxyEksServiceAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceGetProxyEksServiceAccountHandler := connect.NewUnaryHandler(
		ProxyServiceGetProxyEksServiceAccountProcedure,
		svc.GetProxyEksServiceAccount,
		connect.WithSchema(proxyServiceGetProxyEksServiceAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceCreateProxyHandler := connect.NewUnaryHandler(
		ProxyServiceCreateProxyProcedure,
		svc.CreateProxy,
		connect.WithSchema(proxyServiceCreateProxyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceUpdateProxyHandler := connect.NewUnaryHandler(
		ProxyServiceUpdateProxyProcedure,
		svc.UpdateProxy,
		connect.WithSchema(proxyServiceUpdateProxyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceDeleteProxyHandler := connect.NewUnaryHandler(
		ProxyServiceDeleteProxyProcedure,
		svc.DeleteProxy,
		connect.WithSchema(proxyServiceDeleteProxyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceGetProxyHandler := connect.NewUnaryHandler(
		ProxyServiceGetProxyProcedure,
		svc.GetProxy,
		connect.WithSchema(proxyServiceGetProxyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceListProxyResourcesHandler := connect.NewUnaryHandler(
		ProxyServiceListProxyResourcesProcedure,
		svc.ListProxyResources,
		connect.WithSchema(proxyServiceListProxyResourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.integration.v1alpha1.ProxyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProxyServiceCreateProxyRdsResourceProcedure:
			proxyServiceCreateProxyRdsResourceHandler.ServeHTTP(w, r)
		case ProxyServiceUpdateProxyRdsResourceProcedure:
			proxyServiceUpdateProxyRdsResourceHandler.ServeHTTP(w, r)
		case ProxyServiceDeleteProxyRdsResourceProcedure:
			proxyServiceDeleteProxyRdsResourceHandler.ServeHTTP(w, r)
		case ProxyServiceGetProxyRdsResourceProcedure:
			proxyServiceGetProxyRdsResourceHandler.ServeHTTP(w, r)
		case ProxyServiceCreateProxyEksClusterResourceProcedure:
			proxyServiceCreateProxyEksClusterResourceHandler.ServeHTTP(w, r)
		case ProxyServiceUpdateProxyEksClusterResourceProcedure:
			proxyServiceUpdateProxyEksClusterResourceHandler.ServeHTTP(w, r)
		case ProxyServiceDeleteProxyEksClusterResourceProcedure:
			proxyServiceDeleteProxyEksClusterResourceHandler.ServeHTTP(w, r)
		case ProxyServiceGetProxyEksClusterResourceProcedure:
			proxyServiceGetProxyEksClusterResourceHandler.ServeHTTP(w, r)
		case ProxyServiceCreateProxyEksServiceAccountProcedure:
			proxyServiceCreateProxyEksServiceAccountHandler.ServeHTTP(w, r)
		case ProxyServiceUpdateProxyEksServiceAccountProcedure:
			proxyServiceUpdateProxyEksServiceAccountHandler.ServeHTTP(w, r)
		case ProxyServiceDeleteProxyEksServiceAccountProcedure:
			proxyServiceDeleteProxyEksServiceAccountHandler.ServeHTTP(w, r)
		case ProxyServiceGetProxyEksServiceAccountProcedure:
			proxyServiceGetProxyEksServiceAccountHandler.ServeHTTP(w, r)
		case ProxyServiceCreateProxyProcedure:
			proxyServiceCreateProxyHandler.ServeHTTP(w, r)
		case ProxyServiceUpdateProxyProcedure:
			proxyServiceUpdateProxyHandler.ServeHTTP(w, r)
		case ProxyServiceDeleteProxyProcedure:
			proxyServiceDeleteProxyHandler.ServeHTTP(w, r)
		case ProxyServiceGetProxyProcedure:
			proxyServiceGetProxyHandler.ServeHTTP(w, r)
		case ProxyServiceListProxyResourcesProcedure:
			proxyServiceListProxyResourcesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProxyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProxyServiceHandler struct{}

func (UnimplementedProxyServiceHandler) CreateProxyRdsResource(context.Context, *connect.Request[v1alpha1.CreateProxyRdsResourceRequest]) (*connect.Response[v1alpha1.CreateProxyRdsResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.CreateProxyRdsResource is not implemented"))
}

func (UnimplementedProxyServiceHandler) UpdateProxyRdsResource(context.Context, *connect.Request[v1alpha1.UpdateProxyRdsResourceRequest]) (*connect.Response[v1alpha1.UpdateProxyRdsResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.UpdateProxyRdsResource is not implemented"))
}

func (UnimplementedProxyServiceHandler) DeleteProxyRdsResource(context.Context, *connect.Request[v1alpha1.DeleteProxyRdsResourceRequest]) (*connect.Response[v1alpha1.DeleteProxyRdsResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.DeleteProxyRdsResource is not implemented"))
}

func (UnimplementedProxyServiceHandler) GetProxyRdsResource(context.Context, *connect.Request[v1alpha1.GetProxyRdsResourceRequest]) (*connect.Response[v1alpha1.GetProxyRdsResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.GetProxyRdsResource is not implemented"))
}

func (UnimplementedProxyServiceHandler) CreateProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.CreateProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.CreateProxyEksClusterResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.CreateProxyEksClusterResource is not implemented"))
}

func (UnimplementedProxyServiceHandler) UpdateProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.UpdateProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.UpdateProxyEksClusterResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.UpdateProxyEksClusterResource is not implemented"))
}

func (UnimplementedProxyServiceHandler) DeleteProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.DeleteProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.DeleteProxyEksClusterResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.DeleteProxyEksClusterResource is not implemented"))
}

func (UnimplementedProxyServiceHandler) GetProxyEksClusterResource(context.Context, *connect.Request[v1alpha1.GetProxyEksClusterResourceRequest]) (*connect.Response[v1alpha1.GetProxyEksClusterResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.GetProxyEksClusterResource is not implemented"))
}

func (UnimplementedProxyServiceHandler) CreateProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.CreateProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.CreateProxyEksServiceAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.CreateProxyEksServiceAccount is not implemented"))
}

func (UnimplementedProxyServiceHandler) UpdateProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.UpdateProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.UpdateProxyEksServiceAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.UpdateProxyEksServiceAccount is not implemented"))
}

func (UnimplementedProxyServiceHandler) DeleteProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.DeleteProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.DeleteProxyEksServiceAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.DeleteProxyEksServiceAccount is not implemented"))
}

func (UnimplementedProxyServiceHandler) GetProxyEksServiceAccount(context.Context, *connect.Request[v1alpha1.GetProxyEksServiceAccountRequest]) (*connect.Response[v1alpha1.GetProxyEksServiceAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.GetProxyEksServiceAccount is not implemented"))
}

func (UnimplementedProxyServiceHandler) CreateProxy(context.Context, *connect.Request[v1alpha1.CreateProxyRequest]) (*connect.Response[v1alpha1.CreateProxyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.CreateProxy is not implemented"))
}

func (UnimplementedProxyServiceHandler) UpdateProxy(context.Context, *connect.Request[v1alpha1.UpdateProxyRequest]) (*connect.Response[v1alpha1.UpdateProxyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.UpdateProxy is not implemented"))
}

func (UnimplementedProxyServiceHandler) DeleteProxy(context.Context, *connect.Request[v1alpha1.DeleteProxyRequest]) (*connect.Response[v1alpha1.DeleteProxyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.DeleteProxy is not implemented"))
}

func (UnimplementedProxyServiceHandler) GetProxy(context.Context, *connect.Request[v1alpha1.GetProxyRequest]) (*connect.Response[v1alpha1.GetProxyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.GetProxy is not implemented"))
}

func (UnimplementedProxyServiceHandler) ListProxyResources(context.Context, *connect.Request[v1alpha1.ListProxyResourcesRequest]) (*connect.Response[v1alpha1.ListProxyResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyService.ListProxyResources is not implemented"))
}
