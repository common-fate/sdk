// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/integration/v1alpha1/proxy.proto

package integrationv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/integration/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProxyHealthCheckServiceName is the fully-qualified name of the ProxyHealthCheckService service.
	ProxyHealthCheckServiceName = "commonfate.control.integration.v1alpha1.ProxyHealthCheckService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProxyHealthCheckServicePingProcedure is the fully-qualified name of the ProxyHealthCheckService's
	// Ping RPC.
	ProxyHealthCheckServicePingProcedure = "/commonfate.control.integration.v1alpha1.ProxyHealthCheckService/Ping"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	proxyHealthCheckServiceServiceDescriptor    = v1alpha1.File_commonfate_control_integration_v1alpha1_proxy_proto.Services().ByName("ProxyHealthCheckService")
	proxyHealthCheckServicePingMethodDescriptor = proxyHealthCheckServiceServiceDescriptor.Methods().ByName("Ping")
)

// ProxyHealthCheckServiceClient is a client for the
// commonfate.control.integration.v1alpha1.ProxyHealthCheckService service.
type ProxyHealthCheckServiceClient interface {
	// Ping the healthcheck service.
	Ping(context.Context, *connect.Request[v1alpha1.PingRequest]) (*connect.Response[v1alpha1.PingResponse], error)
}

// NewProxyHealthCheckServiceClient constructs a client for the
// commonfate.control.integration.v1alpha1.ProxyHealthCheckService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProxyHealthCheckServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProxyHealthCheckServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &proxyHealthCheckServiceClient{
		ping: connect.NewClient[v1alpha1.PingRequest, v1alpha1.PingResponse](
			httpClient,
			baseURL+ProxyHealthCheckServicePingProcedure,
			connect.WithSchema(proxyHealthCheckServicePingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// proxyHealthCheckServiceClient implements ProxyHealthCheckServiceClient.
type proxyHealthCheckServiceClient struct {
	ping *connect.Client[v1alpha1.PingRequest, v1alpha1.PingResponse]
}

// Ping calls commonfate.control.integration.v1alpha1.ProxyHealthCheckService.Ping.
func (c *proxyHealthCheckServiceClient) Ping(ctx context.Context, req *connect.Request[v1alpha1.PingRequest]) (*connect.Response[v1alpha1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// ProxyHealthCheckServiceHandler is an implementation of the
// commonfate.control.integration.v1alpha1.ProxyHealthCheckService service.
type ProxyHealthCheckServiceHandler interface {
	// Ping the healthcheck service.
	Ping(context.Context, *connect.Request[v1alpha1.PingRequest]) (*connect.Response[v1alpha1.PingResponse], error)
}

// NewProxyHealthCheckServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProxyHealthCheckServiceHandler(svc ProxyHealthCheckServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	proxyHealthCheckServicePingHandler := connect.NewUnaryHandler(
		ProxyHealthCheckServicePingProcedure,
		svc.Ping,
		connect.WithSchema(proxyHealthCheckServicePingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.integration.v1alpha1.ProxyHealthCheckService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProxyHealthCheckServicePingProcedure:
			proxyHealthCheckServicePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProxyHealthCheckServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProxyHealthCheckServiceHandler struct{}

func (UnimplementedProxyHealthCheckServiceHandler) Ping(context.Context, *connect.Request[v1alpha1.PingRequest]) (*connect.Response[v1alpha1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.integration.v1alpha1.ProxyHealthCheckService.Ping is not implemented"))
}
