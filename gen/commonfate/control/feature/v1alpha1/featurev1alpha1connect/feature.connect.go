// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/control/feature/v1alpha1/feature.proto

package featurev1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/control/feature/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FeatureServiceName is the fully-qualified name of the FeatureService service.
	FeatureServiceName = "commonfate.control.feature.v1alpha1.FeatureService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FeatureServiceGetFeaturesProcedure is the fully-qualified name of the FeatureService's
	// GetFeatures RPC.
	FeatureServiceGetFeaturesProcedure = "/commonfate.control.feature.v1alpha1.FeatureService/GetFeatures"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	featureServiceServiceDescriptor           = v1alpha1.File_commonfate_control_feature_v1alpha1_feature_proto.Services().ByName("FeatureService")
	featureServiceGetFeaturesMethodDescriptor = featureServiceServiceDescriptor.Methods().ByName("GetFeatures")
)

// FeatureServiceClient is a client for the commonfate.control.feature.v1alpha1.FeatureService
// service.
type FeatureServiceClient interface {
	// Returns a list of enabled features.
	GetFeatures(context.Context, *connect.Request[v1alpha1.GetFeaturesRequest]) (*connect.Response[v1alpha1.GetFeaturesResponse], error)
}

// NewFeatureServiceClient constructs a client for the
// commonfate.control.feature.v1alpha1.FeatureService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeatureServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FeatureServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &featureServiceClient{
		getFeatures: connect.NewClient[v1alpha1.GetFeaturesRequest, v1alpha1.GetFeaturesResponse](
			httpClient,
			baseURL+FeatureServiceGetFeaturesProcedure,
			connect.WithSchema(featureServiceGetFeaturesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// featureServiceClient implements FeatureServiceClient.
type featureServiceClient struct {
	getFeatures *connect.Client[v1alpha1.GetFeaturesRequest, v1alpha1.GetFeaturesResponse]
}

// GetFeatures calls commonfate.control.feature.v1alpha1.FeatureService.GetFeatures.
func (c *featureServiceClient) GetFeatures(ctx context.Context, req *connect.Request[v1alpha1.GetFeaturesRequest]) (*connect.Response[v1alpha1.GetFeaturesResponse], error) {
	return c.getFeatures.CallUnary(ctx, req)
}

// FeatureServiceHandler is an implementation of the
// commonfate.control.feature.v1alpha1.FeatureService service.
type FeatureServiceHandler interface {
	// Returns a list of enabled features.
	GetFeatures(context.Context, *connect.Request[v1alpha1.GetFeaturesRequest]) (*connect.Response[v1alpha1.GetFeaturesResponse], error)
}

// NewFeatureServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeatureServiceHandler(svc FeatureServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	featureServiceGetFeaturesHandler := connect.NewUnaryHandler(
		FeatureServiceGetFeaturesProcedure,
		svc.GetFeatures,
		connect.WithSchema(featureServiceGetFeaturesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.control.feature.v1alpha1.FeatureService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FeatureServiceGetFeaturesProcedure:
			featureServiceGetFeaturesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFeatureServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFeatureServiceHandler struct{}

func (UnimplementedFeatureServiceHandler) GetFeatures(context.Context, *connect.Request[v1alpha1.GetFeaturesRequest]) (*connect.Response[v1alpha1.GetFeaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.control.feature.v1alpha1.FeatureService.GetFeatures is not implemented"))
}
