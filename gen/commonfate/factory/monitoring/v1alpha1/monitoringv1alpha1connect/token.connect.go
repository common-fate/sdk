// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/factory/monitoring/v1alpha1/token.proto

package monitoringv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/factory/monitoring/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TokenServiceName is the fully-qualified name of the TokenService service.
	TokenServiceName = "commonfate.factory.monitoring.v1alpha1.TokenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TokenServiceCreateWriteTokenProcedure is the fully-qualified name of the TokenService's
	// CreateWriteToken RPC.
	TokenServiceCreateWriteTokenProcedure = "/commonfate.factory.monitoring.v1alpha1.TokenService/CreateWriteToken"
	// TokenServiceGetWriteTokenProcedure is the fully-qualified name of the TokenService's
	// GetWriteToken RPC.
	TokenServiceGetWriteTokenProcedure = "/commonfate.factory.monitoring.v1alpha1.TokenService/GetWriteToken"
	// TokenServiceDeleteWriteTokenProcedure is the fully-qualified name of the TokenService's
	// DeleteWriteToken RPC.
	TokenServiceDeleteWriteTokenProcedure = "/commonfate.factory.monitoring.v1alpha1.TokenService/DeleteWriteToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tokenServiceServiceDescriptor                = v1alpha1.File_commonfate_factory_monitoring_v1alpha1_token_proto.Services().ByName("TokenService")
	tokenServiceCreateWriteTokenMethodDescriptor = tokenServiceServiceDescriptor.Methods().ByName("CreateWriteToken")
	tokenServiceGetWriteTokenMethodDescriptor    = tokenServiceServiceDescriptor.Methods().ByName("GetWriteToken")
	tokenServiceDeleteWriteTokenMethodDescriptor = tokenServiceServiceDescriptor.Methods().ByName("DeleteWriteToken")
)

// TokenServiceClient is a client for the commonfate.factory.monitoring.v1alpha1.TokenService
// service.
type TokenServiceClient interface {
	// Obtain a Write Token, used to authenticate to our OpenTelemetry collector.
	CreateWriteToken(context.Context, *connect.Request[v1alpha1.CreateWriteTokenRequest]) (*connect.Response[v1alpha1.CreateWriteTokenResponse], error)
	GetWriteToken(context.Context, *connect.Request[v1alpha1.GetWriteTokenRequest]) (*connect.Response[v1alpha1.GetWriteTokenResponse], error)
	DeleteWriteToken(context.Context, *connect.Request[v1alpha1.DeleteWriteTokenRequest]) (*connect.Response[v1alpha1.DeleteWriteTokenResponse], error)
}

// NewTokenServiceClient constructs a client for the
// commonfate.factory.monitoring.v1alpha1.TokenService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TokenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tokenServiceClient{
		createWriteToken: connect.NewClient[v1alpha1.CreateWriteTokenRequest, v1alpha1.CreateWriteTokenResponse](
			httpClient,
			baseURL+TokenServiceCreateWriteTokenProcedure,
			connect.WithSchema(tokenServiceCreateWriteTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWriteToken: connect.NewClient[v1alpha1.GetWriteTokenRequest, v1alpha1.GetWriteTokenResponse](
			httpClient,
			baseURL+TokenServiceGetWriteTokenProcedure,
			connect.WithSchema(tokenServiceGetWriteTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteWriteToken: connect.NewClient[v1alpha1.DeleteWriteTokenRequest, v1alpha1.DeleteWriteTokenResponse](
			httpClient,
			baseURL+TokenServiceDeleteWriteTokenProcedure,
			connect.WithSchema(tokenServiceDeleteWriteTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tokenServiceClient implements TokenServiceClient.
type tokenServiceClient struct {
	createWriteToken *connect.Client[v1alpha1.CreateWriteTokenRequest, v1alpha1.CreateWriteTokenResponse]
	getWriteToken    *connect.Client[v1alpha1.GetWriteTokenRequest, v1alpha1.GetWriteTokenResponse]
	deleteWriteToken *connect.Client[v1alpha1.DeleteWriteTokenRequest, v1alpha1.DeleteWriteTokenResponse]
}

// CreateWriteToken calls commonfate.factory.monitoring.v1alpha1.TokenService.CreateWriteToken.
func (c *tokenServiceClient) CreateWriteToken(ctx context.Context, req *connect.Request[v1alpha1.CreateWriteTokenRequest]) (*connect.Response[v1alpha1.CreateWriteTokenResponse], error) {
	return c.createWriteToken.CallUnary(ctx, req)
}

// GetWriteToken calls commonfate.factory.monitoring.v1alpha1.TokenService.GetWriteToken.
func (c *tokenServiceClient) GetWriteToken(ctx context.Context, req *connect.Request[v1alpha1.GetWriteTokenRequest]) (*connect.Response[v1alpha1.GetWriteTokenResponse], error) {
	return c.getWriteToken.CallUnary(ctx, req)
}

// DeleteWriteToken calls commonfate.factory.monitoring.v1alpha1.TokenService.DeleteWriteToken.
func (c *tokenServiceClient) DeleteWriteToken(ctx context.Context, req *connect.Request[v1alpha1.DeleteWriteTokenRequest]) (*connect.Response[v1alpha1.DeleteWriteTokenResponse], error) {
	return c.deleteWriteToken.CallUnary(ctx, req)
}

// TokenServiceHandler is an implementation of the
// commonfate.factory.monitoring.v1alpha1.TokenService service.
type TokenServiceHandler interface {
	// Obtain a Write Token, used to authenticate to our OpenTelemetry collector.
	CreateWriteToken(context.Context, *connect.Request[v1alpha1.CreateWriteTokenRequest]) (*connect.Response[v1alpha1.CreateWriteTokenResponse], error)
	GetWriteToken(context.Context, *connect.Request[v1alpha1.GetWriteTokenRequest]) (*connect.Response[v1alpha1.GetWriteTokenResponse], error)
	DeleteWriteToken(context.Context, *connect.Request[v1alpha1.DeleteWriteTokenRequest]) (*connect.Response[v1alpha1.DeleteWriteTokenResponse], error)
}

// NewTokenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokenServiceHandler(svc TokenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tokenServiceCreateWriteTokenHandler := connect.NewUnaryHandler(
		TokenServiceCreateWriteTokenProcedure,
		svc.CreateWriteToken,
		connect.WithSchema(tokenServiceCreateWriteTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tokenServiceGetWriteTokenHandler := connect.NewUnaryHandler(
		TokenServiceGetWriteTokenProcedure,
		svc.GetWriteToken,
		connect.WithSchema(tokenServiceGetWriteTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tokenServiceDeleteWriteTokenHandler := connect.NewUnaryHandler(
		TokenServiceDeleteWriteTokenProcedure,
		svc.DeleteWriteToken,
		connect.WithSchema(tokenServiceDeleteWriteTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.factory.monitoring.v1alpha1.TokenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TokenServiceCreateWriteTokenProcedure:
			tokenServiceCreateWriteTokenHandler.ServeHTTP(w, r)
		case TokenServiceGetWriteTokenProcedure:
			tokenServiceGetWriteTokenHandler.ServeHTTP(w, r)
		case TokenServiceDeleteWriteTokenProcedure:
			tokenServiceDeleteWriteTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTokenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokenServiceHandler struct{}

func (UnimplementedTokenServiceHandler) CreateWriteToken(context.Context, *connect.Request[v1alpha1.CreateWriteTokenRequest]) (*connect.Response[v1alpha1.CreateWriteTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.monitoring.v1alpha1.TokenService.CreateWriteToken is not implemented"))
}

func (UnimplementedTokenServiceHandler) GetWriteToken(context.Context, *connect.Request[v1alpha1.GetWriteTokenRequest]) (*connect.Response[v1alpha1.GetWriteTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.monitoring.v1alpha1.TokenService.GetWriteToken is not implemented"))
}

func (UnimplementedTokenServiceHandler) DeleteWriteToken(context.Context, *connect.Request[v1alpha1.DeleteWriteTokenRequest]) (*connect.Response[v1alpha1.DeleteWriteTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.monitoring.v1alpha1.TokenService.DeleteWriteToken is not implemented"))
}
