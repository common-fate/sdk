// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/factory/monitoring/v1alpha1/monitoring.proto

package deployidv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/factory/monitoring/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MonitoringServiceName is the fully-qualified name of the MonitoringService service.
	MonitoringServiceName = "commonfate.factory.deployid.v1alpha1.MonitoringService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonitoringServiceAuthenticateProcedure is the fully-qualified name of the MonitoringService's
	// Authenticate RPC.
	MonitoringServiceAuthenticateProcedure = "/commonfate.factory.deployid.v1alpha1.MonitoringService/Authenticate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	monitoringServiceServiceDescriptor            = v1alpha1.File_commonfate_factory_monitoring_v1alpha1_monitoring_proto.Services().ByName("MonitoringService")
	monitoringServiceAuthenticateMethodDescriptor = monitoringServiceServiceDescriptor.Methods().ByName("Authenticate")
)

// MonitoringServiceClient is a client for the
// commonfate.factory.deployid.v1alpha1.MonitoringService service.
type MonitoringServiceClient interface {
	Authenticate(context.Context, *connect.Request[v1alpha1.AuthenticateRequest]) (*connect.Response[v1alpha1.AuthenticateResponse], error)
}

// NewMonitoringServiceClient constructs a client for the
// commonfate.factory.deployid.v1alpha1.MonitoringService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonitoringServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonitoringServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &monitoringServiceClient{
		authenticate: connect.NewClient[v1alpha1.AuthenticateRequest, v1alpha1.AuthenticateResponse](
			httpClient,
			baseURL+MonitoringServiceAuthenticateProcedure,
			connect.WithSchema(monitoringServiceAuthenticateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// monitoringServiceClient implements MonitoringServiceClient.
type monitoringServiceClient struct {
	authenticate *connect.Client[v1alpha1.AuthenticateRequest, v1alpha1.AuthenticateResponse]
}

// Authenticate calls commonfate.factory.deployid.v1alpha1.MonitoringService.Authenticate.
func (c *monitoringServiceClient) Authenticate(ctx context.Context, req *connect.Request[v1alpha1.AuthenticateRequest]) (*connect.Response[v1alpha1.AuthenticateResponse], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// MonitoringServiceHandler is an implementation of the
// commonfate.factory.deployid.v1alpha1.MonitoringService service.
type MonitoringServiceHandler interface {
	Authenticate(context.Context, *connect.Request[v1alpha1.AuthenticateRequest]) (*connect.Response[v1alpha1.AuthenticateResponse], error)
}

// NewMonitoringServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonitoringServiceHandler(svc MonitoringServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monitoringServiceAuthenticateHandler := connect.NewUnaryHandler(
		MonitoringServiceAuthenticateProcedure,
		svc.Authenticate,
		connect.WithSchema(monitoringServiceAuthenticateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.factory.deployid.v1alpha1.MonitoringService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonitoringServiceAuthenticateProcedure:
			monitoringServiceAuthenticateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonitoringServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonitoringServiceHandler struct{}

func (UnimplementedMonitoringServiceHandler) Authenticate(context.Context, *connect.Request[v1alpha1.AuthenticateRequest]) (*connect.Response[v1alpha1.AuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployid.v1alpha1.MonitoringService.Authenticate is not implemented"))
}
