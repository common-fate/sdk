// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/factory/deployment/v1alpha1/deployment.proto

package deploymentv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/factory/deployment/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeploymentServiceName is the fully-qualified name of the DeploymentService service.
	DeploymentServiceName = "commonfate.factory.deployment.v1alpha1.DeploymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeploymentServiceGetDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// GetDeployment RPC.
	DeploymentServiceGetDeploymentProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/GetDeployment"
	// DeploymentServiceCreateDNSRecordProcedure is the fully-qualified name of the DeploymentService's
	// CreateDNSRecord RPC.
	DeploymentServiceCreateDNSRecordProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/CreateDNSRecord"
	// DeploymentServiceGetDNSRecordProcedure is the fully-qualified name of the DeploymentService's
	// GetDNSRecord RPC.
	DeploymentServiceGetDNSRecordProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/GetDNSRecord"
	// DeploymentServiceRegisterAWSACMCertificateProcedure is the fully-qualified name of the
	// DeploymentService's RegisterAWSACMCertificate RPC.
	DeploymentServiceRegisterAWSACMCertificateProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/RegisterAWSACMCertificate"
	// DeploymentServiceGetAWSACMCertificateProcedure is the fully-qualified name of the
	// DeploymentService's GetAWSACMCertificate RPC.
	DeploymentServiceGetAWSACMCertificateProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/GetAWSACMCertificate"
	// DeploymentServiceUpdateAWSACMCertificateProcedure is the fully-qualified name of the
	// DeploymentService's UpdateAWSACMCertificate RPC.
	DeploymentServiceUpdateAWSACMCertificateProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/UpdateAWSACMCertificate"
	// DeploymentServiceDeregisterAWSACMCertificateProcedure is the fully-qualified name of the
	// DeploymentService's DeregisterAWSACMCertificate RPC.
	DeploymentServiceDeregisterAWSACMCertificateProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/DeregisterAWSACMCertificate"
	// DeploymentServiceUpdateDNSRecordProcedure is the fully-qualified name of the DeploymentService's
	// UpdateDNSRecord RPC.
	DeploymentServiceUpdateDNSRecordProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/UpdateDNSRecord"
	// DeploymentServiceDeleteDNSRecordProcedure is the fully-qualified name of the DeploymentService's
	// DeleteDNSRecord RPC.
	DeploymentServiceDeleteDNSRecordProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/DeleteDNSRecord"
	// DeploymentServiceGetTerraformOutputProcedure is the fully-qualified name of the
	// DeploymentService's GetTerraformOutput RPC.
	DeploymentServiceGetTerraformOutputProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/GetTerraformOutput"
	// DeploymentServiceSetTerraformOutputProcedure is the fully-qualified name of the
	// DeploymentService's SetTerraformOutput RPC.
	DeploymentServiceSetTerraformOutputProcedure = "/commonfate.factory.deployment.v1alpha1.DeploymentService/SetTerraformOutput"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	deploymentServiceServiceDescriptor                           = v1alpha1.File_commonfate_factory_deployment_v1alpha1_deployment_proto.Services().ByName("DeploymentService")
	deploymentServiceGetDeploymentMethodDescriptor               = deploymentServiceServiceDescriptor.Methods().ByName("GetDeployment")
	deploymentServiceCreateDNSRecordMethodDescriptor             = deploymentServiceServiceDescriptor.Methods().ByName("CreateDNSRecord")
	deploymentServiceGetDNSRecordMethodDescriptor                = deploymentServiceServiceDescriptor.Methods().ByName("GetDNSRecord")
	deploymentServiceRegisterAWSACMCertificateMethodDescriptor   = deploymentServiceServiceDescriptor.Methods().ByName("RegisterAWSACMCertificate")
	deploymentServiceGetAWSACMCertificateMethodDescriptor        = deploymentServiceServiceDescriptor.Methods().ByName("GetAWSACMCertificate")
	deploymentServiceUpdateAWSACMCertificateMethodDescriptor     = deploymentServiceServiceDescriptor.Methods().ByName("UpdateAWSACMCertificate")
	deploymentServiceDeregisterAWSACMCertificateMethodDescriptor = deploymentServiceServiceDescriptor.Methods().ByName("DeregisterAWSACMCertificate")
	deploymentServiceUpdateDNSRecordMethodDescriptor             = deploymentServiceServiceDescriptor.Methods().ByName("UpdateDNSRecord")
	deploymentServiceDeleteDNSRecordMethodDescriptor             = deploymentServiceServiceDescriptor.Methods().ByName("DeleteDNSRecord")
	deploymentServiceGetTerraformOutputMethodDescriptor          = deploymentServiceServiceDescriptor.Methods().ByName("GetTerraformOutput")
	deploymentServiceSetTerraformOutputMethodDescriptor          = deploymentServiceServiceDescriptor.Methods().ByName("SetTerraformOutput")
)

// DeploymentServiceClient is a client for the
// commonfate.factory.deployment.v1alpha1.DeploymentService service.
type DeploymentServiceClient interface {
	// Get information about a deployment.
	GetDeployment(context.Context, *connect.Request[v1alpha1.GetDeploymentRequest]) (*connect.Response[v1alpha1.GetDeploymentResponse], error)
	// Create a DNS record associated with the deployment.
	// Used to set up a default `commonfate.app` domain for the deployment.
	CreateDNSRecord(context.Context, *connect.Request[v1alpha1.CreateDNSRecordRequest]) (*connect.Response[v1alpha1.CreateDNSRecordResponse], error)
	// Retrieves a DNS record associated with the deployment.
	GetDNSRecord(context.Context, *connect.Request[v1alpha1.GetDNSRecordRequest]) (*connect.Response[v1alpha1.GetDNSRecordResponse], error)
	// Registers an AWS ACM certificate to be associated with the deployment
	RegisterAWSACMCertificate(context.Context, *connect.Request[v1alpha1.RegisterAWSACMCertificateRequest]) (*connect.Response[v1alpha1.RegisterAWSACMCertificateResponse], error)
	// Retrieves an AWS ACM certificate to be associated with the deployment
	GetAWSACMCertificate(context.Context, *connect.Request[v1alpha1.GetAWSACMCertificateRequest]) (*connect.Response[v1alpha1.GetAWSACMCertificateResponse], error)
	// Updates an AWS ACM certificate to be associated with the deployment
	UpdateAWSACMCertificate(context.Context, *connect.Request[v1alpha1.UpdateAWSACMCertificateRequest]) (*connect.Response[v1alpha1.UpdateAWSACMCertificateResponse], error)
	// Deregisters an AWS ACM certificate to be associated with the deployment.
	// This method doesn't delete the actual ACM cert, it just removes the reference to it.
	DeregisterAWSACMCertificate(context.Context, *connect.Request[v1alpha1.DeregisterAWSACMCertificateRequest]) (*connect.Response[v1alpha1.DeregisterAWSACMCertificateResponse], error)
	// Updates a DNS record associated with the deployment.
	UpdateDNSRecord(context.Context, *connect.Request[v1alpha1.UpdateDNSRecordRequest]) (*connect.Response[v1alpha1.UpdateDNSRecordResponse], error)
	// Deletes a DNS record associated with the deployment.
	DeleteDNSRecord(context.Context, *connect.Request[v1alpha1.DeleteDNSRecordRequest]) (*connect.Response[v1alpha1.DeleteDNSRecordResponse], error)
	// Retrieves Terraform outputs for the deployment.
	GetTerraformOutput(context.Context, *connect.Request[v1alpha1.GetTerraformOutputRequest]) (*connect.Response[v1alpha1.GetTerraformOutputResponse], error)
	// Sets Terraform outputs for the deployment.
	SetTerraformOutput(context.Context, *connect.Request[v1alpha1.SetTerraformOutputRequest]) (*connect.Response[v1alpha1.SetTerraformOutputResponse], error)
}

// NewDeploymentServiceClient constructs a client for the
// commonfate.factory.deployment.v1alpha1.DeploymentService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deploymentServiceClient{
		getDeployment: connect.NewClient[v1alpha1.GetDeploymentRequest, v1alpha1.GetDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceGetDeploymentProcedure,
			connect.WithSchema(deploymentServiceGetDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDNSRecord: connect.NewClient[v1alpha1.CreateDNSRecordRequest, v1alpha1.CreateDNSRecordResponse](
			httpClient,
			baseURL+DeploymentServiceCreateDNSRecordProcedure,
			connect.WithSchema(deploymentServiceCreateDNSRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDNSRecord: connect.NewClient[v1alpha1.GetDNSRecordRequest, v1alpha1.GetDNSRecordResponse](
			httpClient,
			baseURL+DeploymentServiceGetDNSRecordProcedure,
			connect.WithSchema(deploymentServiceGetDNSRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerAWSACMCertificate: connect.NewClient[v1alpha1.RegisterAWSACMCertificateRequest, v1alpha1.RegisterAWSACMCertificateResponse](
			httpClient,
			baseURL+DeploymentServiceRegisterAWSACMCertificateProcedure,
			connect.WithSchema(deploymentServiceRegisterAWSACMCertificateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAWSACMCertificate: connect.NewClient[v1alpha1.GetAWSACMCertificateRequest, v1alpha1.GetAWSACMCertificateResponse](
			httpClient,
			baseURL+DeploymentServiceGetAWSACMCertificateProcedure,
			connect.WithSchema(deploymentServiceGetAWSACMCertificateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAWSACMCertificate: connect.NewClient[v1alpha1.UpdateAWSACMCertificateRequest, v1alpha1.UpdateAWSACMCertificateResponse](
			httpClient,
			baseURL+DeploymentServiceUpdateAWSACMCertificateProcedure,
			connect.WithSchema(deploymentServiceUpdateAWSACMCertificateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deregisterAWSACMCertificate: connect.NewClient[v1alpha1.DeregisterAWSACMCertificateRequest, v1alpha1.DeregisterAWSACMCertificateResponse](
			httpClient,
			baseURL+DeploymentServiceDeregisterAWSACMCertificateProcedure,
			connect.WithSchema(deploymentServiceDeregisterAWSACMCertificateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateDNSRecord: connect.NewClient[v1alpha1.UpdateDNSRecordRequest, v1alpha1.UpdateDNSRecordResponse](
			httpClient,
			baseURL+DeploymentServiceUpdateDNSRecordProcedure,
			connect.WithSchema(deploymentServiceUpdateDNSRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDNSRecord: connect.NewClient[v1alpha1.DeleteDNSRecordRequest, v1alpha1.DeleteDNSRecordResponse](
			httpClient,
			baseURL+DeploymentServiceDeleteDNSRecordProcedure,
			connect.WithSchema(deploymentServiceDeleteDNSRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTerraformOutput: connect.NewClient[v1alpha1.GetTerraformOutputRequest, v1alpha1.GetTerraformOutputResponse](
			httpClient,
			baseURL+DeploymentServiceGetTerraformOutputProcedure,
			connect.WithSchema(deploymentServiceGetTerraformOutputMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setTerraformOutput: connect.NewClient[v1alpha1.SetTerraformOutputRequest, v1alpha1.SetTerraformOutputResponse](
			httpClient,
			baseURL+DeploymentServiceSetTerraformOutputProcedure,
			connect.WithSchema(deploymentServiceSetTerraformOutputMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// deploymentServiceClient implements DeploymentServiceClient.
type deploymentServiceClient struct {
	getDeployment               *connect.Client[v1alpha1.GetDeploymentRequest, v1alpha1.GetDeploymentResponse]
	createDNSRecord             *connect.Client[v1alpha1.CreateDNSRecordRequest, v1alpha1.CreateDNSRecordResponse]
	getDNSRecord                *connect.Client[v1alpha1.GetDNSRecordRequest, v1alpha1.GetDNSRecordResponse]
	registerAWSACMCertificate   *connect.Client[v1alpha1.RegisterAWSACMCertificateRequest, v1alpha1.RegisterAWSACMCertificateResponse]
	getAWSACMCertificate        *connect.Client[v1alpha1.GetAWSACMCertificateRequest, v1alpha1.GetAWSACMCertificateResponse]
	updateAWSACMCertificate     *connect.Client[v1alpha1.UpdateAWSACMCertificateRequest, v1alpha1.UpdateAWSACMCertificateResponse]
	deregisterAWSACMCertificate *connect.Client[v1alpha1.DeregisterAWSACMCertificateRequest, v1alpha1.DeregisterAWSACMCertificateResponse]
	updateDNSRecord             *connect.Client[v1alpha1.UpdateDNSRecordRequest, v1alpha1.UpdateDNSRecordResponse]
	deleteDNSRecord             *connect.Client[v1alpha1.DeleteDNSRecordRequest, v1alpha1.DeleteDNSRecordResponse]
	getTerraformOutput          *connect.Client[v1alpha1.GetTerraformOutputRequest, v1alpha1.GetTerraformOutputResponse]
	setTerraformOutput          *connect.Client[v1alpha1.SetTerraformOutputRequest, v1alpha1.SetTerraformOutputResponse]
}

// GetDeployment calls commonfate.factory.deployment.v1alpha1.DeploymentService.GetDeployment.
func (c *deploymentServiceClient) GetDeployment(ctx context.Context, req *connect.Request[v1alpha1.GetDeploymentRequest]) (*connect.Response[v1alpha1.GetDeploymentResponse], error) {
	return c.getDeployment.CallUnary(ctx, req)
}

// CreateDNSRecord calls commonfate.factory.deployment.v1alpha1.DeploymentService.CreateDNSRecord.
func (c *deploymentServiceClient) CreateDNSRecord(ctx context.Context, req *connect.Request[v1alpha1.CreateDNSRecordRequest]) (*connect.Response[v1alpha1.CreateDNSRecordResponse], error) {
	return c.createDNSRecord.CallUnary(ctx, req)
}

// GetDNSRecord calls commonfate.factory.deployment.v1alpha1.DeploymentService.GetDNSRecord.
func (c *deploymentServiceClient) GetDNSRecord(ctx context.Context, req *connect.Request[v1alpha1.GetDNSRecordRequest]) (*connect.Response[v1alpha1.GetDNSRecordResponse], error) {
	return c.getDNSRecord.CallUnary(ctx, req)
}

// RegisterAWSACMCertificate calls
// commonfate.factory.deployment.v1alpha1.DeploymentService.RegisterAWSACMCertificate.
func (c *deploymentServiceClient) RegisterAWSACMCertificate(ctx context.Context, req *connect.Request[v1alpha1.RegisterAWSACMCertificateRequest]) (*connect.Response[v1alpha1.RegisterAWSACMCertificateResponse], error) {
	return c.registerAWSACMCertificate.CallUnary(ctx, req)
}

// GetAWSACMCertificate calls
// commonfate.factory.deployment.v1alpha1.DeploymentService.GetAWSACMCertificate.
func (c *deploymentServiceClient) GetAWSACMCertificate(ctx context.Context, req *connect.Request[v1alpha1.GetAWSACMCertificateRequest]) (*connect.Response[v1alpha1.GetAWSACMCertificateResponse], error) {
	return c.getAWSACMCertificate.CallUnary(ctx, req)
}

// UpdateAWSACMCertificate calls
// commonfate.factory.deployment.v1alpha1.DeploymentService.UpdateAWSACMCertificate.
func (c *deploymentServiceClient) UpdateAWSACMCertificate(ctx context.Context, req *connect.Request[v1alpha1.UpdateAWSACMCertificateRequest]) (*connect.Response[v1alpha1.UpdateAWSACMCertificateResponse], error) {
	return c.updateAWSACMCertificate.CallUnary(ctx, req)
}

// DeregisterAWSACMCertificate calls
// commonfate.factory.deployment.v1alpha1.DeploymentService.DeregisterAWSACMCertificate.
func (c *deploymentServiceClient) DeregisterAWSACMCertificate(ctx context.Context, req *connect.Request[v1alpha1.DeregisterAWSACMCertificateRequest]) (*connect.Response[v1alpha1.DeregisterAWSACMCertificateResponse], error) {
	return c.deregisterAWSACMCertificate.CallUnary(ctx, req)
}

// UpdateDNSRecord calls commonfate.factory.deployment.v1alpha1.DeploymentService.UpdateDNSRecord.
func (c *deploymentServiceClient) UpdateDNSRecord(ctx context.Context, req *connect.Request[v1alpha1.UpdateDNSRecordRequest]) (*connect.Response[v1alpha1.UpdateDNSRecordResponse], error) {
	return c.updateDNSRecord.CallUnary(ctx, req)
}

// DeleteDNSRecord calls commonfate.factory.deployment.v1alpha1.DeploymentService.DeleteDNSRecord.
func (c *deploymentServiceClient) DeleteDNSRecord(ctx context.Context, req *connect.Request[v1alpha1.DeleteDNSRecordRequest]) (*connect.Response[v1alpha1.DeleteDNSRecordResponse], error) {
	return c.deleteDNSRecord.CallUnary(ctx, req)
}

// GetTerraformOutput calls
// commonfate.factory.deployment.v1alpha1.DeploymentService.GetTerraformOutput.
func (c *deploymentServiceClient) GetTerraformOutput(ctx context.Context, req *connect.Request[v1alpha1.GetTerraformOutputRequest]) (*connect.Response[v1alpha1.GetTerraformOutputResponse], error) {
	return c.getTerraformOutput.CallUnary(ctx, req)
}

// SetTerraformOutput calls
// commonfate.factory.deployment.v1alpha1.DeploymentService.SetTerraformOutput.
func (c *deploymentServiceClient) SetTerraformOutput(ctx context.Context, req *connect.Request[v1alpha1.SetTerraformOutputRequest]) (*connect.Response[v1alpha1.SetTerraformOutputResponse], error) {
	return c.setTerraformOutput.CallUnary(ctx, req)
}

// DeploymentServiceHandler is an implementation of the
// commonfate.factory.deployment.v1alpha1.DeploymentService service.
type DeploymentServiceHandler interface {
	// Get information about a deployment.
	GetDeployment(context.Context, *connect.Request[v1alpha1.GetDeploymentRequest]) (*connect.Response[v1alpha1.GetDeploymentResponse], error)
	// Create a DNS record associated with the deployment.
	// Used to set up a default `commonfate.app` domain for the deployment.
	CreateDNSRecord(context.Context, *connect.Request[v1alpha1.CreateDNSRecordRequest]) (*connect.Response[v1alpha1.CreateDNSRecordResponse], error)
	// Retrieves a DNS record associated with the deployment.
	GetDNSRecord(context.Context, *connect.Request[v1alpha1.GetDNSRecordRequest]) (*connect.Response[v1alpha1.GetDNSRecordResponse], error)
	// Registers an AWS ACM certificate to be associated with the deployment
	RegisterAWSACMCertificate(context.Context, *connect.Request[v1alpha1.RegisterAWSACMCertificateRequest]) (*connect.Response[v1alpha1.RegisterAWSACMCertificateResponse], error)
	// Retrieves an AWS ACM certificate to be associated with the deployment
	GetAWSACMCertificate(context.Context, *connect.Request[v1alpha1.GetAWSACMCertificateRequest]) (*connect.Response[v1alpha1.GetAWSACMCertificateResponse], error)
	// Updates an AWS ACM certificate to be associated with the deployment
	UpdateAWSACMCertificate(context.Context, *connect.Request[v1alpha1.UpdateAWSACMCertificateRequest]) (*connect.Response[v1alpha1.UpdateAWSACMCertificateResponse], error)
	// Deregisters an AWS ACM certificate to be associated with the deployment.
	// This method doesn't delete the actual ACM cert, it just removes the reference to it.
	DeregisterAWSACMCertificate(context.Context, *connect.Request[v1alpha1.DeregisterAWSACMCertificateRequest]) (*connect.Response[v1alpha1.DeregisterAWSACMCertificateResponse], error)
	// Updates a DNS record associated with the deployment.
	UpdateDNSRecord(context.Context, *connect.Request[v1alpha1.UpdateDNSRecordRequest]) (*connect.Response[v1alpha1.UpdateDNSRecordResponse], error)
	// Deletes a DNS record associated with the deployment.
	DeleteDNSRecord(context.Context, *connect.Request[v1alpha1.DeleteDNSRecordRequest]) (*connect.Response[v1alpha1.DeleteDNSRecordResponse], error)
	// Retrieves Terraform outputs for the deployment.
	GetTerraformOutput(context.Context, *connect.Request[v1alpha1.GetTerraformOutputRequest]) (*connect.Response[v1alpha1.GetTerraformOutputResponse], error)
	// Sets Terraform outputs for the deployment.
	SetTerraformOutput(context.Context, *connect.Request[v1alpha1.SetTerraformOutputRequest]) (*connect.Response[v1alpha1.SetTerraformOutputResponse], error)
}

// NewDeploymentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentServiceHandler(svc DeploymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentServiceGetDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceGetDeploymentProcedure,
		svc.GetDeployment,
		connect.WithSchema(deploymentServiceGetDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceCreateDNSRecordHandler := connect.NewUnaryHandler(
		DeploymentServiceCreateDNSRecordProcedure,
		svc.CreateDNSRecord,
		connect.WithSchema(deploymentServiceCreateDNSRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetDNSRecordHandler := connect.NewUnaryHandler(
		DeploymentServiceGetDNSRecordProcedure,
		svc.GetDNSRecord,
		connect.WithSchema(deploymentServiceGetDNSRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceRegisterAWSACMCertificateHandler := connect.NewUnaryHandler(
		DeploymentServiceRegisterAWSACMCertificateProcedure,
		svc.RegisterAWSACMCertificate,
		connect.WithSchema(deploymentServiceRegisterAWSACMCertificateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetAWSACMCertificateHandler := connect.NewUnaryHandler(
		DeploymentServiceGetAWSACMCertificateProcedure,
		svc.GetAWSACMCertificate,
		connect.WithSchema(deploymentServiceGetAWSACMCertificateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceUpdateAWSACMCertificateHandler := connect.NewUnaryHandler(
		DeploymentServiceUpdateAWSACMCertificateProcedure,
		svc.UpdateAWSACMCertificate,
		connect.WithSchema(deploymentServiceUpdateAWSACMCertificateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceDeregisterAWSACMCertificateHandler := connect.NewUnaryHandler(
		DeploymentServiceDeregisterAWSACMCertificateProcedure,
		svc.DeregisterAWSACMCertificate,
		connect.WithSchema(deploymentServiceDeregisterAWSACMCertificateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceUpdateDNSRecordHandler := connect.NewUnaryHandler(
		DeploymentServiceUpdateDNSRecordProcedure,
		svc.UpdateDNSRecord,
		connect.WithSchema(deploymentServiceUpdateDNSRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceDeleteDNSRecordHandler := connect.NewUnaryHandler(
		DeploymentServiceDeleteDNSRecordProcedure,
		svc.DeleteDNSRecord,
		connect.WithSchema(deploymentServiceDeleteDNSRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetTerraformOutputHandler := connect.NewUnaryHandler(
		DeploymentServiceGetTerraformOutputProcedure,
		svc.GetTerraformOutput,
		connect.WithSchema(deploymentServiceGetTerraformOutputMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceSetTerraformOutputHandler := connect.NewUnaryHandler(
		DeploymentServiceSetTerraformOutputProcedure,
		svc.SetTerraformOutput,
		connect.WithSchema(deploymentServiceSetTerraformOutputMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.factory.deployment.v1alpha1.DeploymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentServiceGetDeploymentProcedure:
			deploymentServiceGetDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceCreateDNSRecordProcedure:
			deploymentServiceCreateDNSRecordHandler.ServeHTTP(w, r)
		case DeploymentServiceGetDNSRecordProcedure:
			deploymentServiceGetDNSRecordHandler.ServeHTTP(w, r)
		case DeploymentServiceRegisterAWSACMCertificateProcedure:
			deploymentServiceRegisterAWSACMCertificateHandler.ServeHTTP(w, r)
		case DeploymentServiceGetAWSACMCertificateProcedure:
			deploymentServiceGetAWSACMCertificateHandler.ServeHTTP(w, r)
		case DeploymentServiceUpdateAWSACMCertificateProcedure:
			deploymentServiceUpdateAWSACMCertificateHandler.ServeHTTP(w, r)
		case DeploymentServiceDeregisterAWSACMCertificateProcedure:
			deploymentServiceDeregisterAWSACMCertificateHandler.ServeHTTP(w, r)
		case DeploymentServiceUpdateDNSRecordProcedure:
			deploymentServiceUpdateDNSRecordHandler.ServeHTTP(w, r)
		case DeploymentServiceDeleteDNSRecordProcedure:
			deploymentServiceDeleteDNSRecordHandler.ServeHTTP(w, r)
		case DeploymentServiceGetTerraformOutputProcedure:
			deploymentServiceGetTerraformOutputHandler.ServeHTTP(w, r)
		case DeploymentServiceSetTerraformOutputProcedure:
			deploymentServiceSetTerraformOutputHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentServiceHandler struct{}

func (UnimplementedDeploymentServiceHandler) GetDeployment(context.Context, *connect.Request[v1alpha1.GetDeploymentRequest]) (*connect.Response[v1alpha1.GetDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.GetDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) CreateDNSRecord(context.Context, *connect.Request[v1alpha1.CreateDNSRecordRequest]) (*connect.Response[v1alpha1.CreateDNSRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.CreateDNSRecord is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetDNSRecord(context.Context, *connect.Request[v1alpha1.GetDNSRecordRequest]) (*connect.Response[v1alpha1.GetDNSRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.GetDNSRecord is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) RegisterAWSACMCertificate(context.Context, *connect.Request[v1alpha1.RegisterAWSACMCertificateRequest]) (*connect.Response[v1alpha1.RegisterAWSACMCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.RegisterAWSACMCertificate is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetAWSACMCertificate(context.Context, *connect.Request[v1alpha1.GetAWSACMCertificateRequest]) (*connect.Response[v1alpha1.GetAWSACMCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.GetAWSACMCertificate is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) UpdateAWSACMCertificate(context.Context, *connect.Request[v1alpha1.UpdateAWSACMCertificateRequest]) (*connect.Response[v1alpha1.UpdateAWSACMCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.UpdateAWSACMCertificate is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) DeregisterAWSACMCertificate(context.Context, *connect.Request[v1alpha1.DeregisterAWSACMCertificateRequest]) (*connect.Response[v1alpha1.DeregisterAWSACMCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.DeregisterAWSACMCertificate is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) UpdateDNSRecord(context.Context, *connect.Request[v1alpha1.UpdateDNSRecordRequest]) (*connect.Response[v1alpha1.UpdateDNSRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.UpdateDNSRecord is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) DeleteDNSRecord(context.Context, *connect.Request[v1alpha1.DeleteDNSRecordRequest]) (*connect.Response[v1alpha1.DeleteDNSRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.DeleteDNSRecord is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetTerraformOutput(context.Context, *connect.Request[v1alpha1.GetTerraformOutputRequest]) (*connect.Response[v1alpha1.GetTerraformOutputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.GetTerraformOutput is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) SetTerraformOutput(context.Context, *connect.Request[v1alpha1.SetTerraformOutputRequest]) (*connect.Response[v1alpha1.SetTerraformOutputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.deployment.v1alpha1.DeploymentService.SetTerraformOutput is not implemented"))
}
