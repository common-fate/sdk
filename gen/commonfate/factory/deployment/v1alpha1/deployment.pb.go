// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: commonfate/factory/deployment/v1alpha1/deployment.proto

package deploymentv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DNSRecordType int32

const (
	DNSRecordType_DNS_RECORD_TYPE_UNSPECIFIED DNSRecordType = 0
	DNSRecordType_DNS_RECORD_TYPE_TXT         DNSRecordType = 1
	DNSRecordType_DNS_RECORD_TYPE_CNAME       DNSRecordType = 2
)

// Enum value maps for DNSRecordType.
var (
	DNSRecordType_name = map[int32]string{
		0: "DNS_RECORD_TYPE_UNSPECIFIED",
		1: "DNS_RECORD_TYPE_TXT",
		2: "DNS_RECORD_TYPE_CNAME",
	}
	DNSRecordType_value = map[string]int32{
		"DNS_RECORD_TYPE_UNSPECIFIED": 0,
		"DNS_RECORD_TYPE_TXT":         1,
		"DNS_RECORD_TYPE_CNAME":       2,
	}
)

func (x DNSRecordType) Enum() *DNSRecordType {
	p := new(DNSRecordType)
	*p = x
	return p
}

func (x DNSRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_enumTypes[0].Descriptor()
}

func (DNSRecordType) Type() protoreflect.EnumType {
	return &file_commonfate_factory_deployment_v1alpha1_deployment_proto_enumTypes[0]
}

func (x DNSRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSRecordType.Descriptor instead.
func (DNSRecordType) EnumDescriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{0}
}

type TerraformOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamlSsoAcsUrl               string `protobuf:"bytes,1,opt,name=saml_sso_acs_url,json=samlSsoAcsUrl,proto3" json:"saml_sso_acs_url,omitempty"`
	SamlSsoEntityId             string `protobuf:"bytes,2,opt,name=saml_sso_entity_id,json=samlSsoEntityId,proto3" json:"saml_sso_entity_id,omitempty"`
	CognitoUserPoolId           string `protobuf:"bytes,3,opt,name=cognito_user_pool_id,json=cognitoUserPoolId,proto3" json:"cognito_user_pool_id,omitempty"`
	DnsCnameRecordForAppDomain  string `protobuf:"bytes,4,opt,name=dns_cname_record_for_app_domain,json=dnsCnameRecordForAppDomain,proto3" json:"dns_cname_record_for_app_domain,omitempty"`
	DnsCnameRecordForAuthDomain string `protobuf:"bytes,5,opt,name=dns_cname_record_for_auth_domain,json=dnsCnameRecordForAuthDomain,proto3" json:"dns_cname_record_for_auth_domain,omitempty"`
	WebClientId                 string `protobuf:"bytes,6,opt,name=web_client_id,json=webClientId,proto3" json:"web_client_id,omitempty"`
	CliClientId                 string `protobuf:"bytes,7,opt,name=cli_client_id,json=cliClientId,proto3" json:"cli_client_id,omitempty"`
	TerraformClientId           string `protobuf:"bytes,8,opt,name=terraform_client_id,json=terraformClientId,proto3" json:"terraform_client_id,omitempty"`
	ReadOnlyClientId            string `protobuf:"bytes,9,opt,name=read_only_client_id,json=readOnlyClientId,proto3" json:"read_only_client_id,omitempty"`
	ProvisionerClientId         string `protobuf:"bytes,10,opt,name=provisioner_client_id,json=provisionerClientId,proto3" json:"provisioner_client_id,omitempty"`
	VpcId                       string `protobuf:"bytes,11,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
}

func (x *TerraformOutput) Reset() {
	*x = TerraformOutput{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerraformOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerraformOutput) ProtoMessage() {}

func (x *TerraformOutput) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerraformOutput.ProtoReflect.Descriptor instead.
func (*TerraformOutput) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{0}
}

func (x *TerraformOutput) GetSamlSsoAcsUrl() string {
	if x != nil {
		return x.SamlSsoAcsUrl
	}
	return ""
}

func (x *TerraformOutput) GetSamlSsoEntityId() string {
	if x != nil {
		return x.SamlSsoEntityId
	}
	return ""
}

func (x *TerraformOutput) GetCognitoUserPoolId() string {
	if x != nil {
		return x.CognitoUserPoolId
	}
	return ""
}

func (x *TerraformOutput) GetDnsCnameRecordForAppDomain() string {
	if x != nil {
		return x.DnsCnameRecordForAppDomain
	}
	return ""
}

func (x *TerraformOutput) GetDnsCnameRecordForAuthDomain() string {
	if x != nil {
		return x.DnsCnameRecordForAuthDomain
	}
	return ""
}

func (x *TerraformOutput) GetWebClientId() string {
	if x != nil {
		return x.WebClientId
	}
	return ""
}

func (x *TerraformOutput) GetCliClientId() string {
	if x != nil {
		return x.CliClientId
	}
	return ""
}

func (x *TerraformOutput) GetTerraformClientId() string {
	if x != nil {
		return x.TerraformClientId
	}
	return ""
}

func (x *TerraformOutput) GetReadOnlyClientId() string {
	if x != nil {
		return x.ReadOnlyClientId
	}
	return ""
}

func (x *TerraformOutput) GetProvisionerClientId() string {
	if x != nil {
		return x.ProvisionerClientId
	}
	return ""
}

func (x *TerraformOutput) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

type GetTerraformOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTerraformOutputRequest) Reset() {
	*x = GetTerraformOutputRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTerraformOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerraformOutputRequest) ProtoMessage() {}

func (x *GetTerraformOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerraformOutputRequest.ProtoReflect.Descriptor instead.
func (*GetTerraformOutputRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{1}
}

type GetTerraformOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *TerraformOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetTerraformOutputResponse) Reset() {
	*x = GetTerraformOutputResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTerraformOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerraformOutputResponse) ProtoMessage() {}

func (x *GetTerraformOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerraformOutputResponse.ProtoReflect.Descriptor instead.
func (*GetTerraformOutputResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{2}
}

func (x *GetTerraformOutputResponse) GetOutput() *TerraformOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

type SetTerraformOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *TerraformOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *SetTerraformOutputRequest) Reset() {
	*x = SetTerraformOutputRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTerraformOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTerraformOutputRequest) ProtoMessage() {}

func (x *SetTerraformOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTerraformOutputRequest.ProtoReflect.Descriptor instead.
func (*SetTerraformOutputRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{3}
}

func (x *SetTerraformOutputRequest) GetOutput() *TerraformOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

type SetTerraformOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTerraformOutputResponse) Reset() {
	*x = SetTerraformOutputResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTerraformOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTerraformOutputResponse) ProtoMessage() {}

func (x *SetTerraformOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTerraformOutputResponse.ProtoReflect.Descriptor instead.
func (*SetTerraformOutputResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{4}
}

type AWSACMCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Arn string `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	// The domain name for the certificate, for example: 'www.example.com'
	DomainName           string `protobuf:"bytes,3,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	ValidationCnameName  string `protobuf:"bytes,4,opt,name=validation_cname_name,json=validationCnameName,proto3" json:"validation_cname_name,omitempty"`
	ValidationCnameValue string `protobuf:"bytes,5,opt,name=validation_cname_value,json=validationCnameValue,proto3" json:"validation_cname_value,omitempty"`
	Status               string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AWSACMCertificate) Reset() {
	*x = AWSACMCertificate{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSACMCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSACMCertificate) ProtoMessage() {}

func (x *AWSACMCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSACMCertificate.ProtoReflect.Descriptor instead.
func (*AWSACMCertificate) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{5}
}

func (x *AWSACMCertificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSACMCertificate) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSACMCertificate) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *AWSACMCertificate) GetValidationCnameName() string {
	if x != nil {
		return x.ValidationCnameName
	}
	return ""
}

func (x *AWSACMCertificate) GetValidationCnameValue() string {
	if x != nil {
		return x.ValidationCnameValue
	}
	return ""
}

func (x *AWSACMCertificate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RegisterAWSACMCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// The domain name for the certificate, for example: 'www.example.com'
	DomainName           string `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	ValidationCnameName  string `protobuf:"bytes,3,opt,name=validation_cname_name,json=validationCnameName,proto3" json:"validation_cname_name,omitempty"`
	ValidationCnameValue string `protobuf:"bytes,4,opt,name=validation_cname_value,json=validationCnameValue,proto3" json:"validation_cname_value,omitempty"`
	Status               string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RegisterAWSACMCertificateRequest) Reset() {
	*x = RegisterAWSACMCertificateRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAWSACMCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAWSACMCertificateRequest) ProtoMessage() {}

func (x *RegisterAWSACMCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAWSACMCertificateRequest.ProtoReflect.Descriptor instead.
func (*RegisterAWSACMCertificateRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterAWSACMCertificateRequest) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *RegisterAWSACMCertificateRequest) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *RegisterAWSACMCertificateRequest) GetValidationCnameName() string {
	if x != nil {
		return x.ValidationCnameName
	}
	return ""
}

func (x *RegisterAWSACMCertificateRequest) GetValidationCnameValue() string {
	if x != nil {
		return x.ValidationCnameValue
	}
	return ""
}

func (x *RegisterAWSACMCertificateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RegisterAWSACMCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *AWSACMCertificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *RegisterAWSACMCertificateResponse) Reset() {
	*x = RegisterAWSACMCertificateResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAWSACMCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAWSACMCertificateResponse) ProtoMessage() {}

func (x *RegisterAWSACMCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAWSACMCertificateResponse.ProtoReflect.Descriptor instead.
func (*RegisterAWSACMCertificateResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterAWSACMCertificateResponse) GetCertificate() *AWSACMCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type GetAWSACMCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAWSACMCertificateRequest) Reset() {
	*x = GetAWSACMCertificateRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAWSACMCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAWSACMCertificateRequest) ProtoMessage() {}

func (x *GetAWSACMCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAWSACMCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetAWSACMCertificateRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{8}
}

func (x *GetAWSACMCertificateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAWSACMCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *AWSACMCertificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *GetAWSACMCertificateResponse) Reset() {
	*x = GetAWSACMCertificateResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAWSACMCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAWSACMCertificateResponse) ProtoMessage() {}

func (x *GetAWSACMCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAWSACMCertificateResponse.ProtoReflect.Descriptor instead.
func (*GetAWSACMCertificateResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{9}
}

func (x *GetAWSACMCertificateResponse) GetCertificate() *AWSACMCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type UpdateAWSACMCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *AWSACMCertificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *UpdateAWSACMCertificateRequest) Reset() {
	*x = UpdateAWSACMCertificateRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAWSACMCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAWSACMCertificateRequest) ProtoMessage() {}

func (x *UpdateAWSACMCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAWSACMCertificateRequest.ProtoReflect.Descriptor instead.
func (*UpdateAWSACMCertificateRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateAWSACMCertificateRequest) GetCertificate() *AWSACMCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type UpdateAWSACMCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate *AWSACMCertificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *UpdateAWSACMCertificateResponse) Reset() {
	*x = UpdateAWSACMCertificateResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAWSACMCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAWSACMCertificateResponse) ProtoMessage() {}

func (x *UpdateAWSACMCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAWSACMCertificateResponse.ProtoReflect.Descriptor instead.
func (*UpdateAWSACMCertificateResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateAWSACMCertificateResponse) GetCertificate() *AWSACMCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type DeregisterAWSACMCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeregisterAWSACMCertificateRequest) Reset() {
	*x = DeregisterAWSACMCertificateRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeregisterAWSACMCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterAWSACMCertificateRequest) ProtoMessage() {}

func (x *DeregisterAWSACMCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterAWSACMCertificateRequest.ProtoReflect.Descriptor instead.
func (*DeregisterAWSACMCertificateRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{12}
}

func (x *DeregisterAWSACMCertificateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeregisterAWSACMCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deregistered *AWSACMCertificate `protobuf:"bytes,1,opt,name=deregistered,proto3" json:"deregistered,omitempty"`
}

func (x *DeregisterAWSACMCertificateResponse) Reset() {
	*x = DeregisterAWSACMCertificateResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeregisterAWSACMCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterAWSACMCertificateResponse) ProtoMessage() {}

func (x *DeregisterAWSACMCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterAWSACMCertificateResponse.ProtoReflect.Descriptor instead.
func (*DeregisterAWSACMCertificateResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{13}
}

func (x *DeregisterAWSACMCertificateResponse) GetDeregistered() *AWSACMCertificate {
	if x != nil {
		return x.Deregistered
	}
	return nil
}

type DNSRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type   DNSRecordType `protobuf:"varint,3,opt,name=type,proto3,enum=commonfate.factory.deployment.v1alpha1.DNSRecordType" json:"type,omitempty"`
	Values []string      `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	// The base DNS name associated with the deployment.
	// e.g. 'commonfate.app'.
	DnsZoneName string `protobuf:"bytes,5,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
}

func (x *DNSRecord) Reset() {
	*x = DNSRecord{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSRecord) ProtoMessage() {}

func (x *DNSRecord) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSRecord.ProtoReflect.Descriptor instead.
func (*DNSRecord) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{14}
}

func (x *DNSRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DNSRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNSRecord) GetType() DNSRecordType {
	if x != nil {
		return x.Type
	}
	return DNSRecordType_DNS_RECORD_TYPE_UNSPECIFIED
}

func (x *DNSRecord) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *DNSRecord) GetDnsZoneName() string {
	if x != nil {
		return x.DnsZoneName
	}
	return ""
}

type CreateDNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   DNSRecordType `protobuf:"varint,2,opt,name=type,proto3,enum=commonfate.factory.deployment.v1alpha1.DNSRecordType" json:"type,omitempty"`
	Values []string      `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// The base DNS name associated with the deployment.
	// e.g. 'commonfate.app'.
	DnsZoneName string `protobuf:"bytes,4,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
}

func (x *CreateDNSRecordRequest) Reset() {
	*x = CreateDNSRecordRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSRecordRequest) ProtoMessage() {}

func (x *CreateDNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateDNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{15}
}

func (x *CreateDNSRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDNSRecordRequest) GetType() DNSRecordType {
	if x != nil {
		return x.Type
	}
	return DNSRecordType_DNS_RECORD_TYPE_UNSPECIFIED
}

func (x *CreateDNSRecordRequest) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *CreateDNSRecordRequest) GetDnsZoneName() string {
	if x != nil {
		return x.DnsZoneName
	}
	return ""
}

type CreateDNSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created *DNSRecord `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CreateDNSRecordResponse) Reset() {
	*x = CreateDNSRecordResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSRecordResponse) ProtoMessage() {}

func (x *CreateDNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSRecordResponse.ProtoReflect.Descriptor instead.
func (*CreateDNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{16}
}

func (x *CreateDNSRecordResponse) GetCreated() *DNSRecord {
	if x != nil {
		return x.Created
	}
	return nil
}

type UpdateDNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *UpdateDNSRecordRequest) Reset() {
	*x = UpdateDNSRecordRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDNSRecordRequest) ProtoMessage() {}

func (x *UpdateDNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDNSRecordRequest.ProtoReflect.Descriptor instead.
func (*UpdateDNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateDNSRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDNSRecordRequest) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type UpdateDNSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated *DNSRecord `protobuf:"bytes,1,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *UpdateDNSRecordResponse) Reset() {
	*x = UpdateDNSRecordResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDNSRecordResponse) ProtoMessage() {}

func (x *UpdateDNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDNSRecordResponse.ProtoReflect.Descriptor instead.
func (*UpdateDNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateDNSRecordResponse) GetUpdated() *DNSRecord {
	if x != nil {
		return x.Updated
	}
	return nil
}

type DeleteDNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDNSRecordRequest) Reset() {
	*x = DeleteDNSRecordRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDNSRecordRequest) ProtoMessage() {}

func (x *DeleteDNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDNSRecordRequest.ProtoReflect.Descriptor instead.
func (*DeleteDNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteDNSRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDNSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted *DNSRecord `protobuf:"bytes,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *DeleteDNSRecordResponse) Reset() {
	*x = DeleteDNSRecordResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDNSRecordResponse) ProtoMessage() {}

func (x *DeleteDNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDNSRecordResponse.ProtoReflect.Descriptor instead.
func (*DeleteDNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteDNSRecordResponse) GetDeleted() *DNSRecord {
	if x != nil {
		return x.Deleted
	}
	return nil
}

type GetDNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDNSRecordRequest) Reset() {
	*x = GetDNSRecordRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDNSRecordRequest) ProtoMessage() {}

func (x *GetDNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDNSRecordRequest.ProtoReflect.Descriptor instead.
func (*GetDNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{21}
}

func (x *GetDNSRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDNSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *DNSRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *GetDNSRecordResponse) Reset() {
	*x = GetDNSRecordResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDNSRecordResponse) ProtoMessage() {}

func (x *GetDNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDNSRecordResponse.ProtoReflect.Descriptor instead.
func (*GetDNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{22}
}

func (x *GetDNSRecordResponse) GetRecord() *DNSRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type GetDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDeploymentRequest) Reset() {
	*x = GetDeploymentRequest{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentRequest) ProtoMessage() {}

func (x *GetDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{23}
}

type GetDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *GetDeploymentResponse) Reset() {
	*x = GetDeploymentResponse{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentResponse) ProtoMessage() {}

func (x *GetDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{24}
}

func (x *GetDeploymentResponse) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The default DNS subdomain associated with the deployment.
	// Currently this is the deployment ID.
	DefaultSubdomain string `protobuf:"bytes,2,opt,name=default_subdomain,json=defaultSubdomain,proto3" json:"default_subdomain,omitempty"`
	// The base DNS name associated with the deployment.
	// e.g. 'commonfate.app'.
	DnsZoneName string `protobuf:"bytes,3,opt,name=dns_zone_name,json=dnsZoneName,proto3" json:"dns_zone_name,omitempty"`
	// The default app URL associated with the deployment.
	// Will be in the form 'console.abc123.commonfate.app'.
	// Does not include the URL scheme.
	DefaultAppDomain string `protobuf:"bytes,4,opt,name=default_app_domain,json=defaultAppDomain,proto3" json:"default_app_domain,omitempty"`
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP(), []int{25}
}

func (x *Deployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deployment) GetDefaultSubdomain() string {
	if x != nil {
		return x.DefaultSubdomain
	}
	return ""
}

func (x *Deployment) GetDnsZoneName() string {
	if x != nil {
		return x.DnsZoneName
	}
	return ""
}

func (x *Deployment) GetDefaultAppDomain() string {
	if x != nil {
		return x.DefaultAppDomain
	}
	return ""
}

var File_commonfate_factory_deployment_v1alpha1_deployment_proto protoreflect.FileDescriptor

var file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDesc = []byte{
	0x0a, 0x37, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x22, 0x96, 0x04, 0x0a, 0x0f, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x73, 0x73,
	0x6f, 0x5f, 0x61, 0x63, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x61, 0x6d, 0x6c, 0x53, 0x73, 0x6f, 0x41, 0x63, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2b,
	0x0a, 0x12, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x6c,
	0x53, 0x73, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1f,
	0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x6e, 0x73, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x45, 0x0a, 0x20, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x64, 0x6e, 0x73,
	0x43, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x65, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61,
	0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x6c, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x54, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x54, 0x65, 0x72, 0x72, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x11, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6e, 0x61, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd7, 0x01,
	0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x41,
	0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x7d, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x7e, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x22, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x23,
	0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x66, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x4e, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2a, 0x64, 0x0a, 0x0d, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x58, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x32, 0xfc, 0x0d, 0x0a, 0x11, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x94, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xb2, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x57,
	0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xac, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x46, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x57, 0x53, 0x41, 0x43,
	0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb8,
	0x01, 0x0a, 0x1b, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x57, 0x53,
	0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x57, 0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x57,
	0x53, 0x41, 0x43, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x94, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74,
	0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x41,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x72, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x54,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x41,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x72, 0x72, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xd2, 0x02, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x66, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x3b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x46, 0x44, 0xaa, 0x02, 0x26, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xca, 0x02, 0x26, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x32, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x5c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x29, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x66, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x3a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescOnce sync.Once
	file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescData = file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDesc
)

func file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescGZIP() []byte {
	file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescOnce.Do(func() {
		file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescData)
	})
	return file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDescData
}

var file_commonfate_factory_deployment_v1alpha1_deployment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_commonfate_factory_deployment_v1alpha1_deployment_proto_goTypes = []any{
	(DNSRecordType)(0),                          // 0: commonfate.factory.deployment.v1alpha1.DNSRecordType
	(*TerraformOutput)(nil),                     // 1: commonfate.factory.deployment.v1alpha1.TerraformOutput
	(*GetTerraformOutputRequest)(nil),           // 2: commonfate.factory.deployment.v1alpha1.GetTerraformOutputRequest
	(*GetTerraformOutputResponse)(nil),          // 3: commonfate.factory.deployment.v1alpha1.GetTerraformOutputResponse
	(*SetTerraformOutputRequest)(nil),           // 4: commonfate.factory.deployment.v1alpha1.SetTerraformOutputRequest
	(*SetTerraformOutputResponse)(nil),          // 5: commonfate.factory.deployment.v1alpha1.SetTerraformOutputResponse
	(*AWSACMCertificate)(nil),                   // 6: commonfate.factory.deployment.v1alpha1.AWSACMCertificate
	(*RegisterAWSACMCertificateRequest)(nil),    // 7: commonfate.factory.deployment.v1alpha1.RegisterAWSACMCertificateRequest
	(*RegisterAWSACMCertificateResponse)(nil),   // 8: commonfate.factory.deployment.v1alpha1.RegisterAWSACMCertificateResponse
	(*GetAWSACMCertificateRequest)(nil),         // 9: commonfate.factory.deployment.v1alpha1.GetAWSACMCertificateRequest
	(*GetAWSACMCertificateResponse)(nil),        // 10: commonfate.factory.deployment.v1alpha1.GetAWSACMCertificateResponse
	(*UpdateAWSACMCertificateRequest)(nil),      // 11: commonfate.factory.deployment.v1alpha1.UpdateAWSACMCertificateRequest
	(*UpdateAWSACMCertificateResponse)(nil),     // 12: commonfate.factory.deployment.v1alpha1.UpdateAWSACMCertificateResponse
	(*DeregisterAWSACMCertificateRequest)(nil),  // 13: commonfate.factory.deployment.v1alpha1.DeregisterAWSACMCertificateRequest
	(*DeregisterAWSACMCertificateResponse)(nil), // 14: commonfate.factory.deployment.v1alpha1.DeregisterAWSACMCertificateResponse
	(*DNSRecord)(nil),                           // 15: commonfate.factory.deployment.v1alpha1.DNSRecord
	(*CreateDNSRecordRequest)(nil),              // 16: commonfate.factory.deployment.v1alpha1.CreateDNSRecordRequest
	(*CreateDNSRecordResponse)(nil),             // 17: commonfate.factory.deployment.v1alpha1.CreateDNSRecordResponse
	(*UpdateDNSRecordRequest)(nil),              // 18: commonfate.factory.deployment.v1alpha1.UpdateDNSRecordRequest
	(*UpdateDNSRecordResponse)(nil),             // 19: commonfate.factory.deployment.v1alpha1.UpdateDNSRecordResponse
	(*DeleteDNSRecordRequest)(nil),              // 20: commonfate.factory.deployment.v1alpha1.DeleteDNSRecordRequest
	(*DeleteDNSRecordResponse)(nil),             // 21: commonfate.factory.deployment.v1alpha1.DeleteDNSRecordResponse
	(*GetDNSRecordRequest)(nil),                 // 22: commonfate.factory.deployment.v1alpha1.GetDNSRecordRequest
	(*GetDNSRecordResponse)(nil),                // 23: commonfate.factory.deployment.v1alpha1.GetDNSRecordResponse
	(*GetDeploymentRequest)(nil),                // 24: commonfate.factory.deployment.v1alpha1.GetDeploymentRequest
	(*GetDeploymentResponse)(nil),               // 25: commonfate.factory.deployment.v1alpha1.GetDeploymentResponse
	(*Deployment)(nil),                          // 26: commonfate.factory.deployment.v1alpha1.Deployment
}
var file_commonfate_factory_deployment_v1alpha1_deployment_proto_depIdxs = []int32{
	1,  // 0: commonfate.factory.deployment.v1alpha1.GetTerraformOutputResponse.output:type_name -> commonfate.factory.deployment.v1alpha1.TerraformOutput
	1,  // 1: commonfate.factory.deployment.v1alpha1.SetTerraformOutputRequest.output:type_name -> commonfate.factory.deployment.v1alpha1.TerraformOutput
	6,  // 2: commonfate.factory.deployment.v1alpha1.RegisterAWSACMCertificateResponse.certificate:type_name -> commonfate.factory.deployment.v1alpha1.AWSACMCertificate
	6,  // 3: commonfate.factory.deployment.v1alpha1.GetAWSACMCertificateResponse.certificate:type_name -> commonfate.factory.deployment.v1alpha1.AWSACMCertificate
	6,  // 4: commonfate.factory.deployment.v1alpha1.UpdateAWSACMCertificateRequest.certificate:type_name -> commonfate.factory.deployment.v1alpha1.AWSACMCertificate
	6,  // 5: commonfate.factory.deployment.v1alpha1.UpdateAWSACMCertificateResponse.certificate:type_name -> commonfate.factory.deployment.v1alpha1.AWSACMCertificate
	6,  // 6: commonfate.factory.deployment.v1alpha1.DeregisterAWSACMCertificateResponse.deregistered:type_name -> commonfate.factory.deployment.v1alpha1.AWSACMCertificate
	0,  // 7: commonfate.factory.deployment.v1alpha1.DNSRecord.type:type_name -> commonfate.factory.deployment.v1alpha1.DNSRecordType
	0,  // 8: commonfate.factory.deployment.v1alpha1.CreateDNSRecordRequest.type:type_name -> commonfate.factory.deployment.v1alpha1.DNSRecordType
	15, // 9: commonfate.factory.deployment.v1alpha1.CreateDNSRecordResponse.created:type_name -> commonfate.factory.deployment.v1alpha1.DNSRecord
	15, // 10: commonfate.factory.deployment.v1alpha1.UpdateDNSRecordResponse.updated:type_name -> commonfate.factory.deployment.v1alpha1.DNSRecord
	15, // 11: commonfate.factory.deployment.v1alpha1.DeleteDNSRecordResponse.deleted:type_name -> commonfate.factory.deployment.v1alpha1.DNSRecord
	15, // 12: commonfate.factory.deployment.v1alpha1.GetDNSRecordResponse.record:type_name -> commonfate.factory.deployment.v1alpha1.DNSRecord
	26, // 13: commonfate.factory.deployment.v1alpha1.GetDeploymentResponse.deployment:type_name -> commonfate.factory.deployment.v1alpha1.Deployment
	24, // 14: commonfate.factory.deployment.v1alpha1.DeploymentService.GetDeployment:input_type -> commonfate.factory.deployment.v1alpha1.GetDeploymentRequest
	16, // 15: commonfate.factory.deployment.v1alpha1.DeploymentService.CreateDNSRecord:input_type -> commonfate.factory.deployment.v1alpha1.CreateDNSRecordRequest
	22, // 16: commonfate.factory.deployment.v1alpha1.DeploymentService.GetDNSRecord:input_type -> commonfate.factory.deployment.v1alpha1.GetDNSRecordRequest
	7,  // 17: commonfate.factory.deployment.v1alpha1.DeploymentService.RegisterAWSACMCertificate:input_type -> commonfate.factory.deployment.v1alpha1.RegisterAWSACMCertificateRequest
	9,  // 18: commonfate.factory.deployment.v1alpha1.DeploymentService.GetAWSACMCertificate:input_type -> commonfate.factory.deployment.v1alpha1.GetAWSACMCertificateRequest
	11, // 19: commonfate.factory.deployment.v1alpha1.DeploymentService.UpdateAWSACMCertificate:input_type -> commonfate.factory.deployment.v1alpha1.UpdateAWSACMCertificateRequest
	13, // 20: commonfate.factory.deployment.v1alpha1.DeploymentService.DeregisterAWSACMCertificate:input_type -> commonfate.factory.deployment.v1alpha1.DeregisterAWSACMCertificateRequest
	18, // 21: commonfate.factory.deployment.v1alpha1.DeploymentService.UpdateDNSRecord:input_type -> commonfate.factory.deployment.v1alpha1.UpdateDNSRecordRequest
	20, // 22: commonfate.factory.deployment.v1alpha1.DeploymentService.DeleteDNSRecord:input_type -> commonfate.factory.deployment.v1alpha1.DeleteDNSRecordRequest
	2,  // 23: commonfate.factory.deployment.v1alpha1.DeploymentService.GetTerraformOutput:input_type -> commonfate.factory.deployment.v1alpha1.GetTerraformOutputRequest
	4,  // 24: commonfate.factory.deployment.v1alpha1.DeploymentService.SetTerraformOutput:input_type -> commonfate.factory.deployment.v1alpha1.SetTerraformOutputRequest
	25, // 25: commonfate.factory.deployment.v1alpha1.DeploymentService.GetDeployment:output_type -> commonfate.factory.deployment.v1alpha1.GetDeploymentResponse
	17, // 26: commonfate.factory.deployment.v1alpha1.DeploymentService.CreateDNSRecord:output_type -> commonfate.factory.deployment.v1alpha1.CreateDNSRecordResponse
	23, // 27: commonfate.factory.deployment.v1alpha1.DeploymentService.GetDNSRecord:output_type -> commonfate.factory.deployment.v1alpha1.GetDNSRecordResponse
	8,  // 28: commonfate.factory.deployment.v1alpha1.DeploymentService.RegisterAWSACMCertificate:output_type -> commonfate.factory.deployment.v1alpha1.RegisterAWSACMCertificateResponse
	10, // 29: commonfate.factory.deployment.v1alpha1.DeploymentService.GetAWSACMCertificate:output_type -> commonfate.factory.deployment.v1alpha1.GetAWSACMCertificateResponse
	12, // 30: commonfate.factory.deployment.v1alpha1.DeploymentService.UpdateAWSACMCertificate:output_type -> commonfate.factory.deployment.v1alpha1.UpdateAWSACMCertificateResponse
	14, // 31: commonfate.factory.deployment.v1alpha1.DeploymentService.DeregisterAWSACMCertificate:output_type -> commonfate.factory.deployment.v1alpha1.DeregisterAWSACMCertificateResponse
	19, // 32: commonfate.factory.deployment.v1alpha1.DeploymentService.UpdateDNSRecord:output_type -> commonfate.factory.deployment.v1alpha1.UpdateDNSRecordResponse
	21, // 33: commonfate.factory.deployment.v1alpha1.DeploymentService.DeleteDNSRecord:output_type -> commonfate.factory.deployment.v1alpha1.DeleteDNSRecordResponse
	3,  // 34: commonfate.factory.deployment.v1alpha1.DeploymentService.GetTerraformOutput:output_type -> commonfate.factory.deployment.v1alpha1.GetTerraformOutputResponse
	5,  // 35: commonfate.factory.deployment.v1alpha1.DeploymentService.SetTerraformOutput:output_type -> commonfate.factory.deployment.v1alpha1.SetTerraformOutputResponse
	25, // [25:36] is the sub-list for method output_type
	14, // [14:25] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_commonfate_factory_deployment_v1alpha1_deployment_proto_init() }
func file_commonfate_factory_deployment_v1alpha1_deployment_proto_init() {
	if File_commonfate_factory_deployment_v1alpha1_deployment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commonfate_factory_deployment_v1alpha1_deployment_proto_goTypes,
		DependencyIndexes: file_commonfate_factory_deployment_v1alpha1_deployment_proto_depIdxs,
		EnumInfos:         file_commonfate_factory_deployment_v1alpha1_deployment_proto_enumTypes,
		MessageInfos:      file_commonfate_factory_deployment_v1alpha1_deployment_proto_msgTypes,
	}.Build()
	File_commonfate_factory_deployment_v1alpha1_deployment_proto = out.File
	file_commonfate_factory_deployment_v1alpha1_deployment_proto_rawDesc = nil
	file_commonfate_factory_deployment_v1alpha1_deployment_proto_goTypes = nil
	file_commonfate_factory_deployment_v1alpha1_deployment_proto_depIdxs = nil
}
