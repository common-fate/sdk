// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/factory/deployment/v1alpha1/deployment.proto

package deploymentv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TerraformOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TerraformOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerraformOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TerraformOutputMultiError, or nil if none found.
func (m *TerraformOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *TerraformOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SamlSsoAcsUrl

	// no validation rules for SamlSsoEntityId

	// no validation rules for CognitoUserPoolId

	// no validation rules for DnsCnameRecordForAppDomain

	// no validation rules for DnsCnameRecordForAuthDomain

	// no validation rules for WebClientId

	// no validation rules for CliClientId

	// no validation rules for TerraformClientId

	// no validation rules for ReadOnlyClientId

	// no validation rules for ProvisionerClientId

	// no validation rules for VpcId

	if len(errors) > 0 {
		return TerraformOutputMultiError(errors)
	}

	return nil
}

// TerraformOutputMultiError is an error wrapping multiple validation errors
// returned by TerraformOutput.ValidateAll() if the designated constraints
// aren't met.
type TerraformOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerraformOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerraformOutputMultiError) AllErrors() []error { return m }

// TerraformOutputValidationError is the validation error returned by
// TerraformOutput.Validate if the designated constraints aren't met.
type TerraformOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerraformOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerraformOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerraformOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerraformOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerraformOutputValidationError) ErrorName() string { return "TerraformOutputValidationError" }

// Error satisfies the builtin error interface
func (e TerraformOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerraformOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerraformOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerraformOutputValidationError{}

// Validate checks the field values on GetTerraformOutputRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTerraformOutputRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTerraformOutputRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTerraformOutputRequestMultiError, or nil if none found.
func (m *GetTerraformOutputRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTerraformOutputRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTerraformOutputRequestMultiError(errors)
	}

	return nil
}

// GetTerraformOutputRequestMultiError is an error wrapping multiple validation
// errors returned by GetTerraformOutputRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTerraformOutputRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTerraformOutputRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTerraformOutputRequestMultiError) AllErrors() []error { return m }

// GetTerraformOutputRequestValidationError is the validation error returned by
// GetTerraformOutputRequest.Validate if the designated constraints aren't met.
type GetTerraformOutputRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTerraformOutputRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTerraformOutputRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTerraformOutputRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTerraformOutputRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTerraformOutputRequestValidationError) ErrorName() string {
	return "GetTerraformOutputRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTerraformOutputRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTerraformOutputRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTerraformOutputRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTerraformOutputRequestValidationError{}

// Validate checks the field values on GetTerraformOutputResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTerraformOutputResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTerraformOutputResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTerraformOutputResponseMultiError, or nil if none found.
func (m *GetTerraformOutputResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTerraformOutputResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOutput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTerraformOutputResponseValidationError{
					field:  "Output",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTerraformOutputResponseValidationError{
					field:  "Output",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTerraformOutputResponseValidationError{
				field:  "Output",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTerraformOutputResponseMultiError(errors)
	}

	return nil
}

// GetTerraformOutputResponseMultiError is an error wrapping multiple
// validation errors returned by GetTerraformOutputResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTerraformOutputResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTerraformOutputResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTerraformOutputResponseMultiError) AllErrors() []error { return m }

// GetTerraformOutputResponseValidationError is the validation error returned
// by GetTerraformOutputResponse.Validate if the designated constraints aren't met.
type GetTerraformOutputResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTerraformOutputResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTerraformOutputResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTerraformOutputResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTerraformOutputResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTerraformOutputResponseValidationError) ErrorName() string {
	return "GetTerraformOutputResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTerraformOutputResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTerraformOutputResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTerraformOutputResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTerraformOutputResponseValidationError{}

// Validate checks the field values on SetTerraformOutputRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTerraformOutputRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTerraformOutputRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTerraformOutputRequestMultiError, or nil if none found.
func (m *SetTerraformOutputRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTerraformOutputRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOutput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetTerraformOutputRequestValidationError{
					field:  "Output",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetTerraformOutputRequestValidationError{
					field:  "Output",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetTerraformOutputRequestValidationError{
				field:  "Output",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetTerraformOutputRequestMultiError(errors)
	}

	return nil
}

// SetTerraformOutputRequestMultiError is an error wrapping multiple validation
// errors returned by SetTerraformOutputRequest.ValidateAll() if the
// designated constraints aren't met.
type SetTerraformOutputRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTerraformOutputRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTerraformOutputRequestMultiError) AllErrors() []error { return m }

// SetTerraformOutputRequestValidationError is the validation error returned by
// SetTerraformOutputRequest.Validate if the designated constraints aren't met.
type SetTerraformOutputRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTerraformOutputRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTerraformOutputRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTerraformOutputRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTerraformOutputRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTerraformOutputRequestValidationError) ErrorName() string {
	return "SetTerraformOutputRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetTerraformOutputRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTerraformOutputRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTerraformOutputRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTerraformOutputRequestValidationError{}

// Validate checks the field values on SetTerraformOutputResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTerraformOutputResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTerraformOutputResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTerraformOutputResponseMultiError, or nil if none found.
func (m *SetTerraformOutputResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTerraformOutputResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetTerraformOutputResponseMultiError(errors)
	}

	return nil
}

// SetTerraformOutputResponseMultiError is an error wrapping multiple
// validation errors returned by SetTerraformOutputResponse.ValidateAll() if
// the designated constraints aren't met.
type SetTerraformOutputResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTerraformOutputResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTerraformOutputResponseMultiError) AllErrors() []error { return m }

// SetTerraformOutputResponseValidationError is the validation error returned
// by SetTerraformOutputResponse.Validate if the designated constraints aren't met.
type SetTerraformOutputResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTerraformOutputResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTerraformOutputResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTerraformOutputResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTerraformOutputResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTerraformOutputResponseValidationError) ErrorName() string {
	return "SetTerraformOutputResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetTerraformOutputResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTerraformOutputResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTerraformOutputResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTerraformOutputResponseValidationError{}

// Validate checks the field values on AWSACMCertificate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AWSACMCertificate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSACMCertificate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AWSACMCertificateMultiError, or nil if none found.
func (m *AWSACMCertificate) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSACMCertificate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Arn

	// no validation rules for ValidationCnameName

	// no validation rules for ValidationCnameValue

	if len(errors) > 0 {
		return AWSACMCertificateMultiError(errors)
	}

	return nil
}

// AWSACMCertificateMultiError is an error wrapping multiple validation errors
// returned by AWSACMCertificate.ValidateAll() if the designated constraints
// aren't met.
type AWSACMCertificateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSACMCertificateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSACMCertificateMultiError) AllErrors() []error { return m }

// AWSACMCertificateValidationError is the validation error returned by
// AWSACMCertificate.Validate if the designated constraints aren't met.
type AWSACMCertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSACMCertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSACMCertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSACMCertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSACMCertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSACMCertificateValidationError) ErrorName() string {
	return "AWSACMCertificateValidationError"
}

// Error satisfies the builtin error interface
func (e AWSACMCertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSACMCertificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSACMCertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSACMCertificateValidationError{}

// Validate checks the field values on RegisterAWSACMCertificateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RegisterAWSACMCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAWSACMCertificateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterAWSACMCertificateRequestMultiError, or nil if none found.
func (m *RegisterAWSACMCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAWSACMCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Arn

	// no validation rules for ValidationCnameName

	// no validation rules for ValidationCnameValue

	if len(errors) > 0 {
		return RegisterAWSACMCertificateRequestMultiError(errors)
	}

	return nil
}

// RegisterAWSACMCertificateRequestMultiError is an error wrapping multiple
// validation errors returned by
// RegisterAWSACMCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterAWSACMCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAWSACMCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAWSACMCertificateRequestMultiError) AllErrors() []error { return m }

// RegisterAWSACMCertificateRequestValidationError is the validation error
// returned by RegisterAWSACMCertificateRequest.Validate if the designated
// constraints aren't met.
type RegisterAWSACMCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAWSACMCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAWSACMCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAWSACMCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAWSACMCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAWSACMCertificateRequestValidationError) ErrorName() string {
	return "RegisterAWSACMCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAWSACMCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAWSACMCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAWSACMCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAWSACMCertificateRequestValidationError{}

// Validate checks the field values on RegisterAWSACMCertificateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RegisterAWSACMCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAWSACMCertificateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RegisterAWSACMCertificateResponseMultiError, or nil if none found.
func (m *RegisterAWSACMCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAWSACMCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterAWSACMCertificateResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterAWSACMCertificateResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterAWSACMCertificateResponseValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterAWSACMCertificateResponseMultiError(errors)
	}

	return nil
}

// RegisterAWSACMCertificateResponseMultiError is an error wrapping multiple
// validation errors returned by
// RegisterAWSACMCertificateResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterAWSACMCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAWSACMCertificateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAWSACMCertificateResponseMultiError) AllErrors() []error { return m }

// RegisterAWSACMCertificateResponseValidationError is the validation error
// returned by RegisterAWSACMCertificateResponse.Validate if the designated
// constraints aren't met.
type RegisterAWSACMCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAWSACMCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAWSACMCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAWSACMCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAWSACMCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAWSACMCertificateResponseValidationError) ErrorName() string {
	return "RegisterAWSACMCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAWSACMCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAWSACMCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAWSACMCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAWSACMCertificateResponseValidationError{}

// Validate checks the field values on GetAWSACMCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAWSACMCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAWSACMCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAWSACMCertificateRequestMultiError, or nil if none found.
func (m *GetAWSACMCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAWSACMCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAWSACMCertificateRequestMultiError(errors)
	}

	return nil
}

// GetAWSACMCertificateRequestMultiError is an error wrapping multiple
// validation errors returned by GetAWSACMCertificateRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAWSACMCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAWSACMCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAWSACMCertificateRequestMultiError) AllErrors() []error { return m }

// GetAWSACMCertificateRequestValidationError is the validation error returned
// by GetAWSACMCertificateRequest.Validate if the designated constraints
// aren't met.
type GetAWSACMCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAWSACMCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAWSACMCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAWSACMCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAWSACMCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAWSACMCertificateRequestValidationError) ErrorName() string {
	return "GetAWSACMCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAWSACMCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAWSACMCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAWSACMCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAWSACMCertificateRequestValidationError{}

// Validate checks the field values on GetAWSACMCertificateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAWSACMCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAWSACMCertificateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAWSACMCertificateResponseMultiError, or nil if none found.
func (m *GetAWSACMCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAWSACMCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAWSACMCertificateResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAWSACMCertificateResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAWSACMCertificateResponseValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAWSACMCertificateResponseMultiError(errors)
	}

	return nil
}

// GetAWSACMCertificateResponseMultiError is an error wrapping multiple
// validation errors returned by GetAWSACMCertificateResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAWSACMCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAWSACMCertificateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAWSACMCertificateResponseMultiError) AllErrors() []error { return m }

// GetAWSACMCertificateResponseValidationError is the validation error returned
// by GetAWSACMCertificateResponse.Validate if the designated constraints
// aren't met.
type GetAWSACMCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAWSACMCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAWSACMCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAWSACMCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAWSACMCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAWSACMCertificateResponseValidationError) ErrorName() string {
	return "GetAWSACMCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAWSACMCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAWSACMCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAWSACMCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAWSACMCertificateResponseValidationError{}

// Validate checks the field values on UpdateAWSACMCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAWSACMCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAWSACMCertificateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAWSACMCertificateRequestMultiError, or nil if none found.
func (m *UpdateAWSACMCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAWSACMCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAWSACMCertificateRequestValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAWSACMCertificateRequestValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAWSACMCertificateRequestValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAWSACMCertificateRequestMultiError(errors)
	}

	return nil
}

// UpdateAWSACMCertificateRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAWSACMCertificateRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAWSACMCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAWSACMCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAWSACMCertificateRequestMultiError) AllErrors() []error { return m }

// UpdateAWSACMCertificateRequestValidationError is the validation error
// returned by UpdateAWSACMCertificateRequest.Validate if the designated
// constraints aren't met.
type UpdateAWSACMCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAWSACMCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAWSACMCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAWSACMCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAWSACMCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAWSACMCertificateRequestValidationError) ErrorName() string {
	return "UpdateAWSACMCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAWSACMCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAWSACMCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAWSACMCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAWSACMCertificateRequestValidationError{}

// Validate checks the field values on UpdateAWSACMCertificateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAWSACMCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAWSACMCertificateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAWSACMCertificateResponseMultiError, or nil if none found.
func (m *UpdateAWSACMCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAWSACMCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAWSACMCertificateResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAWSACMCertificateResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAWSACMCertificateResponseValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAWSACMCertificateResponseMultiError(errors)
	}

	return nil
}

// UpdateAWSACMCertificateResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAWSACMCertificateResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateAWSACMCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAWSACMCertificateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAWSACMCertificateResponseMultiError) AllErrors() []error { return m }

// UpdateAWSACMCertificateResponseValidationError is the validation error
// returned by UpdateAWSACMCertificateResponse.Validate if the designated
// constraints aren't met.
type UpdateAWSACMCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAWSACMCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAWSACMCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAWSACMCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAWSACMCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAWSACMCertificateResponseValidationError) ErrorName() string {
	return "UpdateAWSACMCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAWSACMCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAWSACMCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAWSACMCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAWSACMCertificateResponseValidationError{}

// Validate checks the field values on DeregisterAWSACMCertificateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeregisterAWSACMCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeregisterAWSACMCertificateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeregisterAWSACMCertificateRequestMultiError, or nil if none found.
func (m *DeregisterAWSACMCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeregisterAWSACMCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeregisterAWSACMCertificateRequestMultiError(errors)
	}

	return nil
}

// DeregisterAWSACMCertificateRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeregisterAWSACMCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeregisterAWSACMCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeregisterAWSACMCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeregisterAWSACMCertificateRequestMultiError) AllErrors() []error { return m }

// DeregisterAWSACMCertificateRequestValidationError is the validation error
// returned by DeregisterAWSACMCertificateRequest.Validate if the designated
// constraints aren't met.
type DeregisterAWSACMCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeregisterAWSACMCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeregisterAWSACMCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeregisterAWSACMCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeregisterAWSACMCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeregisterAWSACMCertificateRequestValidationError) ErrorName() string {
	return "DeregisterAWSACMCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeregisterAWSACMCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeregisterAWSACMCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeregisterAWSACMCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeregisterAWSACMCertificateRequestValidationError{}

// Validate checks the field values on DeregisterAWSACMCertificateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeregisterAWSACMCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeregisterAWSACMCertificateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeregisterAWSACMCertificateResponseMultiError, or nil if none found.
func (m *DeregisterAWSACMCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeregisterAWSACMCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeregistered()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeregisterAWSACMCertificateResponseValidationError{
					field:  "Deregistered",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeregisterAWSACMCertificateResponseValidationError{
					field:  "Deregistered",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeregistered()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeregisterAWSACMCertificateResponseValidationError{
				field:  "Deregistered",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeregisterAWSACMCertificateResponseMultiError(errors)
	}

	return nil
}

// DeregisterAWSACMCertificateResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeregisterAWSACMCertificateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeregisterAWSACMCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeregisterAWSACMCertificateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeregisterAWSACMCertificateResponseMultiError) AllErrors() []error { return m }

// DeregisterAWSACMCertificateResponseValidationError is the validation error
// returned by DeregisterAWSACMCertificateResponse.Validate if the designated
// constraints aren't met.
type DeregisterAWSACMCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeregisterAWSACMCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeregisterAWSACMCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeregisterAWSACMCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeregisterAWSACMCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeregisterAWSACMCertificateResponseValidationError) ErrorName() string {
	return "DeregisterAWSACMCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeregisterAWSACMCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeregisterAWSACMCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeregisterAWSACMCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeregisterAWSACMCertificateResponseValidationError{}

// Validate checks the field values on DNSRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DNSRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DNSRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DNSRecordMultiError, or nil
// if none found.
func (m *DNSRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *DNSRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for DnsZoneName

	if len(errors) > 0 {
		return DNSRecordMultiError(errors)
	}

	return nil
}

// DNSRecordMultiError is an error wrapping multiple validation errors returned
// by DNSRecord.ValidateAll() if the designated constraints aren't met.
type DNSRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DNSRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DNSRecordMultiError) AllErrors() []error { return m }

// DNSRecordValidationError is the validation error returned by
// DNSRecord.Validate if the designated constraints aren't met.
type DNSRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DNSRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DNSRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DNSRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DNSRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DNSRecordValidationError) ErrorName() string { return "DNSRecordValidationError" }

// Error satisfies the builtin error interface
func (e DNSRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDNSRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DNSRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DNSRecordValidationError{}

// Validate checks the field values on CreateDNSRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDNSRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDNSRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDNSRecordRequestMultiError, or nil if none found.
func (m *CreateDNSRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDNSRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for DnsZoneName

	if len(errors) > 0 {
		return CreateDNSRecordRequestMultiError(errors)
	}

	return nil
}

// CreateDNSRecordRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDNSRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDNSRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDNSRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDNSRecordRequestMultiError) AllErrors() []error { return m }

// CreateDNSRecordRequestValidationError is the validation error returned by
// CreateDNSRecordRequest.Validate if the designated constraints aren't met.
type CreateDNSRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDNSRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDNSRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDNSRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDNSRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDNSRecordRequestValidationError) ErrorName() string {
	return "CreateDNSRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDNSRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDNSRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDNSRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDNSRecordRequestValidationError{}

// Validate checks the field values on CreateDNSRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDNSRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDNSRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDNSRecordResponseMultiError, or nil if none found.
func (m *CreateDNSRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDNSRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDNSRecordResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDNSRecordResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDNSRecordResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDNSRecordResponseMultiError(errors)
	}

	return nil
}

// CreateDNSRecordResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDNSRecordResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDNSRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDNSRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDNSRecordResponseMultiError) AllErrors() []error { return m }

// CreateDNSRecordResponseValidationError is the validation error returned by
// CreateDNSRecordResponse.Validate if the designated constraints aren't met.
type CreateDNSRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDNSRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDNSRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDNSRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDNSRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDNSRecordResponseValidationError) ErrorName() string {
	return "CreateDNSRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDNSRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDNSRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDNSRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDNSRecordResponseValidationError{}

// Validate checks the field values on UpdateDNSRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDNSRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDNSRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDNSRecordRequestMultiError, or nil if none found.
func (m *UpdateDNSRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDNSRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateDNSRecordRequestMultiError(errors)
	}

	return nil
}

// UpdateDNSRecordRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDNSRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDNSRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDNSRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDNSRecordRequestMultiError) AllErrors() []error { return m }

// UpdateDNSRecordRequestValidationError is the validation error returned by
// UpdateDNSRecordRequest.Validate if the designated constraints aren't met.
type UpdateDNSRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDNSRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDNSRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDNSRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDNSRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDNSRecordRequestValidationError) ErrorName() string {
	return "UpdateDNSRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDNSRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDNSRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDNSRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDNSRecordRequestValidationError{}

// Validate checks the field values on UpdateDNSRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDNSRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDNSRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDNSRecordResponseMultiError, or nil if none found.
func (m *UpdateDNSRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDNSRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDNSRecordResponseValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDNSRecordResponseValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDNSRecordResponseValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDNSRecordResponseMultiError(errors)
	}

	return nil
}

// UpdateDNSRecordResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDNSRecordResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDNSRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDNSRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDNSRecordResponseMultiError) AllErrors() []error { return m }

// UpdateDNSRecordResponseValidationError is the validation error returned by
// UpdateDNSRecordResponse.Validate if the designated constraints aren't met.
type UpdateDNSRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDNSRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDNSRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDNSRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDNSRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDNSRecordResponseValidationError) ErrorName() string {
	return "UpdateDNSRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDNSRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDNSRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDNSRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDNSRecordResponseValidationError{}

// Validate checks the field values on DeleteDNSRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDNSRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDNSRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDNSRecordRequestMultiError, or nil if none found.
func (m *DeleteDNSRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDNSRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDNSRecordRequestMultiError(errors)
	}

	return nil
}

// DeleteDNSRecordRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDNSRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDNSRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDNSRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDNSRecordRequestMultiError) AllErrors() []error { return m }

// DeleteDNSRecordRequestValidationError is the validation error returned by
// DeleteDNSRecordRequest.Validate if the designated constraints aren't met.
type DeleteDNSRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDNSRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDNSRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDNSRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDNSRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDNSRecordRequestValidationError) ErrorName() string {
	return "DeleteDNSRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDNSRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDNSRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDNSRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDNSRecordRequestValidationError{}

// Validate checks the field values on DeleteDNSRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDNSRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDNSRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDNSRecordResponseMultiError, or nil if none found.
func (m *DeleteDNSRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDNSRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeleted()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteDNSRecordResponseValidationError{
					field:  "Deleted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteDNSRecordResponseValidationError{
					field:  "Deleted",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeleted()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteDNSRecordResponseValidationError{
				field:  "Deleted",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteDNSRecordResponseMultiError(errors)
	}

	return nil
}

// DeleteDNSRecordResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDNSRecordResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDNSRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDNSRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDNSRecordResponseMultiError) AllErrors() []error { return m }

// DeleteDNSRecordResponseValidationError is the validation error returned by
// DeleteDNSRecordResponse.Validate if the designated constraints aren't met.
type DeleteDNSRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDNSRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDNSRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDNSRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDNSRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDNSRecordResponseValidationError) ErrorName() string {
	return "DeleteDNSRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDNSRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDNSRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDNSRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDNSRecordResponseValidationError{}

// Validate checks the field values on GetDNSRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDNSRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDNSRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDNSRecordRequestMultiError, or nil if none found.
func (m *GetDNSRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDNSRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDNSRecordRequestMultiError(errors)
	}

	return nil
}

// GetDNSRecordRequestMultiError is an error wrapping multiple validation
// errors returned by GetDNSRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDNSRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDNSRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDNSRecordRequestMultiError) AllErrors() []error { return m }

// GetDNSRecordRequestValidationError is the validation error returned by
// GetDNSRecordRequest.Validate if the designated constraints aren't met.
type GetDNSRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDNSRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDNSRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDNSRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDNSRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDNSRecordRequestValidationError) ErrorName() string {
	return "GetDNSRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDNSRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDNSRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDNSRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDNSRecordRequestValidationError{}

// Validate checks the field values on GetDNSRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDNSRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDNSRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDNSRecordResponseMultiError, or nil if none found.
func (m *GetDNSRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDNSRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDNSRecordResponseValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDNSRecordResponseValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDNSRecordResponseValidationError{
				field:  "Record",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDNSRecordResponseMultiError(errors)
	}

	return nil
}

// GetDNSRecordResponseMultiError is an error wrapping multiple validation
// errors returned by GetDNSRecordResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDNSRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDNSRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDNSRecordResponseMultiError) AllErrors() []error { return m }

// GetDNSRecordResponseValidationError is the validation error returned by
// GetDNSRecordResponse.Validate if the designated constraints aren't met.
type GetDNSRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDNSRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDNSRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDNSRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDNSRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDNSRecordResponseValidationError) ErrorName() string {
	return "GetDNSRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDNSRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDNSRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDNSRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDNSRecordResponseValidationError{}

// Validate checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentRequestMultiError, or nil if none found.
func (m *GetDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDeploymentRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentRequestMultiError) AllErrors() []error { return m }

// GetDeploymentRequestValidationError is the validation error returned by
// GetDeploymentRequest.Validate if the designated constraints aren't met.
type GetDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentRequestValidationError) ErrorName() string {
	return "GetDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentRequestValidationError{}

// Validate checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentResponseMultiError, or nil if none found.
func (m *GetDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeploymentResponseValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeploymentResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentResponseMultiError) AllErrors() []error { return m }

// GetDeploymentResponseValidationError is the validation error returned by
// GetDeploymentResponse.Validate if the designated constraints aren't met.
type GetDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentResponseValidationError) ErrorName() string {
	return "GetDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentResponseValidationError{}

// Validate checks the field values on Deployment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Deployment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Deployment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeploymentMultiError, or
// nil if none found.
func (m *Deployment) ValidateAll() error {
	return m.validate(true)
}

func (m *Deployment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DefaultSubdomain

	// no validation rules for DnsZoneName

	// no validation rules for DefaultAppDomain

	if len(errors) > 0 {
		return DeploymentMultiError(errors)
	}

	return nil
}

// DeploymentMultiError is an error wrapping multiple validation errors
// returned by Deployment.ValidateAll() if the designated constraints aren't met.
type DeploymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentMultiError) AllErrors() []error { return m }

// DeploymentValidationError is the validation error returned by
// Deployment.Validate if the designated constraints aren't met.
type DeploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentValidationError) ErrorName() string { return "DeploymentValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentValidationError{}
