// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commonfate/factory/cloudsupport/v1alpha1/support.proto

package cloudsupportv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/common-fate/sdk/gen/commonfate/factory/cloudsupport/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CloudSupportServiceName is the fully-qualified name of the CloudSupportService service.
	CloudSupportServiceName = "commonfate.factory.cloudsupport.v1alpha1.CloudSupportService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CloudSupportServiceContactProcedure is the fully-qualified name of the CloudSupportService's
	// Contact RPC.
	CloudSupportServiceContactProcedure = "/commonfate.factory.cloudsupport.v1alpha1.CloudSupportService/Contact"
	// CloudSupportServiceGetAttachmentUploadURLProcedure is the fully-qualified name of the
	// CloudSupportService's GetAttachmentUploadURL RPC.
	CloudSupportServiceGetAttachmentUploadURLProcedure = "/commonfate.factory.cloudsupport.v1alpha1.CloudSupportService/GetAttachmentUploadURL"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cloudSupportServiceServiceDescriptor                      = v1alpha1.File_commonfate_factory_cloudsupport_v1alpha1_support_proto.Services().ByName("CloudSupportService")
	cloudSupportServiceContactMethodDescriptor                = cloudSupportServiceServiceDescriptor.Methods().ByName("Contact")
	cloudSupportServiceGetAttachmentUploadURLMethodDescriptor = cloudSupportServiceServiceDescriptor.Methods().ByName("GetAttachmentUploadURL")
)

// CloudSupportServiceClient is a client for the
// commonfate.factory.cloudsupport.v1alpha1.CloudSupportService service.
type CloudSupportServiceClient interface {
	// Contact Common Fate support.
	Contact(context.Context, *connect.Request[v1alpha1.ContactRequest]) (*connect.Response[v1alpha1.ContactResponse], error)
	GetAttachmentUploadURL(context.Context, *connect.Request[v1alpha1.GetAttachmentUploadURLRequest]) (*connect.Response[v1alpha1.GetAttachmentUploadURLResponse], error)
}

// NewCloudSupportServiceClient constructs a client for the
// commonfate.factory.cloudsupport.v1alpha1.CloudSupportService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCloudSupportServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CloudSupportServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cloudSupportServiceClient{
		contact: connect.NewClient[v1alpha1.ContactRequest, v1alpha1.ContactResponse](
			httpClient,
			baseURL+CloudSupportServiceContactProcedure,
			connect.WithSchema(cloudSupportServiceContactMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAttachmentUploadURL: connect.NewClient[v1alpha1.GetAttachmentUploadURLRequest, v1alpha1.GetAttachmentUploadURLResponse](
			httpClient,
			baseURL+CloudSupportServiceGetAttachmentUploadURLProcedure,
			connect.WithSchema(cloudSupportServiceGetAttachmentUploadURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cloudSupportServiceClient implements CloudSupportServiceClient.
type cloudSupportServiceClient struct {
	contact                *connect.Client[v1alpha1.ContactRequest, v1alpha1.ContactResponse]
	getAttachmentUploadURL *connect.Client[v1alpha1.GetAttachmentUploadURLRequest, v1alpha1.GetAttachmentUploadURLResponse]
}

// Contact calls commonfate.factory.cloudsupport.v1alpha1.CloudSupportService.Contact.
func (c *cloudSupportServiceClient) Contact(ctx context.Context, req *connect.Request[v1alpha1.ContactRequest]) (*connect.Response[v1alpha1.ContactResponse], error) {
	return c.contact.CallUnary(ctx, req)
}

// GetAttachmentUploadURL calls
// commonfate.factory.cloudsupport.v1alpha1.CloudSupportService.GetAttachmentUploadURL.
func (c *cloudSupportServiceClient) GetAttachmentUploadURL(ctx context.Context, req *connect.Request[v1alpha1.GetAttachmentUploadURLRequest]) (*connect.Response[v1alpha1.GetAttachmentUploadURLResponse], error) {
	return c.getAttachmentUploadURL.CallUnary(ctx, req)
}

// CloudSupportServiceHandler is an implementation of the
// commonfate.factory.cloudsupport.v1alpha1.CloudSupportService service.
type CloudSupportServiceHandler interface {
	// Contact Common Fate support.
	Contact(context.Context, *connect.Request[v1alpha1.ContactRequest]) (*connect.Response[v1alpha1.ContactResponse], error)
	GetAttachmentUploadURL(context.Context, *connect.Request[v1alpha1.GetAttachmentUploadURLRequest]) (*connect.Response[v1alpha1.GetAttachmentUploadURLResponse], error)
}

// NewCloudSupportServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCloudSupportServiceHandler(svc CloudSupportServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cloudSupportServiceContactHandler := connect.NewUnaryHandler(
		CloudSupportServiceContactProcedure,
		svc.Contact,
		connect.WithSchema(cloudSupportServiceContactMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cloudSupportServiceGetAttachmentUploadURLHandler := connect.NewUnaryHandler(
		CloudSupportServiceGetAttachmentUploadURLProcedure,
		svc.GetAttachmentUploadURL,
		connect.WithSchema(cloudSupportServiceGetAttachmentUploadURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/commonfate.factory.cloudsupport.v1alpha1.CloudSupportService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CloudSupportServiceContactProcedure:
			cloudSupportServiceContactHandler.ServeHTTP(w, r)
		case CloudSupportServiceGetAttachmentUploadURLProcedure:
			cloudSupportServiceGetAttachmentUploadURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCloudSupportServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCloudSupportServiceHandler struct{}

func (UnimplementedCloudSupportServiceHandler) Contact(context.Context, *connect.Request[v1alpha1.ContactRequest]) (*connect.Response[v1alpha1.ContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.cloudsupport.v1alpha1.CloudSupportService.Contact is not implemented"))
}

func (UnimplementedCloudSupportServiceHandler) GetAttachmentUploadURL(context.Context, *connect.Request[v1alpha1.GetAttachmentUploadURLRequest]) (*connect.Response[v1alpha1.GetAttachmentUploadURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("commonfate.factory.cloudsupport.v1alpha1.CloudSupportService.GetAttachmentUploadURL is not implemented"))
}
