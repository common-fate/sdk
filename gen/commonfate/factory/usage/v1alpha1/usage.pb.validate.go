// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: commonfate/factory/usage/v1alpha1/usage.proto

package usagev1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReportUsageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportUsageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportUsageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportUsageRequestMultiError, or nil if none found.
func (m *ReportUsageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportUsageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIntegrations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportUsageRequestValidationError{
						field:  fmt.Sprintf("Integrations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportUsageRequestValidationError{
						field:  fmt.Sprintf("Integrations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportUsageRequestValidationError{
					field:  fmt.Sprintf("Integrations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportUsageRequestValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportUsageRequestValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportUsageRequestValidationError{
				field:  "Users",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccessRequests()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportUsageRequestValidationError{
					field:  "AccessRequests",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportUsageRequestValidationError{
					field:  "AccessRequests",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessRequests()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportUsageRequestValidationError{
				field:  "AccessRequests",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportUsageRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportUsageRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportUsageRequestValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportUsageRequestMultiError(errors)
	}

	return nil
}

// ReportUsageRequestMultiError is an error wrapping multiple validation errors
// returned by ReportUsageRequest.ValidateAll() if the designated constraints
// aren't met.
type ReportUsageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportUsageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportUsageRequestMultiError) AllErrors() []error { return m }

// ReportUsageRequestValidationError is the validation error returned by
// ReportUsageRequest.Validate if the designated constraints aren't met.
type ReportUsageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportUsageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportUsageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportUsageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportUsageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportUsageRequestValidationError) ErrorName() string {
	return "ReportUsageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportUsageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportUsageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportUsageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportUsageRequestValidationError{}

// Validate checks the field values on UserUsage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUsage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUsageMultiError, or nil
// if none found.
func (m *UserUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalUserCount

	// no validation rules for ActiveUserCount

	// no validation rules for Requestors_30DCount

	// no validation rules for TotalRequestorsCount

	if len(errors) > 0 {
		return UserUsageMultiError(errors)
	}

	return nil
}

// UserUsageMultiError is an error wrapping multiple validation errors returned
// by UserUsage.ValidateAll() if the designated constraints aren't met.
type UserUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUsageMultiError) AllErrors() []error { return m }

// UserUsageValidationError is the validation error returned by
// UserUsage.Validate if the designated constraints aren't met.
type UserUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUsageValidationError) ErrorName() string { return "UserUsageValidationError" }

// Error satisfies the builtin error interface
func (e UserUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUsageValidationError{}

// Validate checks the field values on AccessRequestUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessRequestUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessRequestUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessRequestUsageMultiError, or nil if none found.
func (m *AccessRequestUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessRequestUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalAccessRequestCount

	// no validation rules for AccessRequest_30DCount

	// no validation rules for AccessHoursReductionPercent_30D

	// no validation rules for AccessHoursReduction_30D

	// no validation rules for ManualApproval_30DCount

	if all {
		switch v := interface{}(m.GetRequestDuration_30DDistribution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessRequestUsageValidationError{
					field:  "RequestDuration_30DDistribution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessRequestUsageValidationError{
					field:  "RequestDuration_30DDistribution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDuration_30DDistribution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessRequestUsageValidationError{
				field:  "RequestDuration_30DDistribution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalWaitTime_30DDistribution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessRequestUsageValidationError{
					field:  "ApprovalWaitTime_30DDistribution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessRequestUsageValidationError{
					field:  "ApprovalWaitTime_30DDistribution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalWaitTime_30DDistribution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessRequestUsageValidationError{
				field:  "ApprovalWaitTime_30DDistribution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AccessRequestUsageMultiError(errors)
	}

	return nil
}

// AccessRequestUsageMultiError is an error wrapping multiple validation errors
// returned by AccessRequestUsage.ValidateAll() if the designated constraints
// aren't met.
type AccessRequestUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessRequestUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessRequestUsageMultiError) AllErrors() []error { return m }

// AccessRequestUsageValidationError is the validation error returned by
// AccessRequestUsage.Validate if the designated constraints aren't met.
type AccessRequestUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRequestUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRequestUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRequestUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRequestUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRequestUsageValidationError) ErrorName() string {
	return "AccessRequestUsageValidationError"
}

// Error satisfies the builtin error interface
func (e AccessRequestUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRequestUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRequestUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRequestUsageValidationError{}

// Validate checks the field values on ConfigurationUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigurationUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigurationUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigurationUsageMultiError, or nil if none found.
func (m *ConfigurationUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigurationUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowCount

	// no validation rules for AvailabilitySpecCount

	// no validation rules for PolicyCount

	// no validation rules for SlackAlertCount

	// no validation rules for EntitlementCount

	if len(errors) > 0 {
		return ConfigurationUsageMultiError(errors)
	}

	return nil
}

// ConfigurationUsageMultiError is an error wrapping multiple validation errors
// returned by ConfigurationUsage.ValidateAll() if the designated constraints
// aren't met.
type ConfigurationUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationUsageMultiError) AllErrors() []error { return m }

// ConfigurationUsageValidationError is the validation error returned by
// ConfigurationUsage.Validate if the designated constraints aren't met.
type ConfigurationUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationUsageValidationError) ErrorName() string {
	return "ConfigurationUsageValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigurationUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigurationUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationUsageValidationError{}

// Validate checks the field values on IntegrationUsage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IntegrationUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationUsageMultiError, or nil if none found.
func (m *IntegrationUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	// no validation rules for IntegrationType

	// no validation rules for UserAccountCount

	// no validation rules for GroupCount

	// no validation rules for TargetCount

	if len(errors) > 0 {
		return IntegrationUsageMultiError(errors)
	}

	return nil
}

// IntegrationUsageMultiError is an error wrapping multiple validation errors
// returned by IntegrationUsage.ValidateAll() if the designated constraints
// aren't met.
type IntegrationUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationUsageMultiError) AllErrors() []error { return m }

// IntegrationUsageValidationError is the validation error returned by
// IntegrationUsage.Validate if the designated constraints aren't met.
type IntegrationUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationUsageValidationError) ErrorName() string { return "IntegrationUsageValidationError" }

// Error satisfies the builtin error interface
func (e IntegrationUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationUsageValidationError{}

// Validate checks the field values on Distribution with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Distribution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DistributionMultiError, or
// nil if none found.
func (m *Distribution) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for P25

	// no validation rules for P50

	// no validation rules for P75

	// no validation rules for P95

	// no validation rules for Max

	if len(errors) > 0 {
		return DistributionMultiError(errors)
	}

	return nil
}

// DistributionMultiError is an error wrapping multiple validation errors
// returned by Distribution.ValidateAll() if the designated constraints aren't met.
type DistributionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributionMultiError) AllErrors() []error { return m }

// DistributionValidationError is the validation error returned by
// Distribution.Validate if the designated constraints aren't met.
type DistributionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributionValidationError) ErrorName() string { return "DistributionValidationError" }

// Error satisfies the builtin error interface
func (e DistributionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributionValidationError{}

// Validate checks the field values on ReportUsageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportUsageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportUsageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportUsageResponseMultiError, or nil if none found.
func (m *ReportUsageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportUsageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportUsageResponseMultiError(errors)
	}

	return nil
}

// ReportUsageResponseMultiError is an error wrapping multiple validation
// errors returned by ReportUsageResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportUsageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportUsageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportUsageResponseMultiError) AllErrors() []error { return m }

// ReportUsageResponseValidationError is the validation error returned by
// ReportUsageResponse.Validate if the designated constraints aren't met.
type ReportUsageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportUsageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportUsageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportUsageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportUsageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportUsageResponseValidationError) ErrorName() string {
	return "ReportUsageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportUsageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportUsageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportUsageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportUsageResponseValidationError{}
